// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`eslint-config-wantedly-typescript should match snapshot for: language 1`] = `
{
  "columnStart": 0,
  "createSourceCode": [Function],
  "fileType": "text",
  "lineStart": 1,
  "matchesSelectorClass": [Function],
  "nodeTypeKey": "type",
  "parse": [Function],
  "validateLanguageOptions": [Function],
  "visitorKeys": {
    "ArrayExpression": [
      "elements",
    ],
    "ArrayPattern": [
      "elements",
    ],
    "ArrowFunctionExpression": [
      "params",
      "body",
    ],
    "AssignmentExpression": [
      "left",
      "right",
    ],
    "AssignmentPattern": [
      "left",
      "right",
    ],
    "AwaitExpression": [
      "argument",
    ],
    "BinaryExpression": [
      "left",
      "right",
    ],
    "BlockStatement": [
      "body",
    ],
    "BreakStatement": [
      "label",
    ],
    "CallExpression": [
      "callee",
      "arguments",
    ],
    "CatchClause": [
      "param",
      "body",
    ],
    "ChainExpression": [
      "expression",
    ],
    "ClassBody": [
      "body",
    ],
    "ClassDeclaration": [
      "id",
      "superClass",
      "body",
    ],
    "ClassExpression": [
      "id",
      "superClass",
      "body",
    ],
    "ConditionalExpression": [
      "test",
      "consequent",
      "alternate",
    ],
    "ContinueStatement": [
      "label",
    ],
    "DebuggerStatement": [],
    "DoWhileStatement": [
      "body",
      "test",
    ],
    "EmptyStatement": [],
    "ExperimentalRestProperty": [
      "argument",
    ],
    "ExperimentalSpreadProperty": [
      "argument",
    ],
    "ExportAllDeclaration": [
      "exported",
      "source",
    ],
    "ExportDefaultDeclaration": [
      "declaration",
    ],
    "ExportNamedDeclaration": [
      "declaration",
      "specifiers",
      "source",
    ],
    "ExportSpecifier": [
      "exported",
      "local",
    ],
    "ExpressionStatement": [
      "expression",
    ],
    "ForInStatement": [
      "left",
      "right",
      "body",
    ],
    "ForOfStatement": [
      "left",
      "right",
      "body",
    ],
    "ForStatement": [
      "init",
      "test",
      "update",
      "body",
    ],
    "FunctionDeclaration": [
      "id",
      "params",
      "body",
    ],
    "FunctionExpression": [
      "id",
      "params",
      "body",
    ],
    "Identifier": [],
    "IfStatement": [
      "test",
      "consequent",
      "alternate",
    ],
    "ImportDeclaration": [
      "specifiers",
      "source",
    ],
    "ImportDefaultSpecifier": [
      "local",
    ],
    "ImportExpression": [
      "source",
    ],
    "ImportNamespaceSpecifier": [
      "local",
    ],
    "ImportSpecifier": [
      "imported",
      "local",
    ],
    "JSXAttribute": [
      "name",
      "value",
    ],
    "JSXClosingElement": [
      "name",
    ],
    "JSXClosingFragment": [],
    "JSXElement": [
      "openingElement",
      "children",
      "closingElement",
    ],
    "JSXEmptyExpression": [],
    "JSXExpressionContainer": [
      "expression",
    ],
    "JSXFragment": [
      "openingFragment",
      "children",
      "closingFragment",
    ],
    "JSXIdentifier": [],
    "JSXMemberExpression": [
      "object",
      "property",
    ],
    "JSXNamespacedName": [
      "namespace",
      "name",
    ],
    "JSXOpeningElement": [
      "name",
      "attributes",
    ],
    "JSXOpeningFragment": [],
    "JSXSpreadAttribute": [
      "argument",
    ],
    "JSXSpreadChild": [
      "expression",
    ],
    "JSXText": [],
    "LabeledStatement": [
      "label",
      "body",
    ],
    "Literal": [],
    "LogicalExpression": [
      "left",
      "right",
    ],
    "MemberExpression": [
      "object",
      "property",
    ],
    "MetaProperty": [
      "meta",
      "property",
    ],
    "MethodDefinition": [
      "key",
      "value",
    ],
    "NewExpression": [
      "callee",
      "arguments",
    ],
    "ObjectExpression": [
      "properties",
    ],
    "ObjectPattern": [
      "properties",
    ],
    "PrivateIdentifier": [],
    "Program": [
      "body",
    ],
    "Property": [
      "key",
      "value",
    ],
    "PropertyDefinition": [
      "key",
      "value",
    ],
    "RestElement": [
      "argument",
    ],
    "ReturnStatement": [
      "argument",
    ],
    "SequenceExpression": [
      "expressions",
    ],
    "SpreadElement": [
      "argument",
    ],
    "StaticBlock": [
      "body",
    ],
    "Super": [],
    "SwitchCase": [
      "test",
      "consequent",
    ],
    "SwitchStatement": [
      "discriminant",
      "cases",
    ],
    "TaggedTemplateExpression": [
      "tag",
      "quasi",
    ],
    "TemplateElement": [],
    "TemplateLiteral": [
      "quasis",
      "expressions",
    ],
    "ThisExpression": [],
    "ThrowStatement": [
      "argument",
    ],
    "TryStatement": [
      "block",
      "handler",
      "finalizer",
    ],
    "UnaryExpression": [
      "argument",
    ],
    "UpdateExpression": [
      "argument",
    ],
    "VariableDeclaration": [
      "declarations",
    ],
    "VariableDeclarator": [
      "id",
      "init",
    ],
    "WhileStatement": [
      "test",
      "body",
    ],
    "WithStatement": [
      "object",
      "body",
    ],
    "YieldExpression": [
      "argument",
    ],
  },
}
`;

exports[`eslint-config-wantedly-typescript should match snapshot for: languageOptions 1`] = `
{
  "ecmaVersion": 5,
  "globals": {
    "AI": false,
    "AITextSession": false,
    "AbortController": false,
    "AbortSignal": false,
    "AbsoluteOrientationSensor": false,
    "AbstractRange": false,
    "Accelerometer": false,
    "AnalyserNode": false,
    "Animation": false,
    "AnimationEffect": false,
    "AnimationEvent": false,
    "AnimationPlaybackEvent": false,
    "AnimationTimeline": false,
    "Attr": false,
    "Audio": false,
    "AudioBuffer": false,
    "AudioBufferSourceNode": false,
    "AudioContext": false,
    "AudioData": false,
    "AudioDecoder": false,
    "AudioDestinationNode": false,
    "AudioEncoder": false,
    "AudioListener": false,
    "AudioNode": false,
    "AudioParam": false,
    "AudioParamMap": false,
    "AudioProcessingEvent": false,
    "AudioScheduledSourceNode": false,
    "AudioSinkInfo": false,
    "AudioWorklet": false,
    "AudioWorkletGlobalScope": false,
    "AudioWorkletNode": false,
    "AudioWorkletProcessor": false,
    "AuthenticatorAssertionResponse": false,
    "AuthenticatorAttestationResponse": false,
    "AuthenticatorResponse": false,
    "BackgroundFetchManager": false,
    "BackgroundFetchRecord": false,
    "BackgroundFetchRegistration": false,
    "BarProp": false,
    "BaseAudioContext": false,
    "BatteryManager": false,
    "BeforeUnloadEvent": false,
    "BiquadFilterNode": false,
    "Blob": false,
    "BlobEvent": false,
    "Bluetooth": false,
    "BluetoothCharacteristicProperties": false,
    "BluetoothDevice": false,
    "BluetoothRemoteGATTCharacteristic": false,
    "BluetoothRemoteGATTDescriptor": false,
    "BluetoothRemoteGATTServer": false,
    "BluetoothRemoteGATTService": false,
    "BluetoothUUID": false,
    "BroadcastChannel": false,
    "BrowserCaptureMediaStreamTrack": false,
    "Buffer": false,
    "ByteLengthQueuingStrategy": false,
    "CDATASection": false,
    "CSS": false,
    "CSSAnimation": false,
    "CSSConditionRule": false,
    "CSSContainerRule": false,
    "CSSCounterStyleRule": false,
    "CSSFontFaceRule": false,
    "CSSFontFeatureValuesRule": false,
    "CSSFontPaletteValuesRule": false,
    "CSSGroupingRule": false,
    "CSSImageValue": false,
    "CSSImportRule": false,
    "CSSKeyframeRule": false,
    "CSSKeyframesRule": false,
    "CSSKeywordValue": false,
    "CSSLayerBlockRule": false,
    "CSSLayerStatementRule": false,
    "CSSMathClamp": false,
    "CSSMathInvert": false,
    "CSSMathMax": false,
    "CSSMathMin": false,
    "CSSMathNegate": false,
    "CSSMathProduct": false,
    "CSSMathSum": false,
    "CSSMathValue": false,
    "CSSMatrixComponent": false,
    "CSSMediaRule": false,
    "CSSNamespaceRule": false,
    "CSSNumericArray": false,
    "CSSNumericValue": false,
    "CSSPageDescriptors": false,
    "CSSPageRule": false,
    "CSSPerspective": false,
    "CSSPositionTryDescriptors": false,
    "CSSPositionTryRule": false,
    "CSSPositionValue": false,
    "CSSPropertyRule": false,
    "CSSRotate": false,
    "CSSRule": false,
    "CSSRuleList": false,
    "CSSScale": false,
    "CSSScopeRule": false,
    "CSSSkew": false,
    "CSSSkewX": false,
    "CSSSkewY": false,
    "CSSStartingStyleRule": false,
    "CSSStyleDeclaration": false,
    "CSSStyleRule": false,
    "CSSStyleSheet": false,
    "CSSStyleValue": false,
    "CSSSupportsRule": false,
    "CSSTransformComponent": false,
    "CSSTransformValue": false,
    "CSSTransition": false,
    "CSSTranslate": false,
    "CSSUnitValue": false,
    "CSSUnparsedValue": false,
    "CSSVariableReferenceValue": false,
    "CSSViewTransitionRule": false,
    "Cache": false,
    "CacheStorage": false,
    "CanvasCaptureMediaStream": false,
    "CanvasCaptureMediaStreamTrack": false,
    "CanvasGradient": false,
    "CanvasPattern": false,
    "CanvasRenderingContext2D": false,
    "CaptureController": false,
    "CaretPosition": false,
    "ChannelMergerNode": false,
    "ChannelSplitterNode": false,
    "ChapterInformation": false,
    "CharacterBoundsUpdateEvent": false,
    "CharacterData": false,
    "Clipboard": false,
    "ClipboardEvent": false,
    "ClipboardItem": false,
    "CloseEvent": false,
    "CloseWatcher": false,
    "Comment": false,
    "CompositionEvent": false,
    "CompressionStream": false,
    "ConstantSourceNode": false,
    "ContentVisibilityAutoStateChangeEvent": false,
    "ConvolverNode": false,
    "CookieChangeEvent": false,
    "CookieDeprecationLabel": false,
    "CookieStore": false,
    "CookieStoreManager": false,
    "CountQueuingStrategy": false,
    "Credential": false,
    "CredentialsContainer": false,
    "CropTarget": false,
    "Crypto": false,
    "CryptoKey": false,
    "CustomElementRegistry": false,
    "CustomEvent": false,
    "CustomStateSet": false,
    "DOMError": false,
    "DOMException": false,
    "DOMImplementation": false,
    "DOMMatrix": false,
    "DOMMatrixReadOnly": false,
    "DOMParser": false,
    "DOMPoint": false,
    "DOMPointReadOnly": false,
    "DOMQuad": false,
    "DOMRect": false,
    "DOMRectList": false,
    "DOMRectReadOnly": false,
    "DOMStringList": false,
    "DOMStringMap": false,
    "DOMTokenList": false,
    "DataTransfer": false,
    "DataTransferItem": false,
    "DataTransferItemList": false,
    "DecompressionStream": false,
    "DelayNode": false,
    "DelegatedInkTrailPresenter": false,
    "DeviceMotionEvent": false,
    "DeviceMotionEventAcceleration": false,
    "DeviceMotionEventRotationRate": false,
    "DeviceOrientationEvent": false,
    "Document": false,
    "DocumentFragment": false,
    "DocumentPictureInPicture": false,
    "DocumentPictureInPictureEvent": false,
    "DocumentTimeline": false,
    "DocumentType": false,
    "DragEvent": false,
    "DynamicsCompressorNode": false,
    "EditContext": false,
    "Element": false,
    "ElementInternals": false,
    "EncodedAudioChunk": false,
    "EncodedVideoChunk": false,
    "ErrorEvent": false,
    "Event": false,
    "EventCounts": false,
    "EventSource": false,
    "EventTarget": false,
    "External": false,
    "EyeDropper": false,
    "FeaturePolicy": false,
    "FederatedCredential": false,
    "Fence": false,
    "FencedFrameConfig": false,
    "FetchLaterResult": false,
    "File": false,
    "FileList": false,
    "FileReader": false,
    "FileSystem": false,
    "FileSystemDirectoryEntry": false,
    "FileSystemDirectoryHandle": false,
    "FileSystemDirectoryReader": false,
    "FileSystemEntry": false,
    "FileSystemFileEntry": false,
    "FileSystemFileHandle": false,
    "FileSystemHandle": false,
    "FileSystemWritableFileStream": false,
    "Float16Array": false,
    "FocusEvent": false,
    "FontData": false,
    "FontFace": false,
    "FontFaceSet": false,
    "FontFaceSetLoadEvent": false,
    "FormData": false,
    "FormDataEvent": false,
    "FragmentDirective": false,
    "GPU": false,
    "GPUAdapter": false,
    "GPUAdapterInfo": false,
    "GPUBindGroup": false,
    "GPUBindGroupLayout": false,
    "GPUBuffer": false,
    "GPUBufferUsage": false,
    "GPUCanvasContext": false,
    "GPUColorWrite": false,
    "GPUCommandBuffer": false,
    "GPUCommandEncoder": false,
    "GPUCompilationInfo": false,
    "GPUCompilationMessage": false,
    "GPUComputePassEncoder": false,
    "GPUComputePipeline": false,
    "GPUDevice": false,
    "GPUDeviceLostInfo": false,
    "GPUError": false,
    "GPUExternalTexture": false,
    "GPUInternalError": false,
    "GPUMapMode": false,
    "GPUOutOfMemoryError": false,
    "GPUPipelineError": false,
    "GPUPipelineLayout": false,
    "GPUQuerySet": false,
    "GPUQueue": false,
    "GPURenderBundle": false,
    "GPURenderBundleEncoder": false,
    "GPURenderPassEncoder": false,
    "GPURenderPipeline": false,
    "GPUSampler": false,
    "GPUShaderModule": false,
    "GPUShaderStage": false,
    "GPUSupportedFeatures": false,
    "GPUSupportedLimits": false,
    "GPUTexture": false,
    "GPUTextureUsage": false,
    "GPUTextureView": false,
    "GPUUncapturedErrorEvent": false,
    "GPUValidationError": false,
    "GainNode": false,
    "Gamepad": false,
    "GamepadAxisMoveEvent": false,
    "GamepadButton": false,
    "GamepadButtonEvent": false,
    "GamepadEvent": false,
    "GamepadHapticActuator": false,
    "GamepadPose": false,
    "Geolocation": false,
    "GeolocationCoordinates": false,
    "GeolocationPosition": false,
    "GeolocationPositionError": false,
    "GravitySensor": false,
    "Gyroscope": false,
    "HID": false,
    "HIDConnectionEvent": false,
    "HIDDevice": false,
    "HIDInputReportEvent": false,
    "HTMLAllCollection": false,
    "HTMLAnchorElement": false,
    "HTMLAreaElement": false,
    "HTMLAudioElement": false,
    "HTMLBRElement": false,
    "HTMLBaseElement": false,
    "HTMLBodyElement": false,
    "HTMLButtonElement": false,
    "HTMLCanvasElement": false,
    "HTMLCollection": false,
    "HTMLDListElement": false,
    "HTMLDataElement": false,
    "HTMLDataListElement": false,
    "HTMLDetailsElement": false,
    "HTMLDialogElement": false,
    "HTMLDirectoryElement": false,
    "HTMLDivElement": false,
    "HTMLDocument": false,
    "HTMLElement": false,
    "HTMLEmbedElement": false,
    "HTMLFencedFrameElement": false,
    "HTMLFieldSetElement": false,
    "HTMLFontElement": false,
    "HTMLFormControlsCollection": false,
    "HTMLFormElement": false,
    "HTMLFrameElement": false,
    "HTMLFrameSetElement": false,
    "HTMLHRElement": false,
    "HTMLHeadElement": false,
    "HTMLHeadingElement": false,
    "HTMLHtmlElement": false,
    "HTMLIFrameElement": false,
    "HTMLImageElement": false,
    "HTMLInputElement": false,
    "HTMLLIElement": false,
    "HTMLLabelElement": false,
    "HTMLLegendElement": false,
    "HTMLLinkElement": false,
    "HTMLMapElement": false,
    "HTMLMarqueeElement": false,
    "HTMLMediaElement": false,
    "HTMLMenuElement": false,
    "HTMLMetaElement": false,
    "HTMLMeterElement": false,
    "HTMLModElement": false,
    "HTMLOListElement": false,
    "HTMLObjectElement": false,
    "HTMLOptGroupElement": false,
    "HTMLOptionElement": false,
    "HTMLOptionsCollection": false,
    "HTMLOutputElement": false,
    "HTMLParagraphElement": false,
    "HTMLParamElement": false,
    "HTMLPictureElement": false,
    "HTMLPreElement": false,
    "HTMLProgressElement": false,
    "HTMLQuoteElement": false,
    "HTMLScriptElement": false,
    "HTMLSelectElement": false,
    "HTMLSlotElement": false,
    "HTMLSourceElement": false,
    "HTMLSpanElement": false,
    "HTMLStyleElement": false,
    "HTMLTableCaptionElement": false,
    "HTMLTableCellElement": false,
    "HTMLTableColElement": false,
    "HTMLTableElement": false,
    "HTMLTableRowElement": false,
    "HTMLTableSectionElement": false,
    "HTMLTemplateElement": false,
    "HTMLTextAreaElement": false,
    "HTMLTimeElement": false,
    "HTMLTitleElement": false,
    "HTMLTrackElement": false,
    "HTMLUListElement": false,
    "HTMLUnknownElement": false,
    "HTMLVideoElement": false,
    "HashChangeEvent": false,
    "Headers": false,
    "Highlight": false,
    "HighlightRegistry": false,
    "History": false,
    "IDBCursor": false,
    "IDBCursorWithValue": false,
    "IDBDatabase": false,
    "IDBFactory": false,
    "IDBIndex": false,
    "IDBKeyRange": false,
    "IDBObjectStore": false,
    "IDBOpenDBRequest": false,
    "IDBRequest": false,
    "IDBTransaction": false,
    "IDBVersionChangeEvent": false,
    "IIRFilterNode": false,
    "IdentityCredential": false,
    "IdentityCredentialError": false,
    "IdentityProvider": false,
    "IdleDeadline": false,
    "IdleDetector": false,
    "Image": false,
    "ImageBitmap": false,
    "ImageBitmapRenderingContext": false,
    "ImageCapture": false,
    "ImageData": false,
    "ImageDecoder": false,
    "ImageTrack": false,
    "ImageTrackList": false,
    "Ink": false,
    "InputDeviceCapabilities": false,
    "InputDeviceInfo": false,
    "InputEvent": false,
    "IntersectionObserver": false,
    "IntersectionObserverEntry": false,
    "Iterator": false,
    "Keyboard": false,
    "KeyboardEvent": false,
    "KeyboardLayoutMap": false,
    "KeyframeEffect": false,
    "LargestContentfulPaint": false,
    "LaunchParams": false,
    "LaunchQueue": false,
    "LayoutShift": false,
    "LayoutShiftAttribution": false,
    "LinearAccelerationSensor": false,
    "Location": false,
    "Lock": false,
    "LockManager": false,
    "MIDIAccess": false,
    "MIDIConnectionEvent": false,
    "MIDIInput": false,
    "MIDIInputMap": false,
    "MIDIMessageEvent": false,
    "MIDIOutput": false,
    "MIDIOutputMap": false,
    "MIDIPort": false,
    "MathMLElement": false,
    "MediaCapabilities": false,
    "MediaCapabilitiesInfo": false,
    "MediaDeviceInfo": false,
    "MediaDevices": false,
    "MediaElementAudioSourceNode": false,
    "MediaEncryptedEvent": false,
    "MediaError": false,
    "MediaKeyError": false,
    "MediaKeyMessageEvent": false,
    "MediaKeySession": false,
    "MediaKeyStatusMap": false,
    "MediaKeySystemAccess": false,
    "MediaKeys": false,
    "MediaList": false,
    "MediaMetadata": false,
    "MediaQueryList": false,
    "MediaQueryListEvent": false,
    "MediaRecorder": false,
    "MediaRecorderErrorEvent": false,
    "MediaSession": false,
    "MediaSource": false,
    "MediaSourceHandle": false,
    "MediaStream": false,
    "MediaStreamAudioDestinationNode": false,
    "MediaStreamAudioSourceNode": false,
    "MediaStreamEvent": false,
    "MediaStreamTrack": false,
    "MediaStreamTrackAudioSourceNode": false,
    "MediaStreamTrackAudioStats": false,
    "MediaStreamTrackEvent": false,
    "MediaStreamTrackGenerator": false,
    "MediaStreamTrackProcessor": false,
    "MediaStreamTrackVideoStats": false,
    "MessageChannel": false,
    "MessageEvent": false,
    "MessagePort": false,
    "MimeType": false,
    "MimeTypeArray": false,
    "ModelGenericSession": false,
    "ModelManager": false,
    "MouseEvent": false,
    "MutationEvent": false,
    "MutationObserver": false,
    "MutationRecord": false,
    "NamedNodeMap": false,
    "NavigateEvent": false,
    "Navigation": false,
    "NavigationActivation": false,
    "NavigationCurrentEntryChangeEvent": false,
    "NavigationDestination": false,
    "NavigationHistoryEntry": false,
    "NavigationPreloadManager": false,
    "NavigationTransition": false,
    "Navigator": false,
    "NavigatorLogin": false,
    "NavigatorManagedData": false,
    "NavigatorUAData": false,
    "NetworkInformation": false,
    "Node": false,
    "NodeFilter": false,
    "NodeIterator": false,
    "NodeList": false,
    "NotRestoredReasonDetails": false,
    "NotRestoredReasons": false,
    "Notification": false,
    "NotifyPaintEvent": false,
    "OTPCredential": false,
    "OfflineAudioCompletionEvent": false,
    "OfflineAudioContext": false,
    "OffscreenCanvas": false,
    "OffscreenCanvasRenderingContext2D": false,
    "Option": false,
    "OrientationSensor": false,
    "OscillatorNode": false,
    "OverconstrainedError": false,
    "PERSISTENT": false,
    "PageRevealEvent": false,
    "PageSwapEvent": false,
    "PageTransitionEvent": false,
    "PannerNode": false,
    "PasswordCredential": false,
    "Path2D": false,
    "PaymentAddress": false,
    "PaymentManager": false,
    "PaymentMethodChangeEvent": false,
    "PaymentRequest": false,
    "PaymentRequestUpdateEvent": false,
    "PaymentResponse": false,
    "Performance": false,
    "PerformanceElementTiming": false,
    "PerformanceEntry": false,
    "PerformanceEventTiming": false,
    "PerformanceLongAnimationFrameTiming": false,
    "PerformanceLongTaskTiming": false,
    "PerformanceMark": false,
    "PerformanceMeasure": false,
    "PerformanceNavigation": false,
    "PerformanceNavigationTiming": false,
    "PerformanceObserver": false,
    "PerformanceObserverEntryList": false,
    "PerformancePaintTiming": false,
    "PerformanceResourceTiming": false,
    "PerformanceScriptTiming": false,
    "PerformanceServerTiming": false,
    "PerformanceTiming": false,
    "PeriodicSyncManager": false,
    "PeriodicWave": false,
    "PermissionStatus": false,
    "Permissions": false,
    "PictureInPictureEvent": false,
    "PictureInPictureWindow": false,
    "Plugin": false,
    "PluginArray": false,
    "PointerEvent": false,
    "PopStateEvent": false,
    "Presentation": false,
    "PresentationAvailability": false,
    "PresentationConnection": false,
    "PresentationConnectionAvailableEvent": false,
    "PresentationConnectionCloseEvent": false,
    "PresentationConnectionList": false,
    "PresentationReceiver": false,
    "PresentationRequest": false,
    "PressureObserver": false,
    "PressureRecord": false,
    "ProcessingInstruction": false,
    "Profiler": false,
    "ProgressEvent": false,
    "PromiseRejectionEvent": false,
    "ProtectedAudience": false,
    "PublicKeyCredential": false,
    "PushManager": false,
    "PushSubscription": false,
    "PushSubscriptionOptions": false,
    "RTCCertificate": false,
    "RTCDTMFSender": false,
    "RTCDTMFToneChangeEvent": false,
    "RTCDataChannel": false,
    "RTCDataChannelEvent": false,
    "RTCDtlsTransport": false,
    "RTCEncodedAudioFrame": false,
    "RTCEncodedVideoFrame": false,
    "RTCError": false,
    "RTCErrorEvent": false,
    "RTCIceCandidate": false,
    "RTCIceTransport": false,
    "RTCPeerConnection": false,
    "RTCPeerConnectionIceErrorEvent": false,
    "RTCPeerConnectionIceEvent": false,
    "RTCRtpReceiver": false,
    "RTCRtpScriptTransform": false,
    "RTCRtpSender": false,
    "RTCRtpTransceiver": false,
    "RTCSctpTransport": false,
    "RTCSessionDescription": false,
    "RTCStatsReport": false,
    "RTCTrackEvent": false,
    "RadioNodeList": false,
    "Range": false,
    "ReadableByteStreamController": false,
    "ReadableStream": false,
    "ReadableStreamBYOBReader": false,
    "ReadableStreamBYOBRequest": false,
    "ReadableStreamDefaultController": false,
    "ReadableStreamDefaultReader": false,
    "RelativeOrientationSensor": false,
    "RemotePlayback": false,
    "ReportingObserver": false,
    "Request": false,
    "ResizeObserver": false,
    "ResizeObserverEntry": false,
    "ResizeObserverSize": false,
    "Response": false,
    "SVGAElement": false,
    "SVGAngle": false,
    "SVGAnimateElement": false,
    "SVGAnimateMotionElement": false,
    "SVGAnimateTransformElement": false,
    "SVGAnimatedAngle": false,
    "SVGAnimatedBoolean": false,
    "SVGAnimatedEnumeration": false,
    "SVGAnimatedInteger": false,
    "SVGAnimatedLength": false,
    "SVGAnimatedLengthList": false,
    "SVGAnimatedNumber": false,
    "SVGAnimatedNumberList": false,
    "SVGAnimatedPreserveAspectRatio": false,
    "SVGAnimatedRect": false,
    "SVGAnimatedString": false,
    "SVGAnimatedTransformList": false,
    "SVGAnimationElement": false,
    "SVGCircleElement": false,
    "SVGClipPathElement": false,
    "SVGComponentTransferFunctionElement": false,
    "SVGDefsElement": false,
    "SVGDescElement": false,
    "SVGElement": false,
    "SVGEllipseElement": false,
    "SVGFEBlendElement": false,
    "SVGFEColorMatrixElement": false,
    "SVGFEComponentTransferElement": false,
    "SVGFECompositeElement": false,
    "SVGFEConvolveMatrixElement": false,
    "SVGFEDiffuseLightingElement": false,
    "SVGFEDisplacementMapElement": false,
    "SVGFEDistantLightElement": false,
    "SVGFEDropShadowElement": false,
    "SVGFEFloodElement": false,
    "SVGFEFuncAElement": false,
    "SVGFEFuncBElement": false,
    "SVGFEFuncGElement": false,
    "SVGFEFuncRElement": false,
    "SVGFEGaussianBlurElement": false,
    "SVGFEImageElement": false,
    "SVGFEMergeElement": false,
    "SVGFEMergeNodeElement": false,
    "SVGFEMorphologyElement": false,
    "SVGFEOffsetElement": false,
    "SVGFEPointLightElement": false,
    "SVGFESpecularLightingElement": false,
    "SVGFESpotLightElement": false,
    "SVGFETileElement": false,
    "SVGFETurbulenceElement": false,
    "SVGFilterElement": false,
    "SVGForeignObjectElement": false,
    "SVGGElement": false,
    "SVGGeometryElement": false,
    "SVGGradientElement": false,
    "SVGGraphicsElement": false,
    "SVGImageElement": false,
    "SVGLength": false,
    "SVGLengthList": false,
    "SVGLineElement": false,
    "SVGLinearGradientElement": false,
    "SVGMPathElement": false,
    "SVGMarkerElement": false,
    "SVGMaskElement": false,
    "SVGMatrix": false,
    "SVGMetadataElement": false,
    "SVGNumber": false,
    "SVGNumberList": false,
    "SVGPathElement": false,
    "SVGPatternElement": false,
    "SVGPoint": false,
    "SVGPointList": false,
    "SVGPolygonElement": false,
    "SVGPolylineElement": false,
    "SVGPreserveAspectRatio": false,
    "SVGRadialGradientElement": false,
    "SVGRect": false,
    "SVGRectElement": false,
    "SVGSVGElement": false,
    "SVGScriptElement": false,
    "SVGSetElement": false,
    "SVGStopElement": false,
    "SVGStringList": false,
    "SVGStyleElement": false,
    "SVGSwitchElement": false,
    "SVGSymbolElement": false,
    "SVGTSpanElement": false,
    "SVGTextContentElement": false,
    "SVGTextElement": false,
    "SVGTextPathElement": false,
    "SVGTextPositioningElement": false,
    "SVGTitleElement": false,
    "SVGTransform": false,
    "SVGTransformList": false,
    "SVGUnitTypes": false,
    "SVGUseElement": false,
    "SVGViewElement": false,
    "Scheduler": false,
    "Scheduling": false,
    "Screen": false,
    "ScreenDetailed": false,
    "ScreenDetails": false,
    "ScreenOrientation": false,
    "ScriptProcessorNode": false,
    "ScrollTimeline": false,
    "SecurityPolicyViolationEvent": false,
    "Selection": false,
    "Sensor": false,
    "SensorErrorEvent": false,
    "Serial": false,
    "SerialPort": false,
    "ServiceWorker": false,
    "ServiceWorkerContainer": false,
    "ServiceWorkerRegistration": false,
    "ShadowRoot": false,
    "SharedStorage": false,
    "SharedStorageWorklet": false,
    "SharedWorker": false,
    "SourceBuffer": false,
    "SourceBufferList": false,
    "SpeechSynthesis": false,
    "SpeechSynthesisErrorEvent": false,
    "SpeechSynthesisEvent": false,
    "SpeechSynthesisUtterance": false,
    "SpeechSynthesisVoice": false,
    "StaticRange": false,
    "StereoPannerNode": false,
    "Storage": false,
    "StorageBucket": false,
    "StorageBucketManager": false,
    "StorageEvent": false,
    "StorageManager": false,
    "StylePropertyMap": false,
    "StylePropertyMapReadOnly": false,
    "StyleSheet": false,
    "StyleSheetList": false,
    "SubmitEvent": false,
    "SubtleCrypto": false,
    "SyncManager": false,
    "TEMPORARY": false,
    "TaskAttributionTiming": false,
    "TaskController": false,
    "TaskPriorityChangeEvent": false,
    "TaskSignal": false,
    "Text": false,
    "TextDecoder": false,
    "TextDecoderStream": false,
    "TextEncoder": false,
    "TextEncoderStream": false,
    "TextEvent": false,
    "TextFormat": false,
    "TextFormatUpdateEvent": false,
    "TextMetrics": false,
    "TextTrack": false,
    "TextTrackCue": false,
    "TextTrackCueList": false,
    "TextTrackList": false,
    "TextUpdateEvent": false,
    "TimeEvent": false,
    "TimeRanges": false,
    "ToggleEvent": false,
    "Touch": false,
    "TouchEvent": false,
    "TouchList": false,
    "TrackEvent": false,
    "TransformStream": false,
    "TransformStreamDefaultController": false,
    "TransitionEvent": false,
    "TreeWalker": false,
    "TrustedHTML": false,
    "TrustedScript": false,
    "TrustedScriptURL": false,
    "TrustedTypePolicy": false,
    "TrustedTypePolicyFactory": false,
    "UIEvent": false,
    "URL": false,
    "URLPattern": false,
    "URLSearchParams": false,
    "USB": false,
    "USBAlternateInterface": false,
    "USBConfiguration": false,
    "USBConnectionEvent": false,
    "USBDevice": false,
    "USBEndpoint": false,
    "USBInTransferResult": false,
    "USBInterface": false,
    "USBIsochronousInTransferPacket": false,
    "USBIsochronousInTransferResult": false,
    "USBIsochronousOutTransferPacket": false,
    "USBIsochronousOutTransferResult": false,
    "USBOutTransferResult": false,
    "UserActivation": false,
    "VTTCue": false,
    "VTTRegion": false,
    "ValidityState": false,
    "VideoColorSpace": false,
    "VideoDecoder": false,
    "VideoEncoder": false,
    "VideoFrame": false,
    "VideoPlaybackQuality": false,
    "ViewTimeline": false,
    "ViewTransition": false,
    "ViewTransitionTypeSet": false,
    "VirtualKeyboard": false,
    "VirtualKeyboardGeometryChangeEvent": false,
    "VisibilityStateEntry": false,
    "VisualViewport": false,
    "WGSLLanguageFeatures": false,
    "WakeLock": false,
    "WakeLockSentinel": false,
    "WaveShaperNode": false,
    "WebAssembly": false,
    "WebGL2RenderingContext": false,
    "WebGLActiveInfo": false,
    "WebGLBuffer": false,
    "WebGLContextEvent": false,
    "WebGLFramebuffer": false,
    "WebGLObject": false,
    "WebGLProgram": false,
    "WebGLQuery": false,
    "WebGLRenderbuffer": false,
    "WebGLRenderingContext": false,
    "WebGLSampler": false,
    "WebGLShader": false,
    "WebGLShaderPrecisionFormat": false,
    "WebGLSync": false,
    "WebGLTexture": false,
    "WebGLTransformFeedback": false,
    "WebGLUniformLocation": false,
    "WebGLVertexArrayObject": false,
    "WebSocket": false,
    "WebSocketError": false,
    "WebSocketStream": false,
    "WebTransport": false,
    "WebTransportBidirectionalStream": false,
    "WebTransportDatagramDuplexStream": false,
    "WebTransportError": false,
    "WebTransportReceiveStream": false,
    "WebTransportSendStream": false,
    "WheelEvent": false,
    "Window": false,
    "WindowControlsOverlay": false,
    "WindowControlsOverlayGeometryChangeEvent": false,
    "Worker": false,
    "Worklet": false,
    "WorkletGlobalScope": false,
    "WritableStream": false,
    "WritableStreamDefaultController": false,
    "WritableStreamDefaultWriter": false,
    "XMLDocument": false,
    "XMLHttpRequest": false,
    "XMLHttpRequestEventTarget": false,
    "XMLHttpRequestUpload": false,
    "XMLSerializer": false,
    "XPathEvaluator": false,
    "XPathExpression": false,
    "XPathResult": false,
    "XRAnchor": false,
    "XRAnchorSet": false,
    "XRBoundedReferenceSpace": false,
    "XRCPUDepthInformation": false,
    "XRCamera": false,
    "XRDOMOverlayState": false,
    "XRDepthInformation": false,
    "XRFrame": false,
    "XRHitTestResult": false,
    "XRHitTestSource": false,
    "XRInputSource": false,
    "XRInputSourceArray": false,
    "XRInputSourceEvent": false,
    "XRInputSourcesChangeEvent": false,
    "XRLayer": false,
    "XRLightEstimate": false,
    "XRLightProbe": false,
    "XRPose": false,
    "XRRay": false,
    "XRReferenceSpace": false,
    "XRReferenceSpaceEvent": false,
    "XRRenderState": false,
    "XRRigidTransform": false,
    "XRSession": false,
    "XRSessionEvent": false,
    "XRSpace": false,
    "XRSystem": false,
    "XRTransientInputHitTestResult": false,
    "XRTransientInputHitTestSource": false,
    "XRView": false,
    "XRViewerPose": false,
    "XRViewport": false,
    "XRWebGLBinding": false,
    "XRWebGLDepthInformation": false,
    "XRWebGLLayer": false,
    "XSLTProcessor": false,
    "__dirname": false,
    "__filename": false,
    "addEventListener": false,
    "afterAll": false,
    "afterEach": false,
    "ai": false,
    "alert": false,
    "atob": false,
    "beforeAll": false,
    "beforeEach": false,
    "blur": false,
    "btoa": false,
    "caches": false,
    "cancelAnimationFrame": false,
    "cancelIdleCallback": false,
    "clearImmediate": false,
    "clearInterval": false,
    "clearTimeout": false,
    "clientInformation": false,
    "close": false,
    "closed": false,
    "confirm": false,
    "console": false,
    "cookieStore": false,
    "createImageBitmap": false,
    "credentialless": false,
    "crossOriginIsolated": false,
    "crypto": false,
    "currentFrame": false,
    "currentTime": false,
    "customElements": false,
    "describe": false,
    "devicePixelRatio": false,
    "dispatchEvent": false,
    "document": false,
    "documentPictureInPicture": false,
    "event": false,
    "expect": false,
    "exports": true,
    "external": false,
    "fence": false,
    "fetch": false,
    "fetchLater": false,
    "find": false,
    "fit": false,
    "flushPromises": true,
    "focus": false,
    "frameElement": false,
    "frames": false,
    "getComputedStyle": false,
    "getScreenDetails": false,
    "getSelection": false,
    "global": false,
    "history": false,
    "indexedDB": false,
    "innerHeight": false,
    "innerWidth": false,
    "isSecureContext": false,
    "it": false,
    "jest": false,
    "launchQueue": false,
    "length": false,
    "localStorage": false,
    "location": true,
    "locationbar": false,
    "matchMedia": false,
    "menubar": false,
    "model": false,
    "module": false,
    "moveBy": false,
    "moveTo": false,
    "name": false,
    "navigation": false,
    "navigator": false,
    "offscreenBuffering": false,
    "onabort": true,
    "onafterprint": true,
    "onanimationcancel": true,
    "onanimationend": true,
    "onanimationiteration": true,
    "onanimationstart": true,
    "onappinstalled": true,
    "onauxclick": true,
    "onbeforeinput": true,
    "onbeforeinstallprompt": true,
    "onbeforematch": true,
    "onbeforeprint": true,
    "onbeforetoggle": true,
    "onbeforeunload": true,
    "onbeforexrselect": true,
    "onblur": true,
    "oncancel": true,
    "oncanplay": true,
    "oncanplaythrough": true,
    "onchange": true,
    "onclick": true,
    "onclose": true,
    "oncontentvisibilityautostatechange": true,
    "oncontextlost": true,
    "oncontextmenu": true,
    "oncontextrestored": true,
    "oncopy": true,
    "oncuechange": true,
    "oncut": true,
    "ondblclick": true,
    "ondevicemotion": true,
    "ondeviceorientation": true,
    "ondeviceorientationabsolute": true,
    "ondrag": true,
    "ondragend": true,
    "ondragenter": true,
    "ondragleave": true,
    "ondragover": true,
    "ondragstart": true,
    "ondrop": true,
    "ondurationchange": true,
    "onemptied": true,
    "onended": true,
    "onerror": true,
    "onfocus": true,
    "onformdata": true,
    "ongamepadconnected": true,
    "ongamepaddisconnected": true,
    "ongotpointercapture": true,
    "onhashchange": true,
    "oninput": true,
    "oninvalid": true,
    "onkeydown": true,
    "onkeypress": true,
    "onkeyup": true,
    "onlanguagechange": true,
    "onload": true,
    "onloadeddata": true,
    "onloadedmetadata": true,
    "onloadstart": true,
    "onlostpointercapture": true,
    "onmessage": true,
    "onmessageerror": true,
    "onmousedown": true,
    "onmouseenter": true,
    "onmouseleave": true,
    "onmousemove": true,
    "onmouseout": true,
    "onmouseover": true,
    "onmouseup": true,
    "onmousewheel": true,
    "onoffline": true,
    "ononline": true,
    "onpagehide": true,
    "onpagereveal": true,
    "onpageshow": true,
    "onpageswap": true,
    "onpaste": true,
    "onpause": true,
    "onplay": true,
    "onplaying": true,
    "onpointercancel": true,
    "onpointerdown": true,
    "onpointerenter": true,
    "onpointerleave": true,
    "onpointermove": true,
    "onpointerout": true,
    "onpointerover": true,
    "onpointerrawupdate": true,
    "onpointerup": true,
    "onpopstate": true,
    "onprogress": true,
    "onratechange": true,
    "onrejectionhandled": true,
    "onreset": true,
    "onresize": true,
    "onscroll": true,
    "onscrollend": true,
    "onsearch": true,
    "onsecuritypolicyviolation": true,
    "onseeked": true,
    "onseeking": true,
    "onselect": true,
    "onselectionchange": true,
    "onselectstart": true,
    "onslotchange": true,
    "onstalled": true,
    "onstorage": true,
    "onsubmit": true,
    "onsuspend": true,
    "ontimeupdate": true,
    "ontoggle": true,
    "ontransitioncancel": true,
    "ontransitionend": true,
    "ontransitionrun": true,
    "ontransitionstart": true,
    "onunhandledrejection": true,
    "onunload": true,
    "onvolumechange": true,
    "onwaiting": true,
    "onwheel": true,
    "open": false,
    "opener": false,
    "origin": false,
    "originAgentCluster": false,
    "outerHeight": false,
    "outerWidth": false,
    "pageXOffset": false,
    "pageYOffset": false,
    "parent": false,
    "performance": false,
    "personalbar": false,
    "postMessage": false,
    "print": false,
    "process": false,
    "prompt": false,
    "queryLocalFonts": false,
    "queueMicrotask": false,
    "registerProcessor": false,
    "removeEventListener": false,
    "reportError": false,
    "requestAnimationFrame": false,
    "requestIdleCallback": false,
    "require": false,
    "resizeBy": false,
    "resizeTo": false,
    "sampleRate": false,
    "scheduler": false,
    "screen": false,
    "screenLeft": false,
    "screenTop": false,
    "screenX": false,
    "screenY": false,
    "scroll": false,
    "scrollBy": false,
    "scrollTo": false,
    "scrollX": false,
    "scrollY": false,
    "scrollbars": false,
    "self": false,
    "sessionStorage": false,
    "setImmediate": false,
    "setInterval": false,
    "setTimeout": false,
    "sharedStorage": false,
    "showDirectoryPicker": false,
    "showOpenFilePicker": false,
    "showSaveFilePicker": false,
    "speechSynthesis": false,
    "status": false,
    "statusbar": false,
    "stop": false,
    "structuredClone": false,
    "styleMedia": false,
    "test": false,
    "toolbar": false,
    "top": false,
    "trustedTypes": false,
    "visualViewport": false,
    "window": false,
    "xdescribe": false,
    "xit": false,
    "xtest": false,
  },
  "parser": {
    "clearCaches": [Function],
    "createProgram": [Function],
    "meta": {
      "name": "typescript-eslint/parser",
      "version": "6.13.1",
    },
    "parse": [Function],
    "parseForESLint": [Function],
    "version": "6.13.1",
  },
  "parserOptions": {
    "ecmaFeatures": {
      "experimentalObjectRestSpread": true,
      "jsx": true,
    },
  },
  "sourceType": "module",
}
`;

exports[`eslint-config-wantedly-typescript should match snapshot for: linterOptions 1`] = `
{
  "reportUnusedDisableDirectives": 1,
}
`;

exports[`eslint-config-wantedly-typescript should match snapshot for: plugins 1`] = `
{
  "@": {
    "languages": {
      "js": {
        "columnStart": 0,
        "createSourceCode": [Function],
        "fileType": "text",
        "lineStart": 1,
        "matchesSelectorClass": [Function],
        "nodeTypeKey": "type",
        "parse": [Function],
        "validateLanguageOptions": [Function],
        "visitorKeys": {
          "ArrayExpression": [
            "elements",
          ],
          "ArrayPattern": [
            "elements",
          ],
          "ArrowFunctionExpression": [
            "params",
            "body",
          ],
          "AssignmentExpression": [
            "left",
            "right",
          ],
          "AssignmentPattern": [
            "left",
            "right",
          ],
          "AwaitExpression": [
            "argument",
          ],
          "BinaryExpression": [
            "left",
            "right",
          ],
          "BlockStatement": [
            "body",
          ],
          "BreakStatement": [
            "label",
          ],
          "CallExpression": [
            "callee",
            "arguments",
          ],
          "CatchClause": [
            "param",
            "body",
          ],
          "ChainExpression": [
            "expression",
          ],
          "ClassBody": [
            "body",
          ],
          "ClassDeclaration": [
            "id",
            "superClass",
            "body",
          ],
          "ClassExpression": [
            "id",
            "superClass",
            "body",
          ],
          "ConditionalExpression": [
            "test",
            "consequent",
            "alternate",
          ],
          "ContinueStatement": [
            "label",
          ],
          "DebuggerStatement": [],
          "DoWhileStatement": [
            "body",
            "test",
          ],
          "EmptyStatement": [],
          "ExperimentalRestProperty": [
            "argument",
          ],
          "ExperimentalSpreadProperty": [
            "argument",
          ],
          "ExportAllDeclaration": [
            "exported",
            "source",
          ],
          "ExportDefaultDeclaration": [
            "declaration",
          ],
          "ExportNamedDeclaration": [
            "declaration",
            "specifiers",
            "source",
          ],
          "ExportSpecifier": [
            "exported",
            "local",
          ],
          "ExpressionStatement": [
            "expression",
          ],
          "ForInStatement": [
            "left",
            "right",
            "body",
          ],
          "ForOfStatement": [
            "left",
            "right",
            "body",
          ],
          "ForStatement": [
            "init",
            "test",
            "update",
            "body",
          ],
          "FunctionDeclaration": [
            "id",
            "params",
            "body",
          ],
          "FunctionExpression": [
            "id",
            "params",
            "body",
          ],
          "Identifier": [],
          "IfStatement": [
            "test",
            "consequent",
            "alternate",
          ],
          "ImportDeclaration": [
            "specifiers",
            "source",
          ],
          "ImportDefaultSpecifier": [
            "local",
          ],
          "ImportExpression": [
            "source",
          ],
          "ImportNamespaceSpecifier": [
            "local",
          ],
          "ImportSpecifier": [
            "imported",
            "local",
          ],
          "JSXAttribute": [
            "name",
            "value",
          ],
          "JSXClosingElement": [
            "name",
          ],
          "JSXClosingFragment": [],
          "JSXElement": [
            "openingElement",
            "children",
            "closingElement",
          ],
          "JSXEmptyExpression": [],
          "JSXExpressionContainer": [
            "expression",
          ],
          "JSXFragment": [
            "openingFragment",
            "children",
            "closingFragment",
          ],
          "JSXIdentifier": [],
          "JSXMemberExpression": [
            "object",
            "property",
          ],
          "JSXNamespacedName": [
            "namespace",
            "name",
          ],
          "JSXOpeningElement": [
            "name",
            "attributes",
          ],
          "JSXOpeningFragment": [],
          "JSXSpreadAttribute": [
            "argument",
          ],
          "JSXSpreadChild": [
            "expression",
          ],
          "JSXText": [],
          "LabeledStatement": [
            "label",
            "body",
          ],
          "Literal": [],
          "LogicalExpression": [
            "left",
            "right",
          ],
          "MemberExpression": [
            "object",
            "property",
          ],
          "MetaProperty": [
            "meta",
            "property",
          ],
          "MethodDefinition": [
            "key",
            "value",
          ],
          "NewExpression": [
            "callee",
            "arguments",
          ],
          "ObjectExpression": [
            "properties",
          ],
          "ObjectPattern": [
            "properties",
          ],
          "PrivateIdentifier": [],
          "Program": [
            "body",
          ],
          "Property": [
            "key",
            "value",
          ],
          "PropertyDefinition": [
            "key",
            "value",
          ],
          "RestElement": [
            "argument",
          ],
          "ReturnStatement": [
            "argument",
          ],
          "SequenceExpression": [
            "expressions",
          ],
          "SpreadElement": [
            "argument",
          ],
          "StaticBlock": [
            "body",
          ],
          "Super": [],
          "SwitchCase": [
            "test",
            "consequent",
          ],
          "SwitchStatement": [
            "discriminant",
            "cases",
          ],
          "TaggedTemplateExpression": [
            "tag",
            "quasi",
          ],
          "TemplateElement": [],
          "TemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "ThisExpression": [],
          "ThrowStatement": [
            "argument",
          ],
          "TryStatement": [
            "block",
            "handler",
            "finalizer",
          ],
          "UnaryExpression": [
            "argument",
          ],
          "UpdateExpression": [
            "argument",
          ],
          "VariableDeclaration": [
            "declarations",
          ],
          "VariableDeclarator": [
            "id",
            "init",
          ],
          "WhileStatement": [
            "test",
            "body",
          ],
          "WithStatement": [
            "object",
            "body",
          ],
          "YieldExpression": [
            "argument",
          ],
        },
      },
    },
    "rules": {},
  },
  "@typescript-eslint": {
    "configs": {
      "all": {
        "extends": [
          "./configs/base",
          "./configs/eslint-recommended",
        ],
        "rules": {
          "@typescript-eslint/adjacent-overload-signatures": "error",
          "@typescript-eslint/array-type": "error",
          "@typescript-eslint/await-thenable": "error",
          "@typescript-eslint/ban-ts-comment": "error",
          "@typescript-eslint/ban-tslint-comment": "error",
          "@typescript-eslint/ban-types": "error",
          "@typescript-eslint/block-spacing": "error",
          "@typescript-eslint/brace-style": "error",
          "@typescript-eslint/class-literal-property-style": "error",
          "@typescript-eslint/class-methods-use-this": "error",
          "@typescript-eslint/comma-dangle": "error",
          "@typescript-eslint/comma-spacing": "error",
          "@typescript-eslint/consistent-generic-constructors": "error",
          "@typescript-eslint/consistent-indexed-object-style": "error",
          "@typescript-eslint/consistent-type-assertions": "error",
          "@typescript-eslint/consistent-type-definitions": "error",
          "@typescript-eslint/consistent-type-exports": "error",
          "@typescript-eslint/consistent-type-imports": "error",
          "@typescript-eslint/default-param-last": "error",
          "@typescript-eslint/dot-notation": "error",
          "@typescript-eslint/explicit-function-return-type": "error",
          "@typescript-eslint/explicit-member-accessibility": "error",
          "@typescript-eslint/explicit-module-boundary-types": "error",
          "@typescript-eslint/func-call-spacing": "error",
          "@typescript-eslint/indent": "error",
          "@typescript-eslint/init-declarations": "error",
          "@typescript-eslint/key-spacing": "error",
          "@typescript-eslint/keyword-spacing": "error",
          "@typescript-eslint/lines-around-comment": "error",
          "@typescript-eslint/lines-between-class-members": "error",
          "@typescript-eslint/max-params": "error",
          "@typescript-eslint/member-delimiter-style": "error",
          "@typescript-eslint/member-ordering": "error",
          "@typescript-eslint/method-signature-style": "error",
          "@typescript-eslint/naming-convention": "error",
          "@typescript-eslint/no-array-constructor": "error",
          "@typescript-eslint/no-base-to-string": "error",
          "@typescript-eslint/no-confusing-non-null-assertion": "error",
          "@typescript-eslint/no-confusing-void-expression": "error",
          "@typescript-eslint/no-dupe-class-members": "error",
          "@typescript-eslint/no-duplicate-enum-values": "error",
          "@typescript-eslint/no-duplicate-type-constituents": "error",
          "@typescript-eslint/no-dynamic-delete": "error",
          "@typescript-eslint/no-empty-function": "error",
          "@typescript-eslint/no-empty-interface": "error",
          "@typescript-eslint/no-explicit-any": "error",
          "@typescript-eslint/no-extra-non-null-assertion": "error",
          "@typescript-eslint/no-extra-parens": "error",
          "@typescript-eslint/no-extra-semi": "error",
          "@typescript-eslint/no-extraneous-class": "error",
          "@typescript-eslint/no-floating-promises": "error",
          "@typescript-eslint/no-for-in-array": "error",
          "@typescript-eslint/no-implied-eval": "error",
          "@typescript-eslint/no-import-type-side-effects": "error",
          "@typescript-eslint/no-inferrable-types": "error",
          "@typescript-eslint/no-invalid-this": "error",
          "@typescript-eslint/no-invalid-void-type": "error",
          "@typescript-eslint/no-loop-func": "error",
          "@typescript-eslint/no-loss-of-precision": "error",
          "@typescript-eslint/no-magic-numbers": "error",
          "@typescript-eslint/no-meaningless-void-operator": "error",
          "@typescript-eslint/no-misused-new": "error",
          "@typescript-eslint/no-misused-promises": "error",
          "@typescript-eslint/no-mixed-enums": "error",
          "@typescript-eslint/no-namespace": "error",
          "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
          "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
          "@typescript-eslint/no-non-null-assertion": "error",
          "@typescript-eslint/no-redeclare": "error",
          "@typescript-eslint/no-redundant-type-constituents": "error",
          "@typescript-eslint/no-require-imports": "error",
          "@typescript-eslint/no-restricted-imports": "error",
          "@typescript-eslint/no-shadow": "error",
          "@typescript-eslint/no-this-alias": "error",
          "@typescript-eslint/no-throw-literal": "error",
          "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
          "@typescript-eslint/no-unnecessary-condition": "error",
          "@typescript-eslint/no-unnecessary-qualifier": "error",
          "@typescript-eslint/no-unnecessary-type-arguments": "error",
          "@typescript-eslint/no-unnecessary-type-assertion": "error",
          "@typescript-eslint/no-unnecessary-type-constraint": "error",
          "@typescript-eslint/no-unsafe-argument": "error",
          "@typescript-eslint/no-unsafe-assignment": "error",
          "@typescript-eslint/no-unsafe-call": "error",
          "@typescript-eslint/no-unsafe-declaration-merging": "error",
          "@typescript-eslint/no-unsafe-enum-comparison": "error",
          "@typescript-eslint/no-unsafe-member-access": "error",
          "@typescript-eslint/no-unsafe-return": "error",
          "@typescript-eslint/no-unsafe-unary-minus": "error",
          "@typescript-eslint/no-unused-expressions": "error",
          "@typescript-eslint/no-unused-vars": "error",
          "@typescript-eslint/no-use-before-define": "error",
          "@typescript-eslint/no-useless-constructor": "error",
          "@typescript-eslint/no-useless-empty-export": "error",
          "@typescript-eslint/no-var-requires": "error",
          "@typescript-eslint/non-nullable-type-assertion-style": "error",
          "@typescript-eslint/object-curly-spacing": "error",
          "@typescript-eslint/padding-line-between-statements": "error",
          "@typescript-eslint/parameter-properties": "error",
          "@typescript-eslint/prefer-as-const": "error",
          "@typescript-eslint/prefer-destructuring": "error",
          "@typescript-eslint/prefer-enum-initializers": "error",
          "@typescript-eslint/prefer-for-of": "error",
          "@typescript-eslint/prefer-function-type": "error",
          "@typescript-eslint/prefer-includes": "error",
          "@typescript-eslint/prefer-literal-enum-member": "error",
          "@typescript-eslint/prefer-namespace-keyword": "error",
          "@typescript-eslint/prefer-nullish-coalescing": "error",
          "@typescript-eslint/prefer-optional-chain": "error",
          "@typescript-eslint/prefer-readonly": "error",
          "@typescript-eslint/prefer-readonly-parameter-types": "error",
          "@typescript-eslint/prefer-reduce-type-parameter": "error",
          "@typescript-eslint/prefer-regexp-exec": "error",
          "@typescript-eslint/prefer-return-this-type": "error",
          "@typescript-eslint/prefer-string-starts-ends-with": "error",
          "@typescript-eslint/prefer-ts-expect-error": "error",
          "@typescript-eslint/promise-function-async": "error",
          "@typescript-eslint/quotes": "error",
          "@typescript-eslint/require-array-sort-compare": "error",
          "@typescript-eslint/require-await": "error",
          "@typescript-eslint/restrict-plus-operands": "error",
          "@typescript-eslint/restrict-template-expressions": "error",
          "@typescript-eslint/return-await": "error",
          "@typescript-eslint/semi": "error",
          "@typescript-eslint/sort-type-constituents": "error",
          "@typescript-eslint/space-before-blocks": "error",
          "@typescript-eslint/space-before-function-paren": "error",
          "@typescript-eslint/space-infix-ops": "error",
          "@typescript-eslint/strict-boolean-expressions": "error",
          "@typescript-eslint/switch-exhaustiveness-check": "error",
          "@typescript-eslint/triple-slash-reference": "error",
          "@typescript-eslint/type-annotation-spacing": "error",
          "@typescript-eslint/typedef": "error",
          "@typescript-eslint/unbound-method": "error",
          "@typescript-eslint/unified-signatures": "error",
          "block-spacing": "off",
          "brace-style": "off",
          "class-methods-use-this": "off",
          "comma-dangle": "off",
          "comma-spacing": "off",
          "default-param-last": "off",
          "dot-notation": "off",
          "func-call-spacing": "off",
          "indent": "off",
          "init-declarations": "off",
          "key-spacing": "off",
          "keyword-spacing": "off",
          "lines-around-comment": "off",
          "lines-between-class-members": "off",
          "max-params": "off",
          "no-array-constructor": "off",
          "no-dupe-class-members": "off",
          "no-empty-function": "off",
          "no-extra-parens": "off",
          "no-extra-semi": "off",
          "no-implied-eval": "off",
          "no-invalid-this": "off",
          "no-loop-func": "off",
          "no-loss-of-precision": "off",
          "no-magic-numbers": "off",
          "no-redeclare": "off",
          "no-restricted-imports": "off",
          "no-return-await": "off",
          "no-shadow": "off",
          "no-throw-literal": "off",
          "no-unused-expressions": "off",
          "no-unused-vars": "off",
          "no-use-before-define": "off",
          "no-useless-constructor": "off",
          "object-curly-spacing": "off",
          "padding-line-between-statements": "off",
          "prefer-destructuring": "off",
          "quotes": "off",
          "require-await": "off",
          "semi": "off",
          "space-before-blocks": "off",
          "space-before-function-paren": "off",
          "space-infix-ops": "off",
        },
      },
      "base": {
        "parser": "@typescript-eslint/parser",
        "parserOptions": {
          "sourceType": "module",
        },
        "plugins": [
          "@typescript-eslint",
        ],
      },
      "disable-type-checked": {
        "parserOptions": {
          "program": null,
          "project": null,
        },
        "rules": {
          "@typescript-eslint/await-thenable": "off",
          "@typescript-eslint/consistent-type-exports": "off",
          "@typescript-eslint/dot-notation": "off",
          "@typescript-eslint/naming-convention": "off",
          "@typescript-eslint/no-base-to-string": "off",
          "@typescript-eslint/no-confusing-void-expression": "off",
          "@typescript-eslint/no-duplicate-type-constituents": "off",
          "@typescript-eslint/no-floating-promises": "off",
          "@typescript-eslint/no-for-in-array": "off",
          "@typescript-eslint/no-implied-eval": "off",
          "@typescript-eslint/no-meaningless-void-operator": "off",
          "@typescript-eslint/no-misused-promises": "off",
          "@typescript-eslint/no-mixed-enums": "off",
          "@typescript-eslint/no-redundant-type-constituents": "off",
          "@typescript-eslint/no-throw-literal": "off",
          "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
          "@typescript-eslint/no-unnecessary-condition": "off",
          "@typescript-eslint/no-unnecessary-qualifier": "off",
          "@typescript-eslint/no-unnecessary-type-arguments": "off",
          "@typescript-eslint/no-unnecessary-type-assertion": "off",
          "@typescript-eslint/no-unsafe-argument": "off",
          "@typescript-eslint/no-unsafe-assignment": "off",
          "@typescript-eslint/no-unsafe-call": "off",
          "@typescript-eslint/no-unsafe-enum-comparison": "off",
          "@typescript-eslint/no-unsafe-member-access": "off",
          "@typescript-eslint/no-unsafe-return": "off",
          "@typescript-eslint/non-nullable-type-assertion-style": "off",
          "@typescript-eslint/prefer-includes": "off",
          "@typescript-eslint/prefer-nullish-coalescing": "off",
          "@typescript-eslint/prefer-optional-chain": "off",
          "@typescript-eslint/prefer-readonly": "off",
          "@typescript-eslint/prefer-readonly-parameter-types": "off",
          "@typescript-eslint/prefer-reduce-type-parameter": "off",
          "@typescript-eslint/prefer-regexp-exec": "off",
          "@typescript-eslint/prefer-return-this-type": "off",
          "@typescript-eslint/prefer-string-starts-ends-with": "off",
          "@typescript-eslint/promise-function-async": "off",
          "@typescript-eslint/require-array-sort-compare": "off",
          "@typescript-eslint/require-await": "off",
          "@typescript-eslint/restrict-plus-operands": "off",
          "@typescript-eslint/restrict-template-expressions": "off",
          "@typescript-eslint/return-await": "off",
          "@typescript-eslint/strict-boolean-expressions": "off",
          "@typescript-eslint/switch-exhaustiveness-check": "off",
          "@typescript-eslint/unbound-method": "off",
        },
      },
      "eslint-recommended": {
        "overrides": [
          {
            "files": [
              "*.ts",
              "*.tsx",
              "*.mts",
              "*.cts",
            ],
            "rules": {
              "constructor-super": "off",
              "getter-return": "off",
              "no-const-assign": "off",
              "no-dupe-args": "off",
              "no-dupe-class-members": "off",
              "no-dupe-keys": "off",
              "no-func-assign": "off",
              "no-import-assign": "off",
              "no-new-symbol": "off",
              "no-obj-calls": "off",
              "no-redeclare": "off",
              "no-setter-return": "off",
              "no-this-before-super": "off",
              "no-undef": "off",
              "no-unreachable": "off",
              "no-unsafe-negation": "off",
              "no-var": "error",
              "prefer-const": "error",
              "prefer-rest-params": "error",
              "prefer-spread": "error",
            },
          },
        ],
      },
      "recommended": {
        "extends": [
          "./configs/base",
          "./configs/eslint-recommended",
        ],
        "rules": {
          "@typescript-eslint/ban-ts-comment": "error",
          "@typescript-eslint/ban-types": "error",
          "@typescript-eslint/no-array-constructor": "error",
          "@typescript-eslint/no-duplicate-enum-values": "error",
          "@typescript-eslint/no-explicit-any": "error",
          "@typescript-eslint/no-extra-non-null-assertion": "error",
          "@typescript-eslint/no-loss-of-precision": "error",
          "@typescript-eslint/no-misused-new": "error",
          "@typescript-eslint/no-namespace": "error",
          "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
          "@typescript-eslint/no-this-alias": "error",
          "@typescript-eslint/no-unnecessary-type-constraint": "error",
          "@typescript-eslint/no-unsafe-declaration-merging": "error",
          "@typescript-eslint/no-unused-vars": "error",
          "@typescript-eslint/no-var-requires": "error",
          "@typescript-eslint/prefer-as-const": "error",
          "@typescript-eslint/triple-slash-reference": "error",
          "no-array-constructor": "off",
          "no-loss-of-precision": "off",
          "no-unused-vars": "off",
        },
      },
      "recommended-requiring-type-checking": {
        "extends": [
          "./configs/base",
          "./configs/eslint-recommended",
        ],
        "rules": {
          "@typescript-eslint/await-thenable": "error",
          "@typescript-eslint/ban-ts-comment": "error",
          "@typescript-eslint/ban-types": "error",
          "@typescript-eslint/no-array-constructor": "error",
          "@typescript-eslint/no-base-to-string": "error",
          "@typescript-eslint/no-duplicate-enum-values": "error",
          "@typescript-eslint/no-duplicate-type-constituents": "error",
          "@typescript-eslint/no-explicit-any": "error",
          "@typescript-eslint/no-extra-non-null-assertion": "error",
          "@typescript-eslint/no-floating-promises": "error",
          "@typescript-eslint/no-for-in-array": "error",
          "@typescript-eslint/no-implied-eval": "error",
          "@typescript-eslint/no-loss-of-precision": "error",
          "@typescript-eslint/no-misused-new": "error",
          "@typescript-eslint/no-misused-promises": "error",
          "@typescript-eslint/no-namespace": "error",
          "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
          "@typescript-eslint/no-redundant-type-constituents": "error",
          "@typescript-eslint/no-this-alias": "error",
          "@typescript-eslint/no-unnecessary-type-assertion": "error",
          "@typescript-eslint/no-unnecessary-type-constraint": "error",
          "@typescript-eslint/no-unsafe-argument": "error",
          "@typescript-eslint/no-unsafe-assignment": "error",
          "@typescript-eslint/no-unsafe-call": "error",
          "@typescript-eslint/no-unsafe-declaration-merging": "error",
          "@typescript-eslint/no-unsafe-enum-comparison": "error",
          "@typescript-eslint/no-unsafe-member-access": "error",
          "@typescript-eslint/no-unsafe-return": "error",
          "@typescript-eslint/no-unused-vars": "error",
          "@typescript-eslint/no-var-requires": "error",
          "@typescript-eslint/prefer-as-const": "error",
          "@typescript-eslint/require-await": "error",
          "@typescript-eslint/restrict-plus-operands": "error",
          "@typescript-eslint/restrict-template-expressions": "error",
          "@typescript-eslint/triple-slash-reference": "error",
          "@typescript-eslint/unbound-method": "error",
          "no-array-constructor": "off",
          "no-implied-eval": "off",
          "no-loss-of-precision": "off",
          "no-unused-vars": "off",
          "require-await": "off",
        },
      },
      "recommended-type-checked": {
        "extends": [
          "./configs/base",
          "./configs/eslint-recommended",
        ],
        "rules": {
          "@typescript-eslint/await-thenable": "error",
          "@typescript-eslint/ban-ts-comment": "error",
          "@typescript-eslint/ban-types": "error",
          "@typescript-eslint/no-array-constructor": "error",
          "@typescript-eslint/no-base-to-string": "error",
          "@typescript-eslint/no-duplicate-enum-values": "error",
          "@typescript-eslint/no-duplicate-type-constituents": "error",
          "@typescript-eslint/no-explicit-any": "error",
          "@typescript-eslint/no-extra-non-null-assertion": "error",
          "@typescript-eslint/no-floating-promises": "error",
          "@typescript-eslint/no-for-in-array": "error",
          "@typescript-eslint/no-implied-eval": "error",
          "@typescript-eslint/no-loss-of-precision": "error",
          "@typescript-eslint/no-misused-new": "error",
          "@typescript-eslint/no-misused-promises": "error",
          "@typescript-eslint/no-namespace": "error",
          "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
          "@typescript-eslint/no-redundant-type-constituents": "error",
          "@typescript-eslint/no-this-alias": "error",
          "@typescript-eslint/no-unnecessary-type-assertion": "error",
          "@typescript-eslint/no-unnecessary-type-constraint": "error",
          "@typescript-eslint/no-unsafe-argument": "error",
          "@typescript-eslint/no-unsafe-assignment": "error",
          "@typescript-eslint/no-unsafe-call": "error",
          "@typescript-eslint/no-unsafe-declaration-merging": "error",
          "@typescript-eslint/no-unsafe-enum-comparison": "error",
          "@typescript-eslint/no-unsafe-member-access": "error",
          "@typescript-eslint/no-unsafe-return": "error",
          "@typescript-eslint/no-unused-vars": "error",
          "@typescript-eslint/no-var-requires": "error",
          "@typescript-eslint/prefer-as-const": "error",
          "@typescript-eslint/require-await": "error",
          "@typescript-eslint/restrict-plus-operands": "error",
          "@typescript-eslint/restrict-template-expressions": "error",
          "@typescript-eslint/triple-slash-reference": "error",
          "@typescript-eslint/unbound-method": "error",
          "no-array-constructor": "off",
          "no-implied-eval": "off",
          "no-loss-of-precision": "off",
          "no-unused-vars": "off",
          "require-await": "off",
        },
      },
      "strict": {
        "extends": [
          "./configs/base",
          "./configs/eslint-recommended",
        ],
        "rules": {
          "@typescript-eslint/ban-ts-comment": "error",
          "@typescript-eslint/ban-types": "error",
          "@typescript-eslint/no-array-constructor": "error",
          "@typescript-eslint/no-duplicate-enum-values": "error",
          "@typescript-eslint/no-dynamic-delete": "error",
          "@typescript-eslint/no-explicit-any": "error",
          "@typescript-eslint/no-extra-non-null-assertion": "error",
          "@typescript-eslint/no-extraneous-class": "error",
          "@typescript-eslint/no-invalid-void-type": "error",
          "@typescript-eslint/no-loss-of-precision": "error",
          "@typescript-eslint/no-misused-new": "error",
          "@typescript-eslint/no-namespace": "error",
          "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
          "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
          "@typescript-eslint/no-non-null-assertion": "error",
          "@typescript-eslint/no-this-alias": "error",
          "@typescript-eslint/no-unnecessary-type-constraint": "error",
          "@typescript-eslint/no-unsafe-declaration-merging": "error",
          "@typescript-eslint/no-unused-vars": "error",
          "@typescript-eslint/no-useless-constructor": "error",
          "@typescript-eslint/no-var-requires": "error",
          "@typescript-eslint/prefer-as-const": "error",
          "@typescript-eslint/prefer-literal-enum-member": "error",
          "@typescript-eslint/prefer-ts-expect-error": "error",
          "@typescript-eslint/triple-slash-reference": "error",
          "@typescript-eslint/unified-signatures": "error",
          "no-array-constructor": "off",
          "no-loss-of-precision": "off",
          "no-unused-vars": "off",
          "no-useless-constructor": "off",
        },
      },
      "strict-type-checked": {
        "extends": [
          "./configs/base",
          "./configs/eslint-recommended",
        ],
        "rules": {
          "@typescript-eslint/await-thenable": "error",
          "@typescript-eslint/ban-ts-comment": "error",
          "@typescript-eslint/ban-types": "error",
          "@typescript-eslint/no-array-constructor": "error",
          "@typescript-eslint/no-base-to-string": "error",
          "@typescript-eslint/no-confusing-void-expression": "error",
          "@typescript-eslint/no-duplicate-enum-values": "error",
          "@typescript-eslint/no-duplicate-type-constituents": "error",
          "@typescript-eslint/no-dynamic-delete": "error",
          "@typescript-eslint/no-explicit-any": "error",
          "@typescript-eslint/no-extra-non-null-assertion": "error",
          "@typescript-eslint/no-extraneous-class": "error",
          "@typescript-eslint/no-floating-promises": "error",
          "@typescript-eslint/no-for-in-array": "error",
          "@typescript-eslint/no-implied-eval": "error",
          "@typescript-eslint/no-invalid-void-type": "error",
          "@typescript-eslint/no-loss-of-precision": "error",
          "@typescript-eslint/no-meaningless-void-operator": "error",
          "@typescript-eslint/no-misused-new": "error",
          "@typescript-eslint/no-misused-promises": "error",
          "@typescript-eslint/no-mixed-enums": "error",
          "@typescript-eslint/no-namespace": "error",
          "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
          "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
          "@typescript-eslint/no-non-null-assertion": "error",
          "@typescript-eslint/no-redundant-type-constituents": "error",
          "@typescript-eslint/no-this-alias": "error",
          "@typescript-eslint/no-throw-literal": "error",
          "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
          "@typescript-eslint/no-unnecessary-condition": "error",
          "@typescript-eslint/no-unnecessary-type-arguments": "error",
          "@typescript-eslint/no-unnecessary-type-assertion": "error",
          "@typescript-eslint/no-unnecessary-type-constraint": "error",
          "@typescript-eslint/no-unsafe-argument": "error",
          "@typescript-eslint/no-unsafe-assignment": "error",
          "@typescript-eslint/no-unsafe-call": "error",
          "@typescript-eslint/no-unsafe-declaration-merging": "error",
          "@typescript-eslint/no-unsafe-enum-comparison": "error",
          "@typescript-eslint/no-unsafe-member-access": "error",
          "@typescript-eslint/no-unsafe-return": "error",
          "@typescript-eslint/no-unused-vars": "error",
          "@typescript-eslint/no-useless-constructor": "error",
          "@typescript-eslint/no-var-requires": "error",
          "@typescript-eslint/prefer-as-const": "error",
          "@typescript-eslint/prefer-includes": "error",
          "@typescript-eslint/prefer-literal-enum-member": "error",
          "@typescript-eslint/prefer-reduce-type-parameter": "error",
          "@typescript-eslint/prefer-return-this-type": "error",
          "@typescript-eslint/prefer-ts-expect-error": "error",
          "@typescript-eslint/require-await": "error",
          "@typescript-eslint/restrict-plus-operands": "error",
          "@typescript-eslint/restrict-template-expressions": "error",
          "@typescript-eslint/triple-slash-reference": "error",
          "@typescript-eslint/unbound-method": "error",
          "@typescript-eslint/unified-signatures": "error",
          "no-array-constructor": "off",
          "no-implied-eval": "off",
          "no-loss-of-precision": "off",
          "no-throw-literal": "off",
          "no-unused-vars": "off",
          "no-useless-constructor": "off",
          "require-await": "off",
        },
      },
      "stylistic": {
        "extends": [
          "./configs/base",
          "./configs/eslint-recommended",
        ],
        "rules": {
          "@typescript-eslint/adjacent-overload-signatures": "error",
          "@typescript-eslint/array-type": "error",
          "@typescript-eslint/ban-tslint-comment": "error",
          "@typescript-eslint/class-literal-property-style": "error",
          "@typescript-eslint/consistent-generic-constructors": "error",
          "@typescript-eslint/consistent-indexed-object-style": "error",
          "@typescript-eslint/consistent-type-assertions": "error",
          "@typescript-eslint/consistent-type-definitions": "error",
          "@typescript-eslint/no-confusing-non-null-assertion": "error",
          "@typescript-eslint/no-empty-function": "error",
          "@typescript-eslint/no-empty-interface": "error",
          "@typescript-eslint/no-inferrable-types": "error",
          "@typescript-eslint/prefer-for-of": "error",
          "@typescript-eslint/prefer-function-type": "error",
          "@typescript-eslint/prefer-namespace-keyword": "error",
          "no-empty-function": "off",
        },
      },
      "stylistic-type-checked": {
        "extends": [
          "./configs/base",
          "./configs/eslint-recommended",
        ],
        "rules": {
          "@typescript-eslint/adjacent-overload-signatures": "error",
          "@typescript-eslint/array-type": "error",
          "@typescript-eslint/ban-tslint-comment": "error",
          "@typescript-eslint/class-literal-property-style": "error",
          "@typescript-eslint/consistent-generic-constructors": "error",
          "@typescript-eslint/consistent-indexed-object-style": "error",
          "@typescript-eslint/consistent-type-assertions": "error",
          "@typescript-eslint/consistent-type-definitions": "error",
          "@typescript-eslint/dot-notation": "error",
          "@typescript-eslint/no-confusing-non-null-assertion": "error",
          "@typescript-eslint/no-empty-function": "error",
          "@typescript-eslint/no-empty-interface": "error",
          "@typescript-eslint/no-inferrable-types": "error",
          "@typescript-eslint/non-nullable-type-assertion-style": "error",
          "@typescript-eslint/prefer-for-of": "error",
          "@typescript-eslint/prefer-function-type": "error",
          "@typescript-eslint/prefer-namespace-keyword": "error",
          "@typescript-eslint/prefer-nullish-coalescing": "error",
          "@typescript-eslint/prefer-optional-chain": "error",
          "@typescript-eslint/prefer-string-starts-ends-with": "error",
          "dot-notation": "off",
          "no-empty-function": "off",
        },
      },
    },
    "rules": {
      "adjacent-overload-signatures": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Require that function overload signatures be consecutive",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures",
          },
          "messages": {
            "adjacentSignature": "All {{name}} signatures should be adjacent.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "array-type": {
        "create": [Function],
        "defaultOptions": [
          {
            "default": "array",
          },
        ],
        "meta": {
          "docs": {
            "description": "Require consistently using either \`T[]\` or \`Array<T>\` for arrays",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/array-type",
          },
          "fixable": "code",
          "messages": {
            "errorStringArray": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.",
            "errorStringArraySimple": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.",
            "errorStringGeneric": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.",
            "errorStringGenericSimple": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead.",
          },
          "schema": [
            {
              "$defs": {
                "arrayOption": {
                  "enum": [
                    "array",
                    "generic",
                    "array-simple",
                  ],
                  "type": "string",
                },
              },
              "additionalProperties": false,
              "properties": {
                "default": {
                  "$ref": "#/items/0/$defs/arrayOption",
                  "description": "The array type expected for mutable cases.",
                },
                "readonly": {
                  "$ref": "#/items/0/$defs/arrayOption",
                  "description": "The array type expected for readonly cases. If omitted, the value for \`default\` will be used.",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "await-thenable": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow awaiting a value that is not a Thenable",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/await-thenable",
          },
          "hasSuggestions": true,
          "messages": {
            "await": "Unexpected \`await\` of a non-Promise (non-"Thenable") value.",
            "removeAwait": "Remove unnecessary \`await\`.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "ban-ts-comment": {
        "create": [Function],
        "defaultOptions": [
          {
            "minimumDescriptionLength": 3,
            "ts-check": false,
            "ts-expect-error": "allow-with-description",
            "ts-ignore": true,
            "ts-nocheck": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow \`@ts-<directive>\` comments or require descriptions after directives",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/ban-ts-comment",
          },
          "hasSuggestions": true,
          "messages": {
            "replaceTsIgnoreWithTsExpectError": "Replace "@ts-ignore" with "@ts-expect-error".",
            "tsDirectiveComment": "Do not use "@ts-{{directive}}" because it alters compilation errors.",
            "tsDirectiveCommentDescriptionNotMatchPattern": "The description for the "@ts-{{directive}}" directive must match the {{format}} format.",
            "tsDirectiveCommentRequiresDescription": "Include a description after the "@ts-{{directive}}" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.",
            "tsIgnoreInsteadOfExpectError": "Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.",
          },
          "schema": [
            {
              "$defs": {
                "directiveConfigSchema": {
                  "oneOf": [
                    {
                      "default": true,
                      "type": "boolean",
                    },
                    {
                      "enum": [
                        "allow-with-description",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "descriptionFormat": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "additionalProperties": false,
              "properties": {
                "minimumDescriptionLength": {
                  "default": 3,
                  "type": "number",
                },
                "ts-check": {
                  "$ref": "#/items/0/$defs/directiveConfigSchema",
                },
                "ts-expect-error": {
                  "$ref": "#/items/0/$defs/directiveConfigSchema",
                },
                "ts-ignore": {
                  "$ref": "#/items/0/$defs/directiveConfigSchema",
                },
                "ts-nocheck": {
                  "$ref": "#/items/0/$defs/directiveConfigSchema",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "ban-tslint-comment": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow \`// tslint:<rule-flag>\` comments",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/ban-tslint-comment",
          },
          "fixable": "code",
          "messages": {
            "commentDetected": "tslint comment detected: "{{ text }}"",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "ban-types": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "description": "Disallow certain types",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/ban-types",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "bannedTypeMessage": "Don't use \`{{name}}\` as a type.{{customMessage}}",
            "bannedTypeReplacement": "Replace \`{{name}}\` with \`{{replacement}}\`.",
          },
          "schema": [
            {
              "$defs": {
                "banConfig": {
                  "oneOf": [
                    {
                      "description": "Bans the type with the default message",
                      "type": "null",
                    },
                    {
                      "description": "Un-bans the type (useful when paired with \`extendDefaults\`)",
                      "enum": [
                        false,
                      ],
                      "type": "boolean",
                    },
                    {
                      "description": "Bans the type with the default message",
                      "enum": [
                        true,
                      ],
                      "type": "boolean",
                    },
                    {
                      "description": "Bans the type with a custom message",
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Bans a type",
                      "properties": {
                        "fixWith": {
                          "description": "Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option.",
                          "type": "string",
                        },
                        "message": {
                          "description": "Custom error message",
                          "type": "string",
                        },
                        "suggest": {
                          "additionalItems": false,
                          "description": "Types to suggest replacing with.",
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "additionalProperties": false,
              "properties": {
                "extendDefaults": {
                  "type": "boolean",
                },
                "types": {
                  "additionalProperties": {
                    "$ref": "#/items/0/$defs/banConfig",
                  },
                  "type": "object",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "block-spacing": {
        "create": [Function],
        "defaultOptions": [
          "always",
        ],
        "meta": {
          "docs": {
            "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/block-spacing",
          },
          "fixable": "whitespace",
          "hasSuggestions": undefined,
          "messages": {
            "extra": "Unexpected space(s) {{location}} '{{token}}'.",
            "missing": "Requires a space {{location}} '{{token}}'.",
          },
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
            },
          ],
          "type": "layout",
        },
      },
      "brace-style": {
        "create": [Function],
        "defaultOptions": [
          "1tbs",
        ],
        "meta": {
          "docs": {
            "description": "Enforce consistent brace style for blocks",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/brace-style",
          },
          "fixable": "whitespace",
          "hasSuggestions": undefined,
          "messages": {
            "blockSameLine": "Statement inside of curly braces should be on next line.",
            "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
            "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
            "sameLineClose": "Closing curly brace appears on the same line as the subsequent block.",
            "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
            "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
          },
          "schema": [
            {
              "enum": [
                "1tbs",
                "stroustrup",
                "allman",
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "allowSingleLine": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "layout",
        },
      },
      "class-literal-property-style": {
        "create": [Function],
        "defaultOptions": [
          "fields",
        ],
        "meta": {
          "docs": {
            "description": "Enforce that literals on classes are exposed in a consistent style",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/class-literal-property-style",
          },
          "hasSuggestions": true,
          "messages": {
            "preferFieldStyle": "Literals should be exposed using readonly fields.",
            "preferFieldStyleSuggestion": "Replace the literals with readonly fields.",
            "preferGetterStyle": "Literals should be exposed using getters.",
            "preferGetterStyleSuggestion": "Replace the literals with getters.",
          },
          "schema": [
            {
              "enum": [
                "fields",
                "getters",
              ],
              "type": "string",
            },
          ],
          "type": "problem",
        },
      },
      "class-methods-use-this": {
        "create": [Function],
        "defaultOptions": [
          {
            "enforceForClassFields": true,
            "exceptMethods": [],
            "ignoreClassesThatImplementAnInterface": false,
            "ignoreOverrideMethods": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce that class methods utilize \`this\`",
            "extendsBaseRule": true,
            "requiresTypeChecking": false,
            "url": "https://typescript-eslint.io/rules/class-methods-use-this",
          },
          "fixable": "code",
          "hasSuggestions": false,
          "messages": {
            "missingThis": "Expected 'this' to be used by class {{name}}.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "enforceForClassFields": {
                  "default": true,
                  "description": "Enforces that functions used as instance field initializers utilize \`this\`",
                  "type": "boolean",
                },
                "exceptMethods": {
                  "description": "Allows specified method names to be ignored with this rule",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "ignoreClassesThatImplementAnInterface": {
                  "description": "Ignore classes that specifically implement some interface",
                  "oneOf": [
                    {
                      "description": "Ignore all classes that implement an interface",
                      "type": "boolean",
                    },
                    {
                      "description": "Ignore only the public fields of classes that implement an interface",
                      "enum": [
                        "public-fields",
                      ],
                      "type": "string",
                    },
                  ],
                },
                "ignoreOverrideMethods": {
                  "description": "Ingore members marked with the \`override\` modifier",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "comma-dangle": {
        "create": [Function],
        "defaultOptions": [
          "never",
        ],
        "meta": {
          "docs": {
            "description": "Require or disallow trailing commas",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/comma-dangle",
          },
          "fixable": "code",
          "hasSuggestions": undefined,
          "messages": {
            "missing": "Missing trailing comma.",
            "unexpected": "Unexpected trailing comma.",
          },
          "schema": {
            "$defs": {
              "value": {
                "enum": [
                  "always-multiline",
                  "always",
                  "never",
                  "only-multiline",
                ],
                "type": "string",
              },
              "valueWithIgnore": {
                "enum": [
                  "always-multiline",
                  "always",
                  "never",
                  "only-multiline",
                  "ignore",
                ],
                "type": "string",
              },
            },
            "additionalItems": false,
            "items": [
              {
                "oneOf": [
                  {
                    "$ref": "#/$defs/value",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arrays": {
                        "$ref": "#/$defs/valueWithIgnore",
                      },
                      "enums": {
                        "$ref": "#/$defs/valueWithIgnore",
                      },
                      "exports": {
                        "$ref": "#/$defs/valueWithIgnore",
                      },
                      "functions": {
                        "$ref": "#/$defs/valueWithIgnore",
                      },
                      "generics": {
                        "$ref": "#/$defs/valueWithIgnore",
                      },
                      "imports": {
                        "$ref": "#/$defs/valueWithIgnore",
                      },
                      "objects": {
                        "$ref": "#/$defs/valueWithIgnore",
                      },
                      "tuples": {
                        "$ref": "#/$defs/valueWithIgnore",
                      },
                    },
                    "type": "object",
                  },
                ],
              },
            ],
            "type": "array",
          },
          "type": "layout",
        },
      },
      "comma-spacing": {
        "create": [Function],
        "defaultOptions": [
          {
            "after": true,
            "before": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce consistent spacing before and after commas",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/comma-spacing",
          },
          "fixable": "whitespace",
          "messages": {
            "missing": "A space is required {{loc}} ','.",
            "unexpected": "There should be no space {{loc}} ','.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "after": {
                  "default": true,
                  "type": "boolean",
                },
                "before": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "layout",
        },
      },
      "consistent-generic-constructors": {
        "create": [Function],
        "defaultOptions": [
          "constructor",
        ],
        "meta": {
          "docs": {
            "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/consistent-generic-constructors",
          },
          "fixable": "code",
          "messages": {
            "preferConstructor": "The generic type arguments should be specified as part of the constructor type arguments.",
            "preferTypeAnnotation": "The generic type arguments should be specified as part of the type annotation.",
          },
          "schema": [
            {
              "enum": [
                "type-annotation",
                "constructor",
              ],
              "type": "string",
            },
          ],
          "type": "suggestion",
        },
      },
      "consistent-indexed-object-style": {
        "create": [Function],
        "defaultOptions": [
          "record",
        ],
        "meta": {
          "docs": {
            "description": "Require or disallow the \`Record\` type",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style",
          },
          "fixable": "code",
          "messages": {
            "preferIndexSignature": "An index signature is preferred over a record.",
            "preferRecord": "A record is preferred over an index signature.",
          },
          "schema": [
            {
              "enum": [
                "record",
                "index-signature",
              ],
              "type": "string",
            },
          ],
          "type": "suggestion",
        },
      },
      "consistent-type-assertions": {
        "create": [Function],
        "defaultOptions": [
          {
            "assertionStyle": "as",
            "objectLiteralTypeAssertions": "allow",
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce consistent usage of type assertions",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/consistent-type-assertions",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
            "as": "Use 'as {{cast}}' instead of '<{{cast}}>'.",
            "never": "Do not use any type assertions.",
            "replaceObjectTypeAssertionWithAnnotation": "Use const x: {{cast}} = { ... } instead.",
            "replaceObjectTypeAssertionWithSatisfies": "Use const x = { ... } satisfies {{cast}} instead.",
            "unexpectedObjectTypeAssertion": "Always prefer const x: T = { ... }.",
          },
          "schema": [
            {
              "oneOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "assertionStyle": {
                      "enum": [
                        "never",
                      ],
                      "type": "string",
                    },
                  },
                  "required": [
                    "assertionStyle",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "assertionStyle": {
                      "enum": [
                        "as",
                        "angle-bracket",
                      ],
                      "type": "string",
                    },
                    "objectLiteralTypeAssertions": {
                      "enum": [
                        "allow",
                        "allow-as-parameter",
                        "never",
                      ],
                      "type": "string",
                    },
                  },
                  "required": [
                    "assertionStyle",
                  ],
                  "type": "object",
                },
              ],
            },
          ],
          "type": "suggestion",
        },
      },
      "consistent-type-definitions": {
        "create": [Function],
        "defaultOptions": [
          "interface",
        ],
        "meta": {
          "docs": {
            "description": "Enforce type definitions to consistently use either \`interface\` or \`type\`",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/consistent-type-definitions",
          },
          "fixable": "code",
          "messages": {
            "interfaceOverType": "Use an \`interface\` instead of a \`type\`.",
            "typeOverInterface": "Use a \`type\` instead of an \`interface\`.",
          },
          "schema": [
            {
              "enum": [
                "interface",
                "type",
              ],
              "type": "string",
            },
          ],
          "type": "suggestion",
        },
      },
      "consistent-type-exports": {
        "create": [Function],
        "defaultOptions": [
          {
            "fixMixedExportsWithInlineTypeSpecifier": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce consistent usage of type exports",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/consistent-type-exports",
          },
          "fixable": "code",
          "messages": {
            "multipleExportsAreTypes": "Type exports {{exportNames}} are not values and should be exported using \`export type\`.",
            "singleExportIsType": "Type export {{exportNames}} is not a value and should be exported using \`export type\`.",
            "typeOverValue": "All exports in the declaration are only used as types. Use \`export type\`.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "fixMixedExportsWithInlineTypeSpecifier": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "consistent-type-imports": {
        "create": [Function],
        "defaultOptions": [
          {
            "disallowTypeAnnotations": true,
            "fixStyle": "separate-type-imports",
            "prefer": "type-imports",
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce consistent usage of type imports",
            "url": "https://typescript-eslint.io/rules/consistent-type-imports",
          },
          "fixable": "code",
          "messages": {
            "aImportInDecoMeta": "Type import {{typeImports}} is used by decorator metadata.",
            "aImportIsOnlyTypes": "Import {{typeImports}} is only used as types.",
            "noImportTypeAnnotations": "\`import()\` type annotations are forbidden.",
            "someImportsAreOnlyTypes": "Imports {{typeImports}} are only used as types.",
            "someImportsInDecoMeta": "Type imports {{typeImports}} are used by decorator metadata.",
            "typeOverValue": "All imports in the declaration are only used as types. Use \`import type\`.",
            "valueOverType": "Use an \`import\` instead of an \`import type\`.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "disallowTypeAnnotations": {
                  "type": "boolean",
                },
                "fixStyle": {
                  "enum": [
                    "separate-type-imports",
                    "inline-type-imports",
                  ],
                  "type": "string",
                },
                "prefer": {
                  "enum": [
                    "type-imports",
                    "no-type-imports",
                  ],
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "default-param-last": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce default parameters to be last",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/default-param-last",
          },
          "messages": {
            "shouldBeLast": "Default parameters should be last.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "dot-notation": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowIndexSignaturePropertyAccess": false,
            "allowKeywords": true,
            "allowPattern": "",
            "allowPrivateClassPropertyAccess": false,
            "allowProtectedClassPropertyAccess": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce dot notation whenever possible",
            "extendsBaseRule": true,
            "recommended": "stylistic",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/dot-notation",
          },
          "fixable": "code",
          "hasSuggestions": undefined,
          "messages": {
            "useBrackets": ".{{key}} is a syntax error.",
            "useDot": "[{{key}}] is better written in dot notation.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowIndexSignaturePropertyAccess": {
                  "default": false,
                  "type": "boolean",
                },
                "allowKeywords": {
                  "default": true,
                  "type": "boolean",
                },
                "allowPattern": {
                  "default": "",
                  "type": "string",
                },
                "allowPrivateClassPropertyAccess": {
                  "default": false,
                  "type": "boolean",
                },
                "allowProtectedClassPropertyAccess": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "explicit-function-return-type": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
            "allowDirectConstAssertionInArrowFunctions": true,
            "allowExpressions": false,
            "allowFunctionsWithoutTypeParameters": false,
            "allowHigherOrderFunctions": true,
            "allowIIFEs": false,
            "allowTypedFunctionExpressions": true,
            "allowedNames": [],
          },
        ],
        "meta": {
          "docs": {
            "description": "Require explicit return types on functions and class methods",
            "url": "https://typescript-eslint.io/rules/explicit-function-return-type",
          },
          "messages": {
            "missingReturnType": "Missing return type on function.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                  "description": "Whether to allow arrow functions that start with the \`void\` keyword.",
                  "type": "boolean",
                },
                "allowDirectConstAssertionInArrowFunctions": {
                  "description": "Whether to ignore arrow functions immediately returning a \`as const\` value.",
                  "type": "boolean",
                },
                "allowExpressions": {
                  "description": "Whether to ignore function expressions (functions which are not part of a declaration).",
                  "type": "boolean",
                },
                "allowFunctionsWithoutTypeParameters": {
                  "description": "Whether to ignore functions that don't have generic type parameters.",
                  "type": "boolean",
                },
                "allowHigherOrderFunctions": {
                  "description": "Whether to ignore functions immediately returning another function expression.",
                  "type": "boolean",
                },
                "allowIIFEs": {
                  "description": "Whether to ignore immediately invoked function expressions (IIFEs).",
                  "type": "boolean",
                },
                "allowTypedFunctionExpressions": {
                  "description": "Whether to ignore type annotations on the variable of function expressions.",
                  "type": "boolean",
                },
                "allowedNames": {
                  "description": "An array of function/method names that will not have their arguments or return values checked.",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "explicit-member-accessibility": {
        "create": [Function],
        "defaultOptions": [
          {
            "accessibility": "explicit",
          },
        ],
        "meta": {
          "docs": {
            "description": "Require explicit accessibility modifiers on class properties and methods",
            "url": "https://typescript-eslint.io/rules/explicit-member-accessibility",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "addExplicitAccessibility": "Add '{{ type }}' accessibility modifier",
            "missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
            "unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}.",
          },
          "schema": [
            {
              "$defs": {
                "accessibilityLevel": {
                  "oneOf": [
                    {
                      "description": "Always require an accessor.",
                      "enum": [
                        "explicit",
                      ],
                      "type": "string",
                    },
                    {
                      "description": "Require an accessor except when public.",
                      "enum": [
                        "no-public",
                      ],
                      "type": "string",
                    },
                    {
                      "description": "Never check whether there is an accessor.",
                      "enum": [
                        "off",
                      ],
                      "type": "string",
                    },
                  ],
                },
              },
              "additionalProperties": false,
              "properties": {
                "accessibility": {
                  "$ref": "#/items/0/$defs/accessibilityLevel",
                },
                "ignoredMethodNames": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "overrides": {
                  "additionalProperties": false,
                  "properties": {
                    "accessors": {
                      "$ref": "#/items/0/$defs/accessibilityLevel",
                    },
                    "constructors": {
                      "$ref": "#/items/0/$defs/accessibilityLevel",
                    },
                    "methods": {
                      "$ref": "#/items/0/$defs/accessibilityLevel",
                    },
                    "parameterProperties": {
                      "$ref": "#/items/0/$defs/accessibilityLevel",
                    },
                    "properties": {
                      "$ref": "#/items/0/$defs/accessibilityLevel",
                    },
                  },
                  "type": "object",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "explicit-module-boundary-types": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowArgumentsExplicitlyTypedAsAny": false,
            "allowDirectConstAssertionInArrowFunctions": true,
            "allowHigherOrderFunctions": true,
            "allowTypedFunctionExpressions": true,
            "allowedNames": [],
          },
        ],
        "meta": {
          "docs": {
            "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
            "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types",
          },
          "messages": {
            "anyTypedArg": "Argument '{{name}}' should be typed with a non-any type.",
            "anyTypedArgUnnamed": "{{type}} argument should be typed with a non-any type.",
            "missingArgType": "Argument '{{name}}' should be typed.",
            "missingArgTypeUnnamed": "{{type}} argument should be typed.",
            "missingReturnType": "Missing return type on function.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowArgumentsExplicitlyTypedAsAny": {
                  "description": "Whether to ignore arguments that are explicitly typed as \`any\`.",
                  "type": "boolean",
                },
                "allowDirectConstAssertionInArrowFunctions": {
                  "description": "Whether to ignore return type annotations on body-less arrow functions that return an \`as const\` type assertion.
You must still type the parameters of the function.",
                  "type": "boolean",
                },
                "allowHigherOrderFunctions": {
                  "description": "Whether to ignore return type annotations on functions immediately returning another function expression.
You must still type the parameters of the function.",
                  "type": "boolean",
                },
                "allowTypedFunctionExpressions": {
                  "description": "Whether to ignore type annotations on the variable of a function expresion.",
                  "type": "boolean",
                },
                "allowedNames": {
                  "description": "An array of function/method names that will not have their arguments or return values checked.",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "func-call-spacing": {
        "create": [Function],
        "defaultOptions": [
          "never",
          {},
        ],
        "meta": {
          "docs": {
            "description": "Require or disallow spacing between function identifiers and their invocations",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/func-call-spacing",
          },
          "fixable": "whitespace",
          "messages": {
            "missing": "Missing space between function name and paren.",
            "unexpectedNewline": "Unexpected newline between function name and paren.",
            "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
          },
          "schema": {
            "anyOf": [
              {
                "items": [
                  {
                    "enum": [
                      "never",
                    ],
                    "type": "string",
                  },
                ],
                "maxItems": 1,
                "minItems": 0,
                "type": "array",
              },
              {
                "items": [
                  {
                    "enum": [
                      "always",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowNewlines": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "maxItems": 2,
                "minItems": 0,
                "type": "array",
              },
            ],
          },
          "type": "layout",
        },
      },
      "indent": {
        "create": [Function],
        "defaultOptions": [
          4,
          {
            "SwitchCase": 1,
            "flatTernaryExpressions": false,
            "ignoredNodes": [],
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce consistent indentation",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/indent",
          },
          "fixable": "whitespace",
          "hasSuggestions": undefined,
          "messages": {
            "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
          },
          "schema": [
            {
              "oneOf": [
                {
                  "enum": [
                    "tab",
                  ],
                },
                {
                  "minimum": 0,
                  "type": "integer",
                },
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "ArrayExpression": {
                  "oneOf": [
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                    {
                      "enum": [
                        "first",
                        "off",
                      ],
                    },
                  ],
                },
                "CallExpression": {
                  "additionalProperties": false,
                  "properties": {
                    "arguments": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
                "FunctionDeclaration": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "parameters": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
                "FunctionExpression": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "parameters": {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
                "ImportDeclaration": {
                  "oneOf": [
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                    {
                      "enum": [
                        "first",
                        "off",
                      ],
                    },
                  ],
                },
                "MemberExpression": {
                  "oneOf": [
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                    {
                      "enum": [
                        "off",
                      ],
                    },
                  ],
                },
                "ObjectExpression": {
                  "oneOf": [
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                    {
                      "enum": [
                        "first",
                        "off",
                      ],
                    },
                  ],
                },
                "StaticBlock": {
                  "additionalProperties": false,
                  "properties": {
                    "body": {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
                "SwitchCase": {
                  "default": 0,
                  "minimum": 0,
                  "type": "integer",
                },
                "VariableDeclarator": {
                  "oneOf": [
                    {
                      "oneOf": [
                        {
                          "minimum": 0,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "first",
                            "off",
                          ],
                        },
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "const": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                            },
                          ],
                        },
                        "let": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                            },
                          ],
                        },
                        "var": {
                          "oneOf": [
                            {
                              "minimum": 0,
                              "type": "integer",
                            },
                            {
                              "enum": [
                                "first",
                                "off",
                              ],
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
                "flatTernaryExpressions": {
                  "default": false,
                  "type": "boolean",
                },
                "ignoreComments": {
                  "default": false,
                  "type": "boolean",
                },
                "ignoredNodes": {
                  "items": {
                    "not": {
                      "pattern": ":exit$",
                    },
                    "type": "string",
                  },
                  "type": "array",
                },
                "offsetTernaryExpressions": {
                  "default": false,
                  "type": "boolean",
                },
                "outerIIFEBody": {
                  "oneOf": [
                    {
                      "minimum": 0,
                      "type": "integer",
                    },
                    {
                      "enum": [
                        "off",
                      ],
                    },
                  ],
                },
              },
              "type": "object",
            },
          ],
          "type": "layout",
        },
      },
      "init-declarations": {
        "create": [Function],
        "defaultOptions": [
          "always",
        ],
        "meta": {
          "docs": {
            "description": "Require or disallow initialization in variable declarations",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/init-declarations",
          },
          "hasSuggestions": undefined,
          "messages": {
            "initialized": "Variable '{{idName}}' should be initialized on declaration.",
            "notInitialized": "Variable '{{idName}}' should not be initialized on declaration.",
          },
          "schema": {
            "anyOf": [
              {
                "items": [
                  {
                    "enum": [
                      "always",
                    ],
                  },
                ],
                "maxItems": 1,
                "minItems": 0,
                "type": "array",
              },
              {
                "items": [
                  {
                    "enum": [
                      "never",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "ignoreForLoopInit": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "maxItems": 2,
                "minItems": 0,
                "type": "array",
              },
            ],
          },
          "type": "suggestion",
        },
      },
      "key-spacing": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/key-spacing",
          },
          "fixable": "whitespace",
          "hasSuggestions": undefined,
          "messages": {
            "extraKey": "Extra space after {{computed}}key '{{key}}'.",
            "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
            "missingKey": "Missing space after {{computed}}key '{{key}}'.",
            "missingValue": "Missing space before value for {{computed}}key '{{key}}'.",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "afterColon": {
                      "type": "boolean",
                    },
                    "align": {
                      "anyOf": [
                        {
                          "enum": [
                            "colon",
                            "value",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "afterColon": {
                              "type": "boolean",
                            },
                            "beforeColon": {
                              "type": "boolean",
                            },
                            "mode": {
                              "enum": [
                                "strict",
                                "minimum",
                              ],
                            },
                            "on": {
                              "enum": [
                                "colon",
                                "value",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "beforeColon": {
                      "type": "boolean",
                    },
                    "mode": {
                      "enum": [
                        "strict",
                        "minimum",
                      ],
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "multiLine": {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "align": {
                          "anyOf": [
                            {
                              "enum": [
                                "colon",
                                "value",
                              ],
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "afterColon": {
                                  "type": "boolean",
                                },
                                "beforeColon": {
                                  "type": "boolean",
                                },
                                "mode": {
                                  "enum": [
                                    "strict",
                                    "minimum",
                                  ],
                                },
                                "on": {
                                  "enum": [
                                    "colon",
                                    "value",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "singleLine": {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "align": {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                        },
                        "on": {
                          "enum": [
                            "colon",
                            "value",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "multiLine": {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "singleLine": {
                      "additionalProperties": false,
                      "properties": {
                        "afterColon": {
                          "type": "boolean",
                        },
                        "beforeColon": {
                          "type": "boolean",
                        },
                        "mode": {
                          "enum": [
                            "strict",
                            "minimum",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
          "type": "layout",
        },
      },
      "keyword-spacing": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "description": "Enforce consistent spacing before and after keywords",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/keyword-spacing",
          },
          "fixable": "whitespace",
          "hasSuggestions": undefined,
          "messages": {
            "expectedAfter": "Expected space(s) after "{{value}}".",
            "expectedBefore": "Expected space(s) before "{{value}}".",
            "unexpectedAfter": "Unexpected space(s) after "{{value}}".",
            "unexpectedBefore": "Unexpected space(s) before "{{value}}".",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "after": {
                  "default": true,
                  "type": "boolean",
                },
                "before": {
                  "default": true,
                  "type": "boolean",
                },
                "overrides": {
                  "additionalProperties": false,
                  "properties": {
                    "abstract": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "as": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "async": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "await": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "boolean": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "break": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "byte": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "case": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "catch": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "char": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "class": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "const": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "continue": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "debugger": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "default": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "delete": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "do": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "double": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "else": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "enum": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "export": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "extends": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "false": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "final": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "finally": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "float": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "for": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "from": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "function": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "get": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "goto": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "if": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "implements": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "import": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "in": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "instanceof": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "int": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "interface": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "let": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "long": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "native": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "new": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "null": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "of": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "package": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "private": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "protected": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "public": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "return": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "set": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "short": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "static": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "super": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "switch": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "synchronized": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "this": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "throw": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "throws": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "transient": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "true": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "try": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "type": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "typeof": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "var": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "void": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "volatile": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "while": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "with": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "yield": {
                      "additionalProperties": false,
                      "properties": {
                        "after": {
                          "type": "boolean",
                        },
                        "before": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              },
              "type": "object",
            },
          ],
          "type": "layout",
        },
      },
      "lines-around-comment": {
        "create": [Function],
        "defaultOptions": [
          {
            "beforeBlockComment": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require empty lines around comments",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/lines-around-comment",
          },
          "fixable": "whitespace",
          "hasSuggestions": undefined,
          "messages": {
            "after": "Expected line after comment.",
            "before": "Expected line before comment.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "afterBlockComment": {
                  "default": false,
                  "type": "boolean",
                },
                "afterLineComment": {
                  "default": false,
                  "type": "boolean",
                },
                "allowArrayEnd": {
                  "type": "boolean",
                },
                "allowArrayStart": {
                  "type": "boolean",
                },
                "allowBlockEnd": {
                  "default": false,
                  "type": "boolean",
                },
                "allowBlockStart": {
                  "default": false,
                  "type": "boolean",
                },
                "allowClassEnd": {
                  "type": "boolean",
                },
                "allowClassStart": {
                  "type": "boolean",
                },
                "allowEnumEnd": {
                  "type": "boolean",
                },
                "allowEnumStart": {
                  "type": "boolean",
                },
                "allowInterfaceEnd": {
                  "type": "boolean",
                },
                "allowInterfaceStart": {
                  "type": "boolean",
                },
                "allowModuleEnd": {
                  "type": "boolean",
                },
                "allowModuleStart": {
                  "type": "boolean",
                },
                "allowObjectEnd": {
                  "type": "boolean",
                },
                "allowObjectStart": {
                  "type": "boolean",
                },
                "allowTypeEnd": {
                  "type": "boolean",
                },
                "allowTypeStart": {
                  "type": "boolean",
                },
                "applyDefaultIgnorePatterns": {
                  "type": "boolean",
                },
                "beforeBlockComment": {
                  "default": true,
                  "type": "boolean",
                },
                "beforeLineComment": {
                  "default": false,
                  "type": "boolean",
                },
                "ignorePattern": {
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
          "type": "layout",
        },
      },
      "lines-between-class-members": {
        "create": [Function],
        "defaultOptions": [
          "always",
          {
            "exceptAfterOverload": true,
            "exceptAfterSingleLine": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require or disallow an empty line between class members",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/lines-between-class-members",
          },
          "fixable": "whitespace",
          "hasSuggestions": undefined,
          "messages": {
            "always": "Expected blank line between class members.",
            "never": "Unexpected blank line between class members.",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "enforce": {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "blankLine": {
                            "enum": [
                              "always",
                              "never",
                            ],
                          },
                          "next": {
                            "enum": [
                              "method",
                              "field",
                              "*",
                            ],
                          },
                          "prev": {
                            "enum": [
                              "method",
                              "field",
                              "*",
                            ],
                          },
                        },
                        "required": [
                          "blankLine",
                          "prev",
                          "next",
                        ],
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                  },
                  "required": [
                    "enforce",
                  ],
                  "type": "object",
                },
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "exceptAfterOverload": {
                  "default": true,
                  "type": "boolean",
                },
                "exceptAfterSingleLine": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "layout",
        },
      },
      "max-params": {
        "create": [Function],
        "defaultOptions": [
          {
            "countVoidThis": false,
            "max": 3,
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce a maximum number of parameters in function definitions",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/max-params",
          },
          "messages": {
            "exceed": "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "countVoidThis": {
                  "type": "boolean",
                },
                "max": {
                  "minimum": 0,
                  "type": "integer",
                },
                "maximum": {
                  "minimum": 0,
                  "type": "integer",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "member-delimiter-style": {
        "create": [Function],
        "defaultOptions": [
          {
            "multiline": {
              "delimiter": "semi",
              "requireLast": true,
            },
            "multilineDetection": "brackets",
            "singleline": {
              "delimiter": "semi",
              "requireLast": false,
            },
          },
        ],
        "meta": {
          "docs": {
            "description": "Require a specific member delimiter style for interfaces and type literals",
            "url": "https://typescript-eslint.io/rules/member-delimiter-style",
          },
          "fixable": "whitespace",
          "messages": {
            "expectedComma": "Expected a comma.",
            "expectedSemi": "Expected a semicolon.",
            "unexpectedComma": "Unexpected separator (,).",
            "unexpectedSemi": "Unexpected separator (;).",
          },
          "schema": [
            {
              "$defs": {
                "delimiterConfig": {
                  "additionalProperties": false,
                  "properties": {
                    "multiline": {
                      "additionalProperties": false,
                      "properties": {
                        "delimiter": {
                          "$ref": "#/items/0/$defs/multiLineOption",
                        },
                        "requireLast": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "singleline": {
                      "additionalProperties": false,
                      "properties": {
                        "delimiter": {
                          "$ref": "#/items/0/$defs/singleLineOption",
                        },
                        "requireLast": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
                "multiLineOption": {
                  "enum": [
                    "none",
                    "semi",
                    "comma",
                  ],
                  "type": "string",
                },
                "singleLineOption": {
                  "enum": [
                    "semi",
                    "comma",
                  ],
                  "type": "string",
                },
              },
              "additionalProperties": false,
              "properties": {
                "multiline": {
                  "additionalProperties": false,
                  "properties": {
                    "delimiter": {
                      "$ref": "#/items/0/$defs/multiLineOption",
                    },
                    "requireLast": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                "multilineDetection": {
                  "enum": [
                    "brackets",
                    "last-member",
                  ],
                  "type": "string",
                },
                "overrides": {
                  "additionalProperties": false,
                  "properties": {
                    "interface": {
                      "$ref": "#/items/0/$defs/delimiterConfig",
                    },
                    "typeLiteral": {
                      "$ref": "#/items/0/$defs/delimiterConfig",
                    },
                  },
                  "type": "object",
                },
                "singleline": {
                  "additionalProperties": false,
                  "properties": {
                    "delimiter": {
                      "$ref": "#/items/0/$defs/singleLineOption",
                    },
                    "requireLast": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              },
              "type": "object",
            },
          ],
          "type": "layout",
        },
      },
      "member-ordering": {
        "create": [Function],
        "defaultOptions": [
          {
            "default": [
              "signature",
              "call-signature",
              "public-static-field",
              "protected-static-field",
              "private-static-field",
              "#private-static-field",
              "public-decorated-field",
              "protected-decorated-field",
              "private-decorated-field",
              "public-instance-field",
              "protected-instance-field",
              "private-instance-field",
              "#private-instance-field",
              "public-abstract-field",
              "protected-abstract-field",
              "public-field",
              "protected-field",
              "private-field",
              "#private-field",
              "static-field",
              "instance-field",
              "abstract-field",
              "decorated-field",
              "field",
              "static-initialization",
              "public-constructor",
              "protected-constructor",
              "private-constructor",
              "constructor",
              "public-static-accessor",
              "protected-static-accessor",
              "private-static-accessor",
              "#private-static-accessor",
              "public-decorated-accessor",
              "protected-decorated-accessor",
              "private-decorated-accessor",
              "public-instance-accessor",
              "protected-instance-accessor",
              "private-instance-accessor",
              "#private-instance-accessor",
              "public-abstract-accessor",
              "protected-abstract-accessor",
              "public-accessor",
              "protected-accessor",
              "private-accessor",
              "#private-accessor",
              "static-accessor",
              "instance-accessor",
              "abstract-accessor",
              "decorated-accessor",
              "accessor",
              "public-static-get",
              "protected-static-get",
              "private-static-get",
              "#private-static-get",
              "public-decorated-get",
              "protected-decorated-get",
              "private-decorated-get",
              "public-instance-get",
              "protected-instance-get",
              "private-instance-get",
              "#private-instance-get",
              "public-abstract-get",
              "protected-abstract-get",
              "public-get",
              "protected-get",
              "private-get",
              "#private-get",
              "static-get",
              "instance-get",
              "abstract-get",
              "decorated-get",
              "get",
              "public-static-set",
              "protected-static-set",
              "private-static-set",
              "#private-static-set",
              "public-decorated-set",
              "protected-decorated-set",
              "private-decorated-set",
              "public-instance-set",
              "protected-instance-set",
              "private-instance-set",
              "#private-instance-set",
              "public-abstract-set",
              "protected-abstract-set",
              "public-set",
              "protected-set",
              "private-set",
              "#private-set",
              "static-set",
              "instance-set",
              "abstract-set",
              "decorated-set",
              "set",
              "public-static-method",
              "protected-static-method",
              "private-static-method",
              "#private-static-method",
              "public-decorated-method",
              "protected-decorated-method",
              "private-decorated-method",
              "public-instance-method",
              "protected-instance-method",
              "private-instance-method",
              "#private-instance-method",
              "public-abstract-method",
              "protected-abstract-method",
              "public-method",
              "protected-method",
              "private-method",
              "#private-method",
              "static-method",
              "instance-method",
              "abstract-method",
              "decorated-method",
              "method",
            ],
          },
        ],
        "meta": {
          "docs": {
            "description": "Require a consistent member declaration order",
            "url": "https://typescript-eslint.io/rules/member-ordering",
          },
          "messages": {
            "incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions.",
            "incorrectOrder": "Member {{member}} should be declared before member {{beforeMember}}.",
            "incorrectRequiredMembersOrder": "Member {{member}} should be declared after all {{optionalOrRequired}} members.",
          },
          "schema": [
            {
              "$defs": {
                "allItems": {
                  "enum": [
                    "readonly-signature",
                    "signature",
                    "readonly-field",
                    "public-readonly-field",
                    "public-decorated-readonly-field",
                    "decorated-readonly-field",
                    "static-readonly-field",
                    "public-static-readonly-field",
                    "instance-readonly-field",
                    "public-instance-readonly-field",
                    "abstract-readonly-field",
                    "public-abstract-readonly-field",
                    "protected-readonly-field",
                    "protected-decorated-readonly-field",
                    "protected-static-readonly-field",
                    "protected-instance-readonly-field",
                    "protected-abstract-readonly-field",
                    "private-readonly-field",
                    "private-decorated-readonly-field",
                    "private-static-readonly-field",
                    "private-instance-readonly-field",
                    "#private-readonly-field",
                    "#private-static-readonly-field",
                    "#private-instance-readonly-field",
                    "field",
                    "public-field",
                    "public-decorated-field",
                    "decorated-field",
                    "static-field",
                    "public-static-field",
                    "instance-field",
                    "public-instance-field",
                    "abstract-field",
                    "public-abstract-field",
                    "protected-field",
                    "protected-decorated-field",
                    "protected-static-field",
                    "protected-instance-field",
                    "protected-abstract-field",
                    "private-field",
                    "private-decorated-field",
                    "private-static-field",
                    "private-instance-field",
                    "#private-field",
                    "#private-static-field",
                    "#private-instance-field",
                    "method",
                    "public-method",
                    "public-decorated-method",
                    "decorated-method",
                    "static-method",
                    "public-static-method",
                    "instance-method",
                    "public-instance-method",
                    "abstract-method",
                    "public-abstract-method",
                    "protected-method",
                    "protected-decorated-method",
                    "protected-static-method",
                    "protected-instance-method",
                    "protected-abstract-method",
                    "private-method",
                    "private-decorated-method",
                    "private-static-method",
                    "private-instance-method",
                    "#private-method",
                    "#private-static-method",
                    "#private-instance-method",
                    "call-signature",
                    "constructor",
                    "public-constructor",
                    "protected-constructor",
                    "private-constructor",
                    "accessor",
                    "public-accessor",
                    "public-decorated-accessor",
                    "decorated-accessor",
                    "static-accessor",
                    "public-static-accessor",
                    "instance-accessor",
                    "public-instance-accessor",
                    "abstract-accessor",
                    "public-abstract-accessor",
                    "protected-accessor",
                    "protected-decorated-accessor",
                    "protected-static-accessor",
                    "protected-instance-accessor",
                    "protected-abstract-accessor",
                    "private-accessor",
                    "private-decorated-accessor",
                    "private-static-accessor",
                    "private-instance-accessor",
                    "#private-accessor",
                    "#private-static-accessor",
                    "#private-instance-accessor",
                    "get",
                    "public-get",
                    "public-decorated-get",
                    "decorated-get",
                    "static-get",
                    "public-static-get",
                    "instance-get",
                    "public-instance-get",
                    "abstract-get",
                    "public-abstract-get",
                    "protected-get",
                    "protected-decorated-get",
                    "protected-static-get",
                    "protected-instance-get",
                    "protected-abstract-get",
                    "private-get",
                    "private-decorated-get",
                    "private-static-get",
                    "private-instance-get",
                    "#private-get",
                    "#private-static-get",
                    "#private-instance-get",
                    "set",
                    "public-set",
                    "public-decorated-set",
                    "decorated-set",
                    "static-set",
                    "public-static-set",
                    "instance-set",
                    "public-instance-set",
                    "abstract-set",
                    "public-abstract-set",
                    "protected-set",
                    "protected-decorated-set",
                    "protected-static-set",
                    "protected-instance-set",
                    "protected-abstract-set",
                    "private-set",
                    "private-decorated-set",
                    "private-static-set",
                    "private-instance-set",
                    "#private-set",
                    "#private-static-set",
                    "#private-instance-set",
                    "static-initialization",
                    "static-static-initialization",
                    "public-static-static-initialization",
                    "instance-static-initialization",
                    "public-instance-static-initialization",
                    "abstract-static-initialization",
                    "public-abstract-static-initialization",
                    "protected-static-static-initialization",
                    "protected-instance-static-initialization",
                    "protected-abstract-static-initialization",
                    "private-static-static-initialization",
                    "private-instance-static-initialization",
                    "#private-static-static-initialization",
                    "#private-instance-static-initialization",
                  ],
                  "type": "string",
                },
                "baseConfig": {
                  "oneOf": [
                    {
                      "enum": [
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/items/0/$defs/allItems",
                          },
                          {
                            "items": {
                              "$ref": "#/items/0/$defs/allItems",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "memberTypes": {
                          "oneOf": [
                            {
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/items/0/$defs/allItems",
                                  },
                                  {
                                    "items": {
                                      "$ref": "#/items/0/$defs/allItems",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            {
                              "enum": [
                                "never",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "optionalityOrder": {
                          "$ref": "#/items/0/$defs/optionalityOrderOptions",
                        },
                        "order": {
                          "$ref": "#/items/0/$defs/orderOptions",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
                "optionalityOrderOptions": {
                  "enum": [
                    "optional-first",
                    "required-first",
                  ],
                  "type": "string",
                },
                "orderOptions": {
                  "enum": [
                    "alphabetically",
                    "alphabetically-case-insensitive",
                    "as-written",
                    "natural",
                    "natural-case-insensitive",
                  ],
                  "type": "string",
                },
                "typeItems": {
                  "enum": [
                    "readonly-signature",
                    "signature",
                    "readonly-field",
                    "field",
                    "method",
                    "constructor",
                  ],
                  "type": "string",
                },
                "typesConfig": {
                  "oneOf": [
                    {
                      "enum": [
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/items/0/$defs/typeItems",
                          },
                          {
                            "items": {
                              "$ref": "#/items/0/$defs/typeItems",
                            },
                            "type": "array",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "memberTypes": {
                          "oneOf": [
                            {
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/items/0/$defs/typeItems",
                                  },
                                  {
                                    "items": {
                                      "$ref": "#/items/0/$defs/typeItems",
                                    },
                                    "type": "array",
                                  },
                                ],
                              },
                              "type": "array",
                            },
                            {
                              "enum": [
                                "never",
                              ],
                              "type": "string",
                            },
                          ],
                        },
                        "optionalityOrder": {
                          "$ref": "#/items/0/$defs/optionalityOrderOptions",
                        },
                        "order": {
                          "$ref": "#/items/0/$defs/orderOptions",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "additionalProperties": false,
              "properties": {
                "classExpressions": {
                  "$ref": "#/items/0/$defs/baseConfig",
                },
                "classes": {
                  "$ref": "#/items/0/$defs/baseConfig",
                },
                "default": {
                  "$ref": "#/items/0/$defs/baseConfig",
                },
                "interfaces": {
                  "$ref": "#/items/0/$defs/typesConfig",
                },
                "typeLiterals": {
                  "$ref": "#/items/0/$defs/typesConfig",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "method-signature-style": {
        "create": [Function],
        "defaultOptions": [
          "property",
        ],
        "meta": {
          "docs": {
            "description": "Enforce using a particular method signature syntax",
            "url": "https://typescript-eslint.io/rules/method-signature-style",
          },
          "fixable": "code",
          "messages": {
            "errorMethod": "Shorthand method signature is forbidden. Use a function property instead.",
            "errorProperty": "Function property signature is forbidden. Use a method shorthand instead.",
          },
          "schema": [
            {
              "enum": [
                "property",
                "method",
              ],
              "type": "string",
            },
          ],
          "type": "suggestion",
        },
      },
      "naming-convention": {
        "create": [Function],
        "defaultOptions": [
          {
            "format": [
              "camelCase",
            ],
            "leadingUnderscore": "allow",
            "selector": "default",
            "trailingUnderscore": "allow",
          },
          {
            "format": [
              "camelCase",
              "PascalCase",
            ],
            "selector": "import",
          },
          {
            "format": [
              "camelCase",
              "UPPER_CASE",
            ],
            "leadingUnderscore": "allow",
            "selector": "variable",
            "trailingUnderscore": "allow",
          },
          {
            "format": [
              "PascalCase",
            ],
            "selector": "typeLike",
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce naming conventions for everything across a codebase",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/naming-convention",
          },
          "messages": {
            "doesNotMatchFormat": "{{type}} name \`{{name}}\` must match one of the following formats: {{formats}}",
            "doesNotMatchFormatTrimmed": "{{type}} name \`{{name}}\` trimmed as \`{{processedName}}\` must match one of the following formats: {{formats}}",
            "missingAffix": "{{type}} name \`{{name}}\` must have one of the following {{position}}es: {{affixes}}",
            "missingUnderscore": "{{type}} name \`{{name}}\` must have {{count}} {{position}} underscore(s).",
            "satisfyCustom": "{{type}} name \`{{name}}\` must {{regexMatch}} the RegExp: {{regex}}",
            "unexpectedUnderscore": "{{type}} name \`{{name}}\` must not have a {{position}} underscore.",
          },
          "schema": {
            "$defs": {
              "formatOptionsConfig": {
                "oneOf": [
                  {
                    "additionalItems": false,
                    "items": {
                      "$ref": "#/$defs/predefinedFormats",
                    },
                    "type": "array",
                  },
                  {
                    "type": "null",
                  },
                ],
              },
              "matchRegexConfig": {
                "additionalProperties": false,
                "properties": {
                  "match": {
                    "type": "boolean",
                  },
                  "regex": {
                    "type": "string",
                  },
                },
                "required": [
                  "match",
                  "regex",
                ],
                "type": "object",
              },
              "predefinedFormats": {
                "enum": [
                  "camelCase",
                  "strictCamelCase",
                  "PascalCase",
                  "StrictPascalCase",
                  "snake_case",
                  "UPPER_CASE",
                ],
                "type": "string",
              },
              "prefixSuffixConfig": {
                "additionalItems": false,
                "items": {
                  "minLength": 1,
                  "type": "string",
                },
                "type": "array",
              },
              "typeModifiers": {
                "enum": [
                  "boolean",
                  "string",
                  "number",
                  "function",
                  "array",
                ],
                "type": "string",
              },
              "underscoreOptions": {
                "enum": [
                  "forbid",
                  "allow",
                  "require",
                  "requireDouble",
                  "allowDouble",
                  "allowSingleOrDouble",
                ],
                "type": "string",
              },
            },
            "additionalItems": false,
            "items": {
              "oneOf": [
                {
                  "additionalProperties": false,
                  "description": "Multiple selectors in one config",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "const",
                          "readonly",
                          "static",
                          "public",
                          "protected",
                          "private",
                          "#private",
                          "abstract",
                          "destructured",
                          "global",
                          "exported",
                          "unused",
                          "requiresQuotes",
                          "override",
                          "async",
                          "default",
                          "namespace",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "default",
                          "variableLike",
                          "memberLike",
                          "typeLike",
                          "method",
                          "property",
                          "variable",
                          "function",
                          "parameter",
                          "parameterProperty",
                          "accessor",
                          "enumMember",
                          "classMethod",
                          "objectLiteralMethod",
                          "typeMethod",
                          "classProperty",
                          "objectLiteralProperty",
                          "typeProperty",
                          "class",
                          "interface",
                          "typeAlias",
                          "enum",
                          "typeParameter",
                          "import",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "types": {
                      "additionalItems": false,
                      "items": {
                        "$ref": "#/$defs/typeModifiers",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'default'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "const",
                          "readonly",
                          "static",
                          "public",
                          "protected",
                          "private",
                          "#private",
                          "abstract",
                          "destructured",
                          "global",
                          "exported",
                          "unused",
                          "requiresQuotes",
                          "override",
                          "async",
                          "default",
                          "namespace",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "default",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'variableLike'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "unused",
                          "async",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "variableLike",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'variable'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "const",
                          "destructured",
                          "exported",
                          "global",
                          "unused",
                          "async",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "variable",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "types": {
                      "additionalItems": false,
                      "items": {
                        "$ref": "#/$defs/typeModifiers",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'function'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "exported",
                          "global",
                          "unused",
                          "async",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "function",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'parameter'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "destructured",
                          "unused",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "parameter",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "types": {
                      "additionalItems": false,
                      "items": {
                        "$ref": "#/$defs/typeModifiers",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'memberLike'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "abstract",
                          "private",
                          "#private",
                          "protected",
                          "public",
                          "readonly",
                          "requiresQuotes",
                          "static",
                          "override",
                          "async",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "memberLike",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'classProperty'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "abstract",
                          "private",
                          "#private",
                          "protected",
                          "public",
                          "readonly",
                          "requiresQuotes",
                          "static",
                          "override",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "classProperty",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "types": {
                      "additionalItems": false,
                      "items": {
                        "$ref": "#/$defs/typeModifiers",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'objectLiteralProperty'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "public",
                          "requiresQuotes",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "objectLiteralProperty",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "types": {
                      "additionalItems": false,
                      "items": {
                        "$ref": "#/$defs/typeModifiers",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'typeProperty'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "public",
                          "readonly",
                          "requiresQuotes",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "typeProperty",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "types": {
                      "additionalItems": false,
                      "items": {
                        "$ref": "#/$defs/typeModifiers",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'parameterProperty'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "private",
                          "protected",
                          "public",
                          "readonly",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "parameterProperty",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "types": {
                      "additionalItems": false,
                      "items": {
                        "$ref": "#/$defs/typeModifiers",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'property'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "abstract",
                          "private",
                          "#private",
                          "protected",
                          "public",
                          "readonly",
                          "requiresQuotes",
                          "static",
                          "override",
                          "async",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "property",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "types": {
                      "additionalItems": false,
                      "items": {
                        "$ref": "#/$defs/typeModifiers",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'classMethod'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "abstract",
                          "private",
                          "#private",
                          "protected",
                          "public",
                          "requiresQuotes",
                          "static",
                          "override",
                          "async",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "classMethod",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'objectLiteralMethod'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "public",
                          "requiresQuotes",
                          "async",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "objectLiteralMethod",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'typeMethod'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "public",
                          "requiresQuotes",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "typeMethod",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'method'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "abstract",
                          "private",
                          "#private",
                          "protected",
                          "public",
                          "requiresQuotes",
                          "static",
                          "override",
                          "async",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "method",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'accessor'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "abstract",
                          "private",
                          "protected",
                          "public",
                          "requiresQuotes",
                          "static",
                          "override",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "accessor",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "types": {
                      "additionalItems": false,
                      "items": {
                        "$ref": "#/$defs/typeModifiers",
                      },
                      "type": "array",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'enumMember'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "requiresQuotes",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "enumMember",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'typeLike'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "abstract",
                          "exported",
                          "unused",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "typeLike",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'class'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "abstract",
                          "exported",
                          "unused",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "class",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'interface'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "exported",
                          "unused",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "interface",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'typeAlias'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "exported",
                          "unused",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "typeAlias",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'enum'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "exported",
                          "unused",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "enum",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'typeParameter'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "unused",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "typeParameter",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "description": "Selector 'import'",
                  "properties": {
                    "custom": {
                      "$ref": "#/$defs/matchRegexConfig",
                    },
                    "failureMessage": {
                      "type": "string",
                    },
                    "filter": {
                      "oneOf": [
                        {
                          "minLength": 1,
                          "type": "string",
                        },
                        {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                      ],
                    },
                    "format": {
                      "$ref": "#/$defs/formatOptionsConfig",
                    },
                    "leadingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                    "modifiers": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "default",
                          "namespace",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "prefix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "selector": {
                      "enum": [
                        "import",
                      ],
                      "type": "string",
                    },
                    "suffix": {
                      "$ref": "#/$defs/prefixSuffixConfig",
                    },
                    "trailingUnderscore": {
                      "$ref": "#/$defs/underscoreOptions",
                    },
                  },
                  "required": [
                    "selector",
                    "format",
                  ],
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
          "type": "suggestion",
        },
      },
      "no-array-constructor": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow generic \`Array\` constructors",
            "extendsBaseRule": true,
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/no-array-constructor",
          },
          "fixable": "code",
          "messages": {
            "useLiteral": "The array literal notation [] is preferable.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-base-to-string": {
        "create": [Function],
        "defaultOptions": [
          {
            "ignoredTypeNames": [
              "Error",
              "RegExp",
              "URL",
              "URLSearchParams",
            ],
          },
        ],
        "meta": {
          "docs": {
            "description": "Require \`.toString()\` to only be called on objects which provide useful information when stringified",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-base-to-string",
          },
          "messages": {
            "baseToString": "'{{name}}' {{certainty}} evaluate to '[object Object]' when stringified.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoredTypeNames": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-confusing-non-null-assertion": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow non-null assertion in locations that may be confusing",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "confusingAssign": "Confusing combinations of non-null assertion and equal test like "a! = b", which looks very similar to not equal "a != b".",
            "confusingEqual": "Confusing combinations of non-null assertion and equal test like "a! == b", which looks very similar to not equal "a !== b".",
            "notNeedInAssign": "Unnecessary non-null assertion (!) in assignment left hand.",
            "notNeedInEqualTest": "Unnecessary non-null assertion (!) in equal test.",
            "wrapUpLeft": "Wrap up left hand to avoid putting non-null assertion "!" and "=" together.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-confusing-void-expression": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "description": "Require expressions of type void to appear in statement position",
            "recommended": "strict",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-confusing-void-expression",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "invalidVoidExpr": "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
            "invalidVoidExprArrow": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
            "invalidVoidExprArrowWrapVoid": "Void expressions returned from an arrow function shorthand must be marked explicitly with the \`void\` operator.",
            "invalidVoidExprReturn": "Returning a void expression from a function is forbidden. Please move it before the \`return\` statement.",
            "invalidVoidExprReturnLast": "Returning a void expression from a function is forbidden. Please remove the \`return\` statement.",
            "invalidVoidExprReturnWrapVoid": "Void expressions returned from a function must be marked explicitly with the \`void\` operator.",
            "invalidVoidExprWrapVoid": "Void expressions used inside another expression must be moved to its own statement or marked explicitly with the \`void\` operator.",
            "voidExprWrapVoid": "Mark with an explicit \`void\` operator.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreArrowShorthand": {
                  "type": "boolean",
                },
                "ignoreVoidOperator": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-dupe-class-members": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow duplicate class members",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/no-dupe-class-members",
          },
          "hasSuggestions": undefined,
          "messages": {
            "unexpected": "Duplicate name '{{name}}'.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-duplicate-enum-values": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow duplicate enum member values",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values",
          },
          "hasSuggestions": false,
          "messages": {
            "duplicateValue": "Duplicate enum member value {{value}}.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-duplicate-type-constituents": {
        "create": [Function],
        "defaultOptions": [
          {
            "ignoreIntersections": false,
            "ignoreUnions": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow duplicate constituents of union or intersection types",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents",
          },
          "fixable": "code",
          "messages": {
            "duplicate": "{{type}} type constituent is duplicated with {{previous}}.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreIntersections": {
                  "type": "boolean",
                },
                "ignoreUnions": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-dynamic-delete": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow using the \`delete\` operator on computed key expressions",
            "recommended": "strict",
            "url": "https://typescript-eslint.io/rules/no-dynamic-delete",
          },
          "fixable": "code",
          "messages": {
            "dynamicDelete": "Do not delete dynamically computed property keys.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-empty-function": {
        "create": [Function],
        "defaultOptions": [
          {
            "allow": [],
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow empty functions",
            "extendsBaseRule": true,
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/no-empty-function",
          },
          "hasSuggestions": undefined,
          "messages": {
            "unexpected": "Unexpected empty {{name}}.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allow": {
                  "items": {
                    "enum": [
                      "functions",
                      "arrowFunctions",
                      "generatorFunctions",
                      "methods",
                      "generatorMethods",
                      "getters",
                      "setters",
                      "constructors",
                      "private-constructors",
                      "protected-constructors",
                      "asyncFunctions",
                      "asyncMethods",
                      "decoratedFunctions",
                      "overrideMethods",
                    ],
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-empty-interface": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowSingleExtends": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow the declaration of empty interfaces",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/no-empty-interface",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "noEmpty": "An empty interface is equivalent to \`{}\`.",
            "noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowSingleExtends": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-explicit-any": {
        "create": [Function],
        "defaultOptions": [
          {
            "fixToUnknown": false,
            "ignoreRestArgs": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow the \`any\` type",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/no-explicit-any",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "suggestNever": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
            "suggestUnknown": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
            "unexpectedAny": "Unexpected any. Specify a different type.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "fixToUnknown": {
                  "description": "Whether to enable auto-fixing in which the \`any\` type is converted to the \`unknown\` type.",
                  "type": "boolean",
                },
                "ignoreRestArgs": {
                  "description": "Whether to ignore rest parameter arrays.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-extra-non-null-assertion": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow extra non-null assertions",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion",
          },
          "fixable": "code",
          "messages": {
            "noExtraNonNullAssertion": "Forbidden extra non-null assertion.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-extra-parens": {
        "create": [Function],
        "defaultOptions": [
          "all",
        ],
        "meta": {
          "docs": {
            "description": "Disallow unnecessary parentheses",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/no-extra-parens",
          },
          "fixable": "code",
          "hasSuggestions": undefined,
          "messages": {
            "unexpected": "Unnecessary parentheses around expression.",
          },
          "schema": {
            "anyOf": [
              {
                "items": [
                  {
                    "enum": [
                      "functions",
                    ],
                  },
                ],
                "maxItems": 1,
                "minItems": 0,
                "type": "array",
              },
              {
                "items": [
                  {
                    "enum": [
                      "all",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowParensAfterCommentPattern": {
                        "type": "string",
                      },
                      "conditionalAssign": {
                        "type": "boolean",
                      },
                      "enforceForArrowConditionals": {
                        "type": "boolean",
                      },
                      "enforceForFunctionPrototypeMethods": {
                        "type": "boolean",
                      },
                      "enforceForNewInMemberExpressions": {
                        "type": "boolean",
                      },
                      "enforceForSequenceExpressions": {
                        "type": "boolean",
                      },
                      "ignoreJSX": {
                        "enum": [
                          "none",
                          "all",
                          "single-line",
                          "multi-line",
                        ],
                      },
                      "nestedBinaryExpressions": {
                        "type": "boolean",
                      },
                      "returnAssign": {
                        "type": "boolean",
                      },
                      "ternaryOperandBinaryExpressions": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "maxItems": 2,
                "minItems": 0,
                "type": "array",
              },
            ],
          },
          "type": "layout",
        },
      },
      "no-extra-semi": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow unnecessary semicolons",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/no-extra-semi",
          },
          "fixable": "code",
          "hasSuggestions": undefined,
          "messages": {
            "unexpected": "Unnecessary semicolon.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-extraneous-class": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowConstructorOnly": false,
            "allowEmpty": false,
            "allowStaticOnly": false,
            "allowWithDecorator": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow classes used as namespaces",
            "recommended": "strict",
            "url": "https://typescript-eslint.io/rules/no-extraneous-class",
          },
          "messages": {
            "empty": "Unexpected empty class.",
            "onlyConstructor": "Unexpected class with only a constructor.",
            "onlyStatic": "Unexpected class with only static properties.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowConstructorOnly": {
                  "description": "Whether to allow extraneous classes that contain only a constructor.",
                  "type": "boolean",
                },
                "allowEmpty": {
                  "description": "Whether to allow extraneous classes that have no body (i.e. are empty).",
                  "type": "boolean",
                },
                "allowStaticOnly": {
                  "description": "Whether to allow extraneous classes that only contain static members.",
                  "type": "boolean",
                },
                "allowWithDecorator": {
                  "description": "Whether to allow extraneous classes that include a decorator.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-floating-promises": {
        "create": [Function],
        "defaultOptions": [
          {
            "ignoreIIFE": false,
            "ignoreVoid": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require Promise-like statements to be handled appropriately",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-floating-promises",
          },
          "hasSuggestions": true,
          "messages": {
            "floating": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler.",
            "floatingFixAwait": "Add await operator.",
            "floatingFixVoid": "Add void operator to ignore.",
            "floatingUselessRejectionHandler": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler. A rejection handler that is not a function will be ignored.",
            "floatingUselessRejectionHandlerVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the \`void\` operator. A rejection handler that is not a function will be ignored.",
            "floatingVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the \`void\` operator.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreIIFE": {
                  "description": "Whether to ignore async IIFEs (Immediately Invoked Function Expressions).",
                  "type": "boolean",
                },
                "ignoreVoid": {
                  "description": "Whether to ignore \`void\` expressions.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-for-in-array": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow iterating over an array with a for-in loop",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-for-in-array",
          },
          "messages": {
            "forInViolation": "For-in loops over arrays are forbidden. Use for-of or array.forEach instead.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-implied-eval": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow the use of \`eval()\`-like methods",
            "extendsBaseRule": true,
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-implied-eval",
          },
          "messages": {
            "noFunctionConstructor": "Implied eval. Do not use the Function constructor to create functions.",
            "noImpliedEvalError": "Implied eval. Consider passing a function.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-import-type-side-effects": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
            "url": "https://typescript-eslint.io/rules/no-import-type-side-effects",
          },
          "fixable": "code",
          "messages": {
            "useTopLevelQualifier": "TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-inferrable-types": {
        "create": [Function],
        "defaultOptions": [
          {
            "ignoreParameters": false,
            "ignoreProperties": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/no-inferrable-types",
          },
          "fixable": "code",
          "messages": {
            "noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreParameters": {
                  "type": "boolean",
                },
                "ignoreProperties": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-invalid-this": {
        "create": [Function],
        "defaultOptions": [
          {
            "capIsConstructor": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow \`this\` keywords outside of classes or class-like objects",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/no-invalid-this",
          },
          "hasSuggestions": undefined,
          "messages": {
            "unexpectedThis": "Unexpected 'this'.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "capIsConstructor": {
                  "default": true,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-invalid-void-type": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowAsThisParameter": false,
            "allowInGenericTypeArguments": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow \`void\` type outside of generic or return types",
            "recommended": "strict",
            "url": "https://typescript-eslint.io/rules/no-invalid-void-type",
          },
          "messages": {
            "invalidVoidForGeneric": "{{ generic }} may not have void as a type argument.",
            "invalidVoidNotReturn": "void is only valid as a return type.",
            "invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type argument.",
            "invalidVoidNotReturnOrThisParam": "void is only valid as return type or type of \`this\` parameter.",
            "invalidVoidNotReturnOrThisParamOrGeneric": "void is only valid as a return type or generic type argument or the type of a \`this\` parameter.",
            "invalidVoidUnionConstituent": "void is not valid as a constituent in a union type",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowAsThisParameter": {
                  "type": "boolean",
                },
                "allowInGenericTypeArguments": {
                  "oneOf": [
                    {
                      "type": "boolean",
                    },
                    {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                  ],
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-loop-func": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow function declarations that contain unsafe references inside loop statements",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/no-loop-func",
          },
          "hasSuggestions": undefined,
          "messages": {
            "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-loss-of-precision": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow literal numbers that lose precision",
            "extendsBaseRule": true,
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/no-loss-of-precision",
          },
          "hasSuggestions": undefined,
          "messages": {
            "noLossOfPrecision": "This number literal will lose precision at runtime.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-magic-numbers": {
        "create": [Function],
        "defaultOptions": [
          {
            "detectObjects": false,
            "enforceConst": false,
            "ignore": [],
            "ignoreArrayIndexes": false,
            "ignoreEnums": false,
            "ignoreNumericLiteralTypes": false,
            "ignoreReadonlyClassProperties": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow magic numbers",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/no-magic-numbers",
          },
          "messages": {
            "noMagic": "No magic number: {{raw}}.",
            "useConst": "Number constants declarations must use 'const'.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "detectObjects": {
                  "default": false,
                  "type": "boolean",
                },
                "enforceConst": {
                  "default": false,
                  "type": "boolean",
                },
                "ignore": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "number",
                      },
                      {
                        "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$",
                        "type": "string",
                      },
                    ],
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "ignoreArrayIndexes": {
                  "default": false,
                  "type": "boolean",
                },
                "ignoreClassFieldInitialValues": {
                  "default": false,
                  "type": "boolean",
                },
                "ignoreDefaultValues": {
                  "default": false,
                  "type": "boolean",
                },
                "ignoreEnums": {
                  "type": "boolean",
                },
                "ignoreNumericLiteralTypes": {
                  "type": "boolean",
                },
                "ignoreReadonlyClassProperties": {
                  "type": "boolean",
                },
                "ignoreTypeIndexes": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-meaningless-void-operator": {
        "create": [Function],
        "defaultOptions": [
          {
            "checkNever": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow the \`void\` operator except when used to discard a value",
            "recommended": "strict",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "meaninglessVoidOperator": "void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored",
            "removeVoid": "Remove 'void'",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "checkNever": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-misused-new": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce valid definition of \`new\` and \`constructor\`",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/no-misused-new",
          },
          "messages": {
            "errorMessageClass": "Class cannot have method named \`new\`.",
            "errorMessageInterface": "Interfaces cannot be constructed, only classes.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-misused-promises": {
        "create": [Function],
        "defaultOptions": [
          {
            "checksConditionals": true,
            "checksSpreads": true,
            "checksVoidReturn": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow Promises in places not designed to handle them",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-misused-promises",
          },
          "messages": {
            "conditional": "Expected non-Promise value in a boolean conditional.",
            "spread": "Expected a non-Promise value to be spreaded in an object.",
            "voidReturnArgument": "Promise returned in function argument where a void return was expected.",
            "voidReturnAttribute": "Promise-returning function provided to attribute where a void return was expected.",
            "voidReturnProperty": "Promise-returning function provided to property where a void return was expected.",
            "voidReturnReturnValue": "Promise-returning function provided to return value where a void return was expected.",
            "voidReturnVariable": "Promise-returning function provided to variable where a void return was expected.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "checksConditionals": {
                  "type": "boolean",
                },
                "checksSpreads": {
                  "type": "boolean",
                },
                "checksVoidReturn": {
                  "oneOf": [
                    {
                      "type": "boolean",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "arguments": {
                          "type": "boolean",
                        },
                        "attributes": {
                          "type": "boolean",
                        },
                        "properties": {
                          "type": "boolean",
                        },
                        "returns": {
                          "type": "boolean",
                        },
                        "variables": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-mixed-enums": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow enums from having both number and string members",
            "recommended": "strict",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-mixed-enums",
          },
          "messages": {
            "mixed": "Mixing number and string enums can be confusing.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-namespace": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowDeclarations": false,
            "allowDefinitionFiles": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow TypeScript namespaces",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/no-namespace",
          },
          "messages": {
            "moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over namespaces.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowDeclarations": {
                  "description": "Whether to allow \`declare\` with custom TypeScript namespaces.",
                  "type": "boolean",
                },
                "allowDefinitionFiles": {
                  "description": "Whether to allow \`declare\` with custom TypeScript namespaces inside definition files.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-non-null-asserted-nullish-coalescing": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
            "recommended": "strict",
            "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing",
          },
          "hasSuggestions": true,
          "messages": {
            "noNonNullAssertedNullishCoalescing": "The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.",
            "suggestRemovingNonNull": "Remove the non-null assertion.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-non-null-asserted-optional-chain": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow non-null assertions after an optional chain expression",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain",
          },
          "hasSuggestions": true,
          "messages": {
            "noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
            "suggestRemovingNonNull": "You should remove the non-null assertion.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-non-null-assertion": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow non-null assertions using the \`!\` postfix operator",
            "recommended": "strict",
            "url": "https://typescript-eslint.io/rules/no-non-null-assertion",
          },
          "hasSuggestions": true,
          "messages": {
            "noNonNull": "Forbidden non-null assertion.",
            "suggestOptionalChain": "Consider using the optional chain operator \`?.\` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-redeclare": {
        "create": [Function],
        "defaultOptions": [
          {
            "builtinGlobals": true,
            "ignoreDeclarationMerge": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow variable redeclaration",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/no-redeclare",
          },
          "messages": {
            "redeclared": "'{{id}}' is already defined.",
            "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
            "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "builtinGlobals": {
                  "type": "boolean",
                },
                "ignoreDeclarationMerge": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-redundant-type-constituents": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow members of unions and intersections that do nothing or override type information",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents",
          },
          "messages": {
            "literalOverridden": "{{literal}} is overridden by {{primitive}} in this union type.",
            "overridden": "'{{typeName}}' is overridden by other types in this {{container}} type.",
            "overrides": "'{{typeName}}' overrides all other types in this {{container}} type.",
            "primitiveOverridden": "{{primitive}} is overridden by the {{literal}} in this intersection type.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-require-imports": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow invocation of \`require()\`",
            "url": "https://typescript-eslint.io/rules/no-require-imports",
          },
          "messages": {
            "noRequireImports": "A \`require()\` style import is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-restricted-imports": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow specified modules when loaded by \`import\`",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/no-restricted-imports",
          },
          "fixable": undefined,
          "messages": {
            "allowedImportName": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed.",
            "allowedImportNamePattern": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'.",
            "allowedImportNamePatternWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'. {{customMessage}}",
            "allowedImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed. {{customMessage}}",
            "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
            "everythingWithAllowImportNames": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed.",
            "everythingWithAllowImportNamesAndCustomMessage": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed. {{customMessage}}",
            "everythingWithAllowedImportNamePattern": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed.",
            "everythingWithAllowedImportNamePatternWithCustomMessage": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed. {{customMessage}}",
            "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
            "importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
            "importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}",
            "path": "'{{importSource}}' import is restricted from being used.",
            "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
            "patternAndEverything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
            "patternAndEverythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
            "patternAndEverythingWithRegexImportName": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
            "patternAndEverythingWithRegexImportNameAndCustomMessage": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}",
            "patternAndImportName": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
            "patternAndImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
            "patternWithCustomMessage": "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
            "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
          },
          "schema": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowImportNames": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "allowTypeImports": {
                          "description": "Disallow value imports, but allow type-only imports.",
                          "type": "boolean",
                        },
                        "importNames": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "message": {
                          "minLength": 1,
                          "type": "string",
                        },
                        "name": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "name",
                      ],
                      "type": "object",
                    },
                  ],
                },
                "type": "array",
                "uniqueItems": true,
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "paths": {
                        "items": {
                          "anyOf": [
                            {
                              "type": "string",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "allowImportNames": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                "allowTypeImports": {
                                  "description": "Disallow value imports, but allow type-only imports.",
                                  "type": "boolean",
                                },
                                "importNames": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                                "message": {
                                  "minLength": 1,
                                  "type": "string",
                                },
                                "name": {
                                  "type": "string",
                                },
                              },
                              "required": [
                                "name",
                              ],
                              "type": "object",
                            },
                          ],
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "patterns": {
                        "anyOf": [
                          {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "allowImportNamePattern": {
                                  "type": "string",
                                },
                                "allowImportNames": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                                "allowTypeImports": {
                                  "description": "Disallow value imports, but allow type-only imports.",
                                  "type": "boolean",
                                },
                                "caseSensitive": {
                                  "type": "boolean",
                                },
                                "group": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                                "importNamePattern": {
                                  "type": "string",
                                },
                                "importNames": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                                "message": {
                                  "minLength": 1,
                                  "type": "string",
                                },
                                "regex": {
                                  "type": "string",
                                },
                              },
                              "required": undefined,
                              "type": "object",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            ],
          },
          "type": "suggestion",
        },
      },
      "no-shadow": {
        "create": [Function],
        "defaultOptions": [
          {
            "allow": [],
            "builtinGlobals": false,
            "hoist": "functions",
            "ignoreFunctionTypeParameterNameValueShadow": true,
            "ignoreOnInitialization": false,
            "ignoreTypeValueShadow": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/no-shadow",
          },
          "messages": {
            "noShadow": "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
            "noShadowGlobal": "'{{name}}' is already a global variable.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allow": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "builtinGlobals": {
                  "type": "boolean",
                },
                "hoist": {
                  "enum": [
                    "all",
                    "functions",
                    "never",
                  ],
                  "type": "string",
                },
                "ignoreFunctionTypeParameterNameValueShadow": {
                  "type": "boolean",
                },
                "ignoreOnInitialization": {
                  "type": "boolean",
                },
                "ignoreTypeValueShadow": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-this-alias": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowDestructuring": true,
            "allowedNames": [],
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow aliasing \`this\`",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/no-this-alias",
          },
          "messages": {
            "thisAssignment": "Unexpected aliasing of 'this' to local variable.",
            "thisDestructure": "Unexpected aliasing of members of 'this' to local variables.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowDestructuring": {
                  "description": "Whether to ignore destructurings, such as \`const { props, state } = this\`.",
                  "type": "boolean",
                },
                "allowedNames": {
                  "description": "Names to ignore, such as ["self"] for \`const self = this;\`.",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-throw-literal": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowThrowingAny": true,
            "allowThrowingUnknown": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow throwing literals as exceptions",
            "extendsBaseRule": true,
            "recommended": "strict",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-throw-literal",
          },
          "messages": {
            "object": "Expected an error object to be thrown.",
            "undef": "Do not throw undefined.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowThrowingAny": {
                  "type": "boolean",
                },
                "allowThrowingUnknown": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-type-alias": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowAliases": "never",
            "allowCallbacks": "never",
            "allowConditionalTypes": "never",
            "allowConstructors": "never",
            "allowGenerics": "never",
            "allowLiterals": "never",
            "allowMappedTypes": "never",
            "allowTupleTypes": "never",
          },
        ],
        "meta": {
          "deprecated": true,
          "docs": {
            "description": "Disallow type aliases",
            "url": "https://typescript-eslint.io/rules/no-type-alias",
          },
          "messages": {
            "noCompositionAlias": "{{typeName}} in {{compositionType}} types are not allowed.",
            "noTypeAlias": "Type {{alias}} are not allowed.",
          },
          "schema": [
            {
              "$defs": {
                "expandedOptions": {
                  "enum": [
                    "always",
                    "never",
                    "in-unions",
                    "in-intersections",
                    "in-unions-and-intersections",
                  ],
                  "type": "string",
                },
                "simpleOptions": {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
              },
              "additionalProperties": false,
              "properties": {
                "allowAliases": {
                  "$ref": "#/items/0/$defs/expandedOptions",
                  "description": "Whether to allow direct one-to-one type aliases.",
                },
                "allowCallbacks": {
                  "$ref": "#/items/0/$defs/simpleOptions",
                  "description": "Whether to allow type aliases for callbacks.",
                },
                "allowConditionalTypes": {
                  "$ref": "#/items/0/$defs/simpleOptions",
                  "description": "Whether to allow type aliases for conditional types.",
                },
                "allowConstructors": {
                  "$ref": "#/items/0/$defs/simpleOptions",
                  "description": "Whether to allow type aliases with constructors.",
                },
                "allowGenerics": {
                  "$ref": "#/items/0/$defs/simpleOptions",
                  "description": "Whether to allow type aliases with generic types.",
                },
                "allowLiterals": {
                  "$ref": "#/items/0/$defs/expandedOptions",
                  "description": "Whether to allow type aliases with object literal types.",
                },
                "allowMappedTypes": {
                  "$ref": "#/items/0/$defs/expandedOptions",
                  "description": "Whether to allow type aliases with mapped types.",
                },
                "allowTupleTypes": {
                  "$ref": "#/items/0/$defs/expandedOptions",
                  "description": "Whether to allow type aliases with tuple types.",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-unnecessary-boolean-literal-compare": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowComparingNullableBooleansToFalse": true,
            "allowComparingNullableBooleansToTrue": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow unnecessary equality comparisons against boolean literals",
            "recommended": "strict",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare",
          },
          "fixable": "code",
          "messages": {
            "comparingNullableToFalse": "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default.",
            "comparingNullableToTrueDirect": "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
            "comparingNullableToTrueNegated": "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
            "direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
            "negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowComparingNullableBooleansToFalse": {
                  "description": "Whether to allow comparisons between nullable boolean variables and \`false\`.",
                  "type": "boolean",
                },
                "allowComparingNullableBooleansToTrue": {
                  "description": "Whether to allow comparisons between nullable boolean variables and \`true\`.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-unnecessary-condition": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowConstantLoopConditions": false,
            "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow conditionals where the type is always truthy or always falsy",
            "recommended": "strict",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-unnecessary-condition",
          },
          "fixable": "code",
          "messages": {
            "alwaysFalsy": "Unnecessary conditional, value is always falsy.",
            "alwaysFalsyFunc": "This callback should return a conditional, but return is always falsy.",
            "alwaysNullish": "Unnecessary conditional, left-hand side of \`??\` operator is always \`null\` or \`undefined\`.",
            "alwaysTruthy": "Unnecessary conditional, value is always truthy.",
            "alwaysTruthyFunc": "This callback should return a conditional, but return is always truthy.",
            "literalBooleanExpression": "Unnecessary conditional, both sides of the expression are literal values.",
            "never": "Unnecessary conditional, value is \`never\`.",
            "neverNullish": "Unnecessary conditional, expected left-hand side of \`??\` operator to be possibly null or undefined.",
            "neverOptionalChain": "Unnecessary optional chain on a non-nullish value.",
            "noOverlapBooleanExpression": "Unnecessary conditional, the types have no overlap.",
            "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowConstantLoopConditions": {
                  "description": "Whether to ignore constant loop conditions, such as \`while (true)\`.",
                  "type": "boolean",
                },
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                  "description": "Whether to not error when running with a tsconfig that has strictNullChecks turned.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-unnecessary-qualifier": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow unnecessary namespace qualifiers",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier",
          },
          "fixable": "code",
          "messages": {
            "unnecessaryQualifier": "Qualifier is unnecessary since '{{ name }}' is in scope.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-unnecessary-type-arguments": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow type arguments that are equal to the default",
            "recommended": "strict",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments",
          },
          "fixable": "code",
          "messages": {
            "unnecessaryTypeParameter": "This is the default value for this type parameter, so it can be omitted.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-unnecessary-type-assertion": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "description": "Disallow type assertions that do not change the type of an expression",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion",
          },
          "fixable": "code",
          "messages": {
            "contextuallyUnnecessary": "This assertion is unnecessary since the receiver accepts the original type of the expression.",
            "unnecessaryAssertion": "This assertion is unnecessary since it does not change the type of the expression.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "typesToIgnore": {
                  "description": "A list of type names to ignore.",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-unnecessary-type-constraint": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow unnecessary constraints on generic types",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint",
          },
          "hasSuggestions": true,
          "messages": {
            "removeUnnecessaryConstraint": "Remove the unnecessary \`{{constraint}}\` constraint.",
            "unnecessaryConstraint": "Constraining the generic type \`{{name}}\` to \`{{constraint}}\` does nothing and is unnecessary.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-unsafe-argument": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow calling a function with a value with type \`any\`",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-unsafe-argument",
          },
          "messages": {
            "unsafeArgument": "Unsafe argument of type \`{{sender}}\` assigned to a parameter of type \`{{receiver}}\`.",
            "unsafeArraySpread": "Unsafe spread of an \`any\` array type.",
            "unsafeSpread": "Unsafe spread of an \`any\` type.",
            "unsafeTupleSpread": "Unsafe spread of a tuple type. The argument is of type \`{{sender}}\` and is assigned to a parameter of type \`{{receiver}}\`.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-unsafe-assignment": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow assigning a value with type \`any\` to variables and properties",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-unsafe-assignment",
          },
          "messages": {
            "anyAssignment": "Unsafe assignment of an \`any\` value.",
            "anyAssignmentThis": "Unsafe assignment of an \`any\` value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
            "unsafeArrayPattern": "Unsafe array destructuring of an \`any\` array value.",
            "unsafeArrayPatternFromTuple": "Unsafe array destructuring of a tuple element with an \`any\` value.",
            "unsafeArraySpread": "Unsafe spread of an \`any\` value in an array.",
            "unsafeAssignment": "Unsafe assignment of type {{sender}} to a variable of type {{receiver}}.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-unsafe-call": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow calling a value with type \`any\`",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-unsafe-call",
          },
          "messages": {
            "unsafeCall": "Unsafe call of an \`any\` typed value.",
            "unsafeCallThis": "Unsafe call of an \`any\` typed value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
            "unsafeNew": "Unsafe construction of an any type value.",
            "unsafeTemplateTag": "Unsafe any typed template tag.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-unsafe-declaration-merging": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow unsafe declaration merging",
            "recommended": "recommended",
            "requiresTypeChecking": false,
            "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging",
          },
          "messages": {
            "unsafeMerging": "Unsafe declaration merging between classes and interfaces.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-unsafe-enum-comparison": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow comparing an enum value with a non-enum value",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison",
          },
          "hasSuggestions": true,
          "messages": {
            "mismatchedCase": "The case statement does not have a shared enum type with the switch predicate.",
            "mismatchedCondition": "The two values in this comparison do not have a shared enum type.",
            "replaceValueWithEnum": "Replace with an enum value comparison.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-unsafe-member-access": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow member access on a value with type \`any\`",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-unsafe-member-access",
          },
          "messages": {
            "unsafeComputedMemberAccess": "Computed name {{property}} resolves to an any value.",
            "unsafeMemberExpression": "Unsafe member access {{property}} on an \`any\` value.",
            "unsafeThisMemberExpression": "Unsafe member access {{property}} on an \`any\` value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-unsafe-return": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow returning a value with type \`any\` from a function",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-unsafe-return",
          },
          "messages": {
            "unsafeReturn": "Unsafe return of an \`{{type}}\` typed value.",
            "unsafeReturnAssignment": "Unsafe return of type \`{{sender}}\` from function with return type \`{{receiver}}\`.",
            "unsafeReturnThis": "Unsafe return of an \`{{type}}\` typed value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-unsafe-unary-minus": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Require unary negation to take a number",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus",
          },
          "messages": {
            "unaryMinus": "Invalid type "{{type}}" of template literal expression.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-unused-expressions": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowShortCircuit": false,
            "allowTaggedTemplates": false,
            "allowTernary": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow unused expressions",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/no-unused-expressions",
          },
          "hasSuggestions": undefined,
          "messages": {
            "unusedExpression": "Expected an assignment or function call and instead saw an expression.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowShortCircuit": {
                  "default": false,
                  "type": "boolean",
                },
                "allowTaggedTemplates": {
                  "default": false,
                  "type": "boolean",
                },
                "allowTernary": {
                  "default": false,
                  "type": "boolean",
                },
                "enforceForJSX": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-unused-vars": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "description": "Disallow unused variables",
            "extendsBaseRule": true,
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/no-unused-vars",
          },
          "messages": {
            "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
          },
          "schema": [
            {
              "oneOf": [
                {
                  "enum": [
                    "all",
                    "local",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "args": {
                      "enum": [
                        "all",
                        "after-used",
                        "none",
                      ],
                      "type": "string",
                    },
                    "argsIgnorePattern": {
                      "type": "string",
                    },
                    "caughtErrors": {
                      "enum": [
                        "all",
                        "none",
                      ],
                      "type": "string",
                    },
                    "caughtErrorsIgnorePattern": {
                      "type": "string",
                    },
                    "destructuredArrayIgnorePattern": {
                      "type": "string",
                    },
                    "ignoreRestSiblings": {
                      "type": "boolean",
                    },
                    "vars": {
                      "enum": [
                        "all",
                        "local",
                      ],
                      "type": "string",
                    },
                    "varsIgnorePattern": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
          "type": "problem",
        },
      },
      "no-use-before-define": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowNamedExports": false,
            "classes": true,
            "enums": true,
            "functions": true,
            "ignoreTypeReferences": true,
            "typedefs": true,
            "variables": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow the use of variables before they are defined",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/no-use-before-define",
          },
          "messages": {
            "noUseBeforeDefine": "'{{name}}' was used before it was defined.",
          },
          "schema": [
            {
              "oneOf": [
                {
                  "enum": [
                    "nofunc",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowNamedExports": {
                      "type": "boolean",
                    },
                    "classes": {
                      "type": "boolean",
                    },
                    "enums": {
                      "type": "boolean",
                    },
                    "functions": {
                      "type": "boolean",
                    },
                    "ignoreTypeReferences": {
                      "type": "boolean",
                    },
                    "typedefs": {
                      "type": "boolean",
                    },
                    "variables": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
          "type": "problem",
        },
      },
      "no-useless-constructor": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow unnecessary constructors",
            "extendsBaseRule": true,
            "recommended": "strict",
            "url": "https://typescript-eslint.io/rules/no-useless-constructor",
          },
          "hasSuggestions": undefined,
          "messages": {
            "noUselessConstructor": "Useless constructor.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-useless-empty-export": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow empty exports that don't change anything in a module file",
            "url": "https://typescript-eslint.io/rules/no-useless-empty-export",
          },
          "fixable": "code",
          "hasSuggestions": false,
          "messages": {
            "uselessExport": "Empty export does nothing and can be removed.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-var-requires": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow \`require\` statements except in import statements",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/no-var-requires",
          },
          "messages": {
            "noVarReqs": "Require statement not part of import statement.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "non-nullable-type-assertion-style": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce non-null assertions over explicit type casts",
            "recommended": "stylistic",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style",
          },
          "fixable": "code",
          "messages": {
            "preferNonNullAssertion": "Use a ! assertion to more succinctly remove null and undefined from the type.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "object-curly-spacing": {
        "create": [Function],
        "defaultOptions": [
          "never",
        ],
        "meta": {
          "deprecated": true,
          "docs": {
            "description": "Enforce consistent spacing inside braces",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/object-curly-spacing",
          },
          "fixable": "whitespace",
          "messages": {
            "requireSpaceAfter": "A space is required after '{{token}}'.",
            "requireSpaceBefore": "A space is required before '{{token}}'.",
            "unexpectedSpaceAfter": "There should be no space after '{{token}}'.",
            "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
          },
          "replacedBy": [],
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "arraysInObjects": {
                  "type": "boolean",
                },
                "objectsInObjects": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "layout",
        },
      },
      "padding-line-between-statements": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Require or disallow padding lines between statements",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/padding-line-between-statements",
          },
          "fixable": "whitespace",
          "hasSuggestions": false,
          "messages": {
            "expectedBlankLine": "Expected blank line before this statement.",
            "unexpectedBlankLine": "Unexpected blank line before this statement.",
          },
          "schema": {
            "$defs": {
              "paddingType": {
                "enum": [
                  "any",
                  "never",
                  "always",
                ],
                "type": "string",
              },
              "statementType": {
                "anyOf": [
                  {
                    "enum": [
                      "*",
                      "block-like",
                      "exports",
                      "require",
                      "directive",
                      "expression",
                      "iife",
                      "multiline-block-like",
                      "multiline-expression",
                      "multiline-const",
                      "multiline-let",
                      "multiline-var",
                      "singleline-const",
                      "singleline-let",
                      "singleline-var",
                      "block",
                      "empty",
                      "function",
                      "break",
                      "case",
                      "class",
                      "const",
                      "continue",
                      "debugger",
                      "default",
                      "do",
                      "export",
                      "for",
                      "if",
                      "import",
                      "let",
                      "return",
                      "switch",
                      "throw",
                      "try",
                      "var",
                      "while",
                      "with",
                      "interface",
                      "type",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalItems": false,
                    "items": {
                      "enum": [
                        "*",
                        "block-like",
                        "exports",
                        "require",
                        "directive",
                        "expression",
                        "iife",
                        "multiline-block-like",
                        "multiline-expression",
                        "multiline-const",
                        "multiline-let",
                        "multiline-var",
                        "singleline-const",
                        "singleline-let",
                        "singleline-var",
                        "block",
                        "empty",
                        "function",
                        "break",
                        "case",
                        "class",
                        "const",
                        "continue",
                        "debugger",
                        "default",
                        "do",
                        "export",
                        "for",
                        "if",
                        "import",
                        "let",
                        "return",
                        "switch",
                        "throw",
                        "try",
                        "var",
                        "while",
                        "with",
                        "interface",
                        "type",
                      ],
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true,
                  },
                ],
              },
            },
            "additionalItems": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "blankLine": {
                  "$ref": "#/$defs/paddingType",
                },
                "next": {
                  "$ref": "#/$defs/statementType",
                },
                "prev": {
                  "$ref": "#/$defs/statementType",
                },
              },
              "required": [
                "blankLine",
                "prev",
                "next",
              ],
              "type": "object",
            },
            "type": "array",
          },
          "type": "layout",
        },
      },
      "parameter-properties": {
        "create": [Function],
        "defaultOptions": [
          {
            "allow": [],
            "prefer": "class-property",
          },
        ],
        "meta": {
          "docs": {
            "description": "Require or disallow parameter properties in class constructors",
            "url": "https://typescript-eslint.io/rules/parameter-properties",
          },
          "messages": {
            "preferClassProperty": "Property {{parameter}} should be declared as a class property.",
            "preferParameterProperty": "Property {{parameter}} should be declared as a parameter property.",
          },
          "schema": [
            {
              "$defs": {
                "modifier": {
                  "enum": [
                    "readonly",
                    "private",
                    "protected",
                    "public",
                    "private readonly",
                    "protected readonly",
                    "public readonly",
                  ],
                  "type": "string",
                },
              },
              "additionalProperties": false,
              "properties": {
                "allow": {
                  "items": {
                    "$ref": "#/items/0/$defs/modifier",
                  },
                  "type": "array",
                },
                "prefer": {
                  "enum": [
                    "class-property",
                    "parameter-property",
                  ],
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "prefer-as-const": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce the use of \`as const\` over literal type",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/prefer-as-const",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "preferConstAssertion": "Expected a \`const\` instead of a literal type assertion.",
            "variableConstAssertion": "Expected a \`const\` assertion instead of a literal type annotation.",
            "variableSuggest": "You should use \`as const\` instead of type annotation.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-destructuring": {
        "create": [Function],
        "defaultOptions": [
          {
            "AssignmentExpression": {
              "array": true,
              "object": true,
            },
            "VariableDeclarator": {
              "array": true,
              "object": true,
            },
          },
          {},
        ],
        "meta": {
          "docs": {
            "description": "Require destructuring from arrays and/or objects",
            "extendsBaseRule": true,
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/prefer-destructuring",
          },
          "fixable": "code",
          "hasSuggestions": undefined,
          "messages": {
            "preferDestructuring": "Use {{type}} destructuring.",
          },
          "schema": [
            {
              "oneOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "AssignmentExpression": {
                      "additionalProperties": false,
                      "properties": {
                        "array": {
                          "type": "boolean",
                        },
                        "object": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    "VariableDeclarator": {
                      "additionalProperties": false,
                      "properties": {
                        "array": {
                          "type": "boolean",
                        },
                        "object": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "array": {
                      "type": "boolean",
                    },
                    "object": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
            {
              "properties": {
                "enforceForDeclarationWithTypeAnnotation": {
                  "type": "boolean",
                },
                "enforceForRenamedProperties": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "prefer-enum-initializers": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Require each enum member value to be explicitly initialized",
            "url": "https://typescript-eslint.io/rules/prefer-enum-initializers",
          },
          "hasSuggestions": true,
          "messages": {
            "defineInitializer": "The value of the member '{{ name }}' should be explicitly defined.",
            "defineInitializerSuggestion": "Can be fixed to {{ name }} = {{ suggested }}",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-for-of": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce the use of \`for-of\` loop over the standard \`for\` loop where possible",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/prefer-for-of",
          },
          "messages": {
            "preferForOf": "Expected a \`for-of\` loop instead of a \`for\` loop with this simple iteration.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-function-type": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce using function types instead of interfaces with call signatures",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/prefer-function-type",
          },
          "fixable": "code",
          "messages": {
            "functionTypeOverCallableType": "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
            "unexpectedThisOnFunctionOnlyInterface": "\`this\` refers to the function type '{{ interfaceName }}', did you intend to use a generic \`this\` parameter like \`<Self>(this: Self, ...) => Self\` instead?",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-includes": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce \`includes\` method over \`indexOf\` method",
            "recommended": "strict",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/prefer-includes",
          },
          "fixable": "code",
          "messages": {
            "preferIncludes": "Use 'includes()' method instead.",
            "preferStringIncludes": "Use \`String#includes()\` method with a string instead.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-literal-enum-member": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowBitwiseExpressions": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require all enum members to be literal values",
            "recommended": "strict",
            "requiresTypeChecking": false,
            "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member",
          },
          "messages": {
            "notLiteral": "Explicit enum value must only be a literal value (string, number, boolean, etc).",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowBitwiseExpressions": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "prefer-namespace-keyword": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Require using \`namespace\` keyword over \`module\` keyword to declare custom TypeScript modules",
            "recommended": "stylistic",
            "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword",
          },
          "fixable": "code",
          "messages": {
            "useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-nullish-coalescing": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
            "ignoreConditionalTests": false,
            "ignoreMixedLogicalExpressions": false,
            "ignorePrimitives": {
              "bigint": false,
              "boolean": false,
              "number": false,
              "string": false,
            },
            "ignoreTernaryTests": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
            "recommended": "stylistic",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing",
          },
          "hasSuggestions": true,
          "messages": {
            "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
            "preferNullishOverOr": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
            "preferNullishOverTernary": "Prefer using nullish coalescing operator (\`??\`) instead of a ternary expression, as it is simpler to read.",
            "suggestNullish": "Fix to nullish coalescing operator (\`??\`).",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                  "type": "boolean",
                },
                "ignoreConditionalTests": {
                  "type": "boolean",
                },
                "ignoreMixedLogicalExpressions": {
                  "type": "boolean",
                },
                "ignorePrimitives": {
                  "oneOf": [
                    {
                      "properties": {
                        "bigint": {
                          "type": "boolean",
                        },
                        "boolean": {
                          "type": "boolean",
                        },
                        "number": {
                          "type": "boolean",
                        },
                        "string": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "enum": [
                        true,
                      ],
                      "type": "boolean",
                    },
                  ],
                },
                "ignoreTernaryTests": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "prefer-optional-chain": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": false,
            "checkAny": true,
            "checkBigInt": true,
            "checkBoolean": true,
            "checkNumber": true,
            "checkString": true,
            "checkUnknown": true,
            "requireNullish": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
            "recommended": "stylistic",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/prefer-optional-chain",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "optionalChainSuggest": "Change to an optional chain.",
            "preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": {
                  "description": "Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build.",
                  "type": "boolean",
                },
                "checkAny": {
                  "description": "Check operands that are typed as \`any\` when inspecting "loose boolean" operands.",
                  "type": "boolean",
                },
                "checkBigInt": {
                  "description": "Check operands that are typed as \`bigint\` when inspecting "loose boolean" operands.",
                  "type": "boolean",
                },
                "checkBoolean": {
                  "description": "Check operands that are typed as \`boolean\` when inspecting "loose boolean" operands.",
                  "type": "boolean",
                },
                "checkNumber": {
                  "description": "Check operands that are typed as \`number\` when inspecting "loose boolean" operands.",
                  "type": "boolean",
                },
                "checkString": {
                  "description": "Check operands that are typed as \`string\` when inspecting "loose boolean" operands.",
                  "type": "boolean",
                },
                "checkUnknown": {
                  "description": "Check operands that are typed as \`unknown\` when inspecting "loose boolean" operands.",
                  "type": "boolean",
                },
                "requireNullish": {
                  "description": "Skip operands that are not typed with \`null\` and/or \`undefined\` when inspecting "loose boolean" operands.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "prefer-readonly": {
        "create": [Function],
        "defaultOptions": [
          {
            "onlyInlineLambdas": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require private members to be marked as \`readonly\` if they're never modified outside of the constructor",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/prefer-readonly",
          },
          "fixable": "code",
          "messages": {
            "preferReadonly": "Member '{{name}}' is never reassigned; mark it as \`readonly\`.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "onlyInlineLambdas": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "prefer-readonly-parameter-types": {
        "create": [Function],
        "defaultOptions": [
          {
            "allow": [],
            "checkParameterProperties": true,
            "ignoreInferredTypes": false,
            "treatMethodsAsReadonly": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require function parameters to be typed as \`readonly\` to prevent accidental mutation of inputs",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types",
          },
          "messages": {
            "shouldBeReadonly": "Parameter should be a read only type.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allow": {
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "from": {
                            "enum": [
                              "file",
                            ],
                            "type": "string",
                          },
                          "name": {
                            "oneOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                          "path": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "from",
                          "name",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "from": {
                            "enum": [
                              "lib",
                            ],
                            "type": "string",
                          },
                          "name": {
                            "oneOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                        },
                        "required": [
                          "from",
                          "name",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "from": {
                            "enum": [
                              "package",
                            ],
                            "type": "string",
                          },
                          "name": {
                            "oneOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                          "package": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "from",
                          "name",
                          "package",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                },
                "checkParameterProperties": {
                  "type": "boolean",
                },
                "ignoreInferredTypes": {
                  "type": "boolean",
                },
                "treatMethodsAsReadonly": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "prefer-reduce-type-parameter": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce using type parameter when calling \`Array#reduce\` instead of casting",
            "recommended": "strict",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter",
          },
          "fixable": "code",
          "messages": {
            "preferTypeParameter": "Unnecessary cast: Array#reduce accepts a type parameter for the default value.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "prefer-regexp-exec": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce \`RegExp#exec\` over \`String#match\` if no global flag is provided",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/prefer-regexp-exec",
          },
          "fixable": "code",
          "messages": {
            "regExpExecOverStringMatch": "Use the \`RegExp#exec()\` method instead.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-return-this-type": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce that \`this\` is used when only \`this\` type is returned",
            "recommended": "strict",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/prefer-return-this-type",
          },
          "fixable": "code",
          "messages": {
            "useThisType": "Use \`this\` type instead.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-string-starts-ends-with": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce using \`String#startsWith\` and \`String#endsWith\` over other equivalent methods of checking substrings",
            "recommended": "stylistic",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with",
          },
          "fixable": "code",
          "messages": {
            "preferEndsWith": "Use the 'String#endsWith' method instead.",
            "preferStartsWith": "Use 'String#startsWith' method instead.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-ts-expect-error": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Enforce using \`@ts-expect-error\` over \`@ts-ignore\`",
            "recommended": "strict",
            "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error",
          },
          "fixable": "code",
          "messages": {
            "preferExpectErrorComment": "Use "@ts-expect-error" to ensure an error is actually being suppressed.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "promise-function-async": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowAny": true,
            "allowedPromiseNames": [],
            "checkArrowFunctions": true,
            "checkFunctionDeclarations": true,
            "checkFunctionExpressions": true,
            "checkMethodDeclarations": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require any function or method that returns a Promise to be marked async",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/promise-function-async",
          },
          "fixable": "code",
          "messages": {
            "missingAsync": "Functions that return promises must be async.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowAny": {
                  "description": "Whether to consider \`any\` and \`unknown\` to be Promises.",
                  "type": "boolean",
                },
                "allowedPromiseNames": {
                  "description": "Any extra names of classes or interfaces to be considered Promises.",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "checkArrowFunctions": {
                  "type": "boolean",
                },
                "checkFunctionDeclarations": {
                  "type": "boolean",
                },
                "checkFunctionExpressions": {
                  "type": "boolean",
                },
                "checkMethodDeclarations": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "quotes": {
        "create": [Function],
        "defaultOptions": [
          "double",
          {
            "allowTemplateLiterals": false,
            "avoidEscape": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce the consistent use of either backticks, double, or single quotes",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/quotes",
          },
          "fixable": "code",
          "hasSuggestions": undefined,
          "messages": {
            "wrongQuotes": "Strings must use {{description}}.",
          },
          "schema": [
            {
              "enum": [
                "single",
                "double",
                "backtick",
              ],
            },
            {
              "anyOf": [
                {
                  "enum": [
                    "avoid-escape",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowTemplateLiterals": {
                      "type": "boolean",
                    },
                    "avoidEscape": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
          "type": "layout",
        },
      },
      "require-array-sort-compare": {
        "create": [Function],
        "defaultOptions": [
          {
            "ignoreStringArrays": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require \`Array#sort\` calls to always provide a \`compareFunction\`",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/require-array-sort-compare",
          },
          "messages": {
            "requireCompare": "Require 'compare' argument.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreStringArrays": {
                  "description": "Whether to ignore arrays in which all elements are strings.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "require-await": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "description": "Disallow async functions which have no \`await\` expression",
            "extendsBaseRule": true,
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/require-await",
          },
          "messages": {
            "missingAwait": "{{name}} has no 'await' expression.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "restrict-plus-operands": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowAny": true,
            "allowBoolean": true,
            "allowNullish": true,
            "allowNumberAndString": true,
            "allowRegExp": true,
            "skipCompoundAssignments": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require both operands of addition to be the same type and be \`bigint\`, \`number\`, or \`string\`",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/restrict-plus-operands",
          },
          "messages": {
            "bigintAndNumber": "Numeric '+' operations must either be both bigints or both numbers. Got \`{{left}}\` + \`{{right}}\`.",
            "invalid": "Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got \`{{type}}\`.",
            "mismatched": "Operands of '+' operations must be a number or {{stringLike}}. Got \`{{left}}\` + \`{{right}}\`.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowAny": {
                  "description": "Whether to allow \`any\` typed values.",
                  "type": "boolean",
                },
                "allowBoolean": {
                  "description": "Whether to allow \`boolean\` typed values.",
                  "type": "boolean",
                },
                "allowNullish": {
                  "description": "Whether to allow potentially \`null\` or \`undefined\` typed values.",
                  "type": "boolean",
                },
                "allowNumberAndString": {
                  "description": "Whether to allow \`bigint\`/\`number\` typed values and \`string\` typed values to be added together.",
                  "type": "boolean",
                },
                "allowRegExp": {
                  "description": "Whether to allow \`regexp\` typed values.",
                  "type": "boolean",
                },
                "skipCompoundAssignments": {
                  "description": "Whether to skip compound assignments such as \`+=\`.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "restrict-template-expressions": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowAny": true,
            "allowBoolean": true,
            "allowNullish": true,
            "allowNumber": true,
            "allowRegExp": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce template literal expressions to be of \`string\` type",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/restrict-template-expressions",
          },
          "messages": {
            "invalidType": "Invalid type "{{type}}" of template literal expression.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowAny": {
                  "description": "Whether to allow \`any\` typed values in template expressions.",
                  "type": "boolean",
                },
                "allowBoolean": {
                  "description": "Whether to allow \`boolean\` typed values in template expressions.",
                  "type": "boolean",
                },
                "allowNever": {
                  "description": "Whether to allow \`never\` typed values in template expressions.",
                  "type": "boolean",
                },
                "allowNullish": {
                  "description": "Whether to allow \`nullish\` typed values in template expressions.",
                  "type": "boolean",
                },
                "allowNumber": {
                  "description": "Whether to allow \`number\` typed values in template expressions.",
                  "type": "boolean",
                },
                "allowRegExp": {
                  "description": "Whether to allow \`regexp\` typed values in template expressions.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "return-await": {
        "create": [Function],
        "defaultOptions": [
          "in-try-catch",
        ],
        "meta": {
          "docs": {
            "description": "Enforce consistent returning of awaited values",
            "extendsBaseRule": "no-return-await",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/return-await",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "disallowedPromiseAwait": "Returning an awaited promise is not allowed in this context.",
            "nonPromiseAwait": "Returning an awaited value that is not a promise is not allowed.",
            "requiredPromiseAwait": "Returning an awaited promise is required in this context.",
          },
          "schema": [
            {
              "enum": [
                "in-try-catch",
                "always",
                "never",
              ],
              "type": "string",
            },
          ],
          "type": "problem",
        },
      },
      "semi": {
        "create": [Function],
        "defaultOptions": [
          "always",
          {
            "beforeStatementContinuationChars": "any",
            "omitLastInOneLineBlock": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require or disallow semicolons instead of ASI",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/semi",
          },
          "fixable": "code",
          "hasSuggestions": undefined,
          "messages": {
            "extraSemi": "Extra semicolon.",
            "missingSemi": "Missing semicolon.",
          },
          "schema": {
            "anyOf": [
              {
                "items": [
                  {
                    "enum": [
                      "never",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "beforeStatementContinuationChars": {
                        "enum": [
                          "always",
                          "any",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "maxItems": 2,
                "minItems": 0,
                "type": "array",
              },
              {
                "items": [
                  {
                    "enum": [
                      "always",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "omitLastInOneLineBlock": {
                        "type": "boolean",
                      },
                      "omitLastInOneLineClassBody": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "maxItems": 2,
                "minItems": 0,
                "type": "array",
              },
            ],
          },
          "type": "layout",
        },
      },
      "sort-type-constituents": {
        "create": [Function],
        "defaultOptions": [
          {
            "checkIntersections": true,
            "checkUnions": true,
            "groupOrder": [
              "named",
              "keyword",
              "operator",
              "literal",
              "function",
              "import",
              "conditional",
              "object",
              "tuple",
              "intersection",
              "union",
              "nullish",
            ],
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
            "url": "https://typescript-eslint.io/rules/sort-type-constituents",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "notSorted": "{{type}} type constituents must be sorted.",
            "notSortedNamed": "{{type}} type {{name}} constituents must be sorted.",
            "suggestFix": "Sort constituents of type (removes all comments).",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "checkIntersections": {
                  "description": "Whether to check intersection types.",
                  "type": "boolean",
                },
                "checkUnions": {
                  "description": "Whether to check union types.",
                  "type": "boolean",
                },
                "groupOrder": {
                  "description": "Ordering of the groups.",
                  "items": {
                    "enum": [
                      "conditional",
                      "function",
                      "import",
                      "intersection",
                      "keyword",
                      "nullish",
                      "literal",
                      "named",
                      "object",
                      "operator",
                      "tuple",
                      "union",
                    ],
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "space-before-blocks": {
        "create": [Function],
        "defaultOptions": [
          "always",
        ],
        "meta": {
          "docs": {
            "description": "Enforce consistent spacing before blocks",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/space-before-blocks",
          },
          "fixable": "whitespace",
          "hasSuggestions": undefined,
          "messages": {
            "missingSpace": "Missing space before opening brace.",
            "unexpectedSpace": "Unexpected space before opening brace.",
          },
          "schema": [
            {
              "oneOf": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "classes": {
                      "enum": [
                        "always",
                        "never",
                        "off",
                      ],
                    },
                    "functions": {
                      "enum": [
                        "always",
                        "never",
                        "off",
                      ],
                    },
                    "keywords": {
                      "enum": [
                        "always",
                        "never",
                        "off",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
          "type": "layout",
        },
      },
      "space-before-function-paren": {
        "create": [Function],
        "defaultOptions": [
          "always",
        ],
        "meta": {
          "docs": {
            "description": "Enforce consistent spacing before function parenthesis",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/space-before-function-paren",
          },
          "fixable": "whitespace",
          "messages": {
            "missing": "Missing space before function parentheses.",
            "unexpected": "Unexpected space before function parentheses.",
          },
          "schema": [
            {
              "oneOf": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "anonymous": {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                      "type": "string",
                    },
                    "asyncArrow": {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                      "type": "string",
                    },
                    "named": {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
          "type": "layout",
        },
      },
      "space-infix-ops": {
        "create": [Function],
        "defaultOptions": [
          {
            "int32Hint": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require spacing around infix operators",
            "extendsBaseRule": true,
            "url": "https://typescript-eslint.io/rules/space-infix-ops",
          },
          "fixable": "whitespace",
          "hasSuggestions": undefined,
          "messages": {
            "missingSpace": "Operator '{{operator}}' must be spaced.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "int32Hint": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "layout",
        },
      },
      "strict-boolean-expressions": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowAny": false,
            "allowNullableBoolean": false,
            "allowNullableEnum": false,
            "allowNullableNumber": false,
            "allowNullableObject": true,
            "allowNullableString": false,
            "allowNumber": true,
            "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
            "allowString": true,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow certain types in boolean expressions",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/strict-boolean-expressions",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "messages": {
            "conditionErrorAny": "Unexpected any value in conditional. An explicit comparison or type cast is required.",
            "conditionErrorNullableBoolean": "Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.",
            "conditionErrorNullableEnum": "Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
            "conditionErrorNullableNumber": "Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
            "conditionErrorNullableObject": "Unexpected nullable object value in conditional. An explicit null check is required.",
            "conditionErrorNullableString": "Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.",
            "conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
            "conditionErrorNumber": "Unexpected number value in conditional. An explicit zero/NaN check is required.",
            "conditionErrorObject": "Unexpected object value in conditional. The condition is always true.",
            "conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
            "conditionErrorString": "Unexpected string value in conditional. An explicit empty string check is required.",
            "conditionFixCastBoolean": "Explicitly cast value to a boolean (\`Boolean(value)\`)",
            "conditionFixCompareEmptyString": "Change condition to check for empty string (\`value !== ""\`)",
            "conditionFixCompareFalse": "Change condition to check if false (\`value === false\`)",
            "conditionFixCompareNaN": "Change condition to check for NaN (\`!Number.isNaN(value)\`)",
            "conditionFixCompareNullish": "Change condition to check for null/undefined (\`value != null\`)",
            "conditionFixCompareStringLength": "Change condition to check string's length (\`value.length !== 0\`)",
            "conditionFixCompareTrue": "Change condition to check if true (\`value === true\`)",
            "conditionFixCompareZero": "Change condition to check for 0 (\`value !== 0\`)",
            "conditionFixDefaultEmptyString": "Explicitly treat nullish value the same as an empty string (\`value ?? ""\`)",
            "conditionFixDefaultFalse": "Explicitly treat nullish value the same as false (\`value ?? false\`)",
            "conditionFixDefaultZero": "Explicitly treat nullish value the same as 0 (\`value ?? 0\`)",
            "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowAny": {
                  "type": "boolean",
                },
                "allowNullableBoolean": {
                  "type": "boolean",
                },
                "allowNullableEnum": {
                  "type": "boolean",
                },
                "allowNullableNumber": {
                  "type": "boolean",
                },
                "allowNullableObject": {
                  "type": "boolean",
                },
                "allowNullableString": {
                  "type": "boolean",
                },
                "allowNumber": {
                  "type": "boolean",
                },
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                  "type": "boolean",
                },
                "allowString": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "switch-exhaustiveness-check": {
        "create": [Function],
        "defaultOptions": [
          {
            "requireDefaultForNonUnion": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require switch-case statements to be exhaustive",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check",
          },
          "hasSuggestions": true,
          "messages": {
            "addMissingCases": "Add branches for missing cases.",
            "switchIsNotExhaustive": "Switch is not exhaustive. Cases not matched: {{missingBranches}}",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "requireDefaultForNonUnion": {
                  "description": "If 'true', require a 'default' clause for switches on non-union types.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "triple-slash-reference": {
        "create": [Function],
        "defaultOptions": [
          {
            "lib": "always",
            "path": "never",
            "types": "prefer-import",
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
            "recommended": "recommended",
            "url": "https://typescript-eslint.io/rules/triple-slash-reference",
          },
          "messages": {
            "tripleSlashReference": "Do not use a triple slash reference for {{module}}, use \`import\` style instead.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "lib": {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                "path": {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                "types": {
                  "enum": [
                    "always",
                    "never",
                    "prefer-import",
                  ],
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "type-annotation-spacing": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "description": "Require consistent spacing around type annotations",
            "url": "https://typescript-eslint.io/rules/type-annotation-spacing",
          },
          "fixable": "whitespace",
          "messages": {
            "expectedSpaceAfter": "Expected a space after the '{{type}}'.",
            "expectedSpaceBefore": "Expected a space before the '{{type}}'.",
            "unexpectedSpaceAfter": "Unexpected space after the '{{type}}'.",
            "unexpectedSpaceBefore": "Unexpected space before the '{{type}}'.",
            "unexpectedSpaceBetween": "Unexpected space between the '{{previousToken}}' and the '{{type}}'.",
          },
          "schema": [
            {
              "$defs": {
                "spacingConfig": {
                  "additionalProperties": false,
                  "properties": {
                    "after": {
                      "type": "boolean",
                    },
                    "before": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              },
              "additionalProperties": false,
              "properties": {
                "after": {
                  "type": "boolean",
                },
                "before": {
                  "type": "boolean",
                },
                "overrides": {
                  "additionalProperties": false,
                  "properties": {
                    "arrow": {
                      "$ref": "#/items/0/$defs/spacingConfig",
                    },
                    "colon": {
                      "$ref": "#/items/0/$defs/spacingConfig",
                    },
                    "parameter": {
                      "$ref": "#/items/0/$defs/spacingConfig",
                    },
                    "property": {
                      "$ref": "#/items/0/$defs/spacingConfig",
                    },
                    "returnType": {
                      "$ref": "#/items/0/$defs/spacingConfig",
                    },
                    "variable": {
                      "$ref": "#/items/0/$defs/spacingConfig",
                    },
                  },
                  "type": "object",
                },
              },
              "type": "object",
            },
          ],
          "type": "layout",
        },
      },
      "typedef": {
        "create": [Function],
        "defaultOptions": [
          {
            "arrayDestructuring": false,
            "arrowParameter": false,
            "memberVariableDeclaration": false,
            "objectDestructuring": false,
            "parameter": false,
            "propertyDeclaration": false,
            "variableDeclaration": false,
            "variableDeclarationIgnoreFunction": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Require type annotations in certain places",
            "url": "https://typescript-eslint.io/rules/typedef",
          },
          "messages": {
            "expectedTypedef": "Expected a type annotation.",
            "expectedTypedefNamed": "Expected {{name}} to have a type annotation.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "arrayDestructuring": {
                  "type": "boolean",
                },
                "arrowParameter": {
                  "type": "boolean",
                },
                "memberVariableDeclaration": {
                  "type": "boolean",
                },
                "objectDestructuring": {
                  "type": "boolean",
                },
                "parameter": {
                  "type": "boolean",
                },
                "propertyDeclaration": {
                  "type": "boolean",
                },
                "variableDeclaration": {
                  "type": "boolean",
                },
                "variableDeclarationIgnoreFunction": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "unbound-method": {
        "create": [Function],
        "defaultOptions": [
          {
            "ignoreStatic": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Enforce unbound methods are called with their expected scope",
            "recommended": "recommended",
            "requiresTypeChecking": true,
            "url": "https://typescript-eslint.io/rules/unbound-method",
          },
          "messages": {
            "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.",
            "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.
If your function does not access \`this\`, you can annotate it with \`this: void\`, or consider using an arrow function instead.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreStatic": {
                  "description": "Whether to skip checking whether \`static\` methods are correctly bound.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "unified-signatures": {
        "create": [Function],
        "defaultOptions": [
          {
            "ignoreDifferentlyNamedParameters": false,
          },
        ],
        "meta": {
          "docs": {
            "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
            "recommended": "strict",
            "url": "https://typescript-eslint.io/rules/unified-signatures",
          },
          "messages": {
            "omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
            "omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
            "singleParameterDifference": "{{failureStringStart}} taking \`{{type1}} | {{type2}}\`.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreDifferentlyNamedParameters": {
                  "description": "Whether two parameters with different names at the same index should be considered different even if their types are the same.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
    },
  },
  "import": {
    "configs": {
      "electron": {
        "settings": {
          "import/core-modules": [
            "electron",
          ],
        },
      },
      "errors": {
        "plugins": [
          "import",
        ],
        "rules": {
          "import/default": 2,
          "import/export": 2,
          "import/named": 2,
          "import/namespace": 2,
          "import/no-unresolved": 2,
        },
      },
      "react": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true,
          },
        },
        "settings": {
          "import/extensions": [
            ".js",
            ".jsx",
          ],
        },
      },
      "react-native": {
        "settings": {
          "import/resolver": {
            "node": {
              "extensions": [
                ".js",
                ".web.js",
                ".ios.js",
                ".android.js",
              ],
            },
          },
        },
      },
      "recommended": {
        "parserOptions": {
          "ecmaVersion": 2018,
          "sourceType": "module",
        },
        "plugins": [
          "import",
        ],
        "rules": {
          "import/default": "error",
          "import/export": "error",
          "import/named": "error",
          "import/namespace": "error",
          "import/no-duplicates": "warn",
          "import/no-named-as-default": "warn",
          "import/no-named-as-default-member": "warn",
          "import/no-unresolved": "error",
        },
      },
      "stage-0": {
        "plugins": [
          "import",
        ],
        "rules": {
          "import/no-deprecated": 1,
        },
      },
      "typescript": {
        "rules": {
          "import/named": "off",
        },
        "settings": {
          "import/extensions": [
            ".ts",
            ".cts",
            ".mts",
            ".tsx",
            ".js",
            ".jsx",
          ],
          "import/external-module-folders": [
            "node_modules",
            "node_modules/@types",
          ],
          "import/parsers": {
            "@typescript-eslint/parser": [
              ".ts",
              ".cts",
              ".mts",
              ".tsx",
            ],
          },
          "import/resolver": {
            "node": {
              "extensions": [
                ".ts",
                ".cts",
                ".mts",
                ".tsx",
                ".js",
                ".jsx",
              ],
            },
          },
        },
      },
      "warnings": {
        "plugins": [
          "import",
        ],
        "rules": {
          "import/no-duplicates": 1,
          "import/no-named-as-default": 1,
          "import/no-named-as-default-member": 1,
        },
      },
    },
    "rules": {
      "consistent-type-specifier-style": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Enforce or ban the use of inline type-only markers for named imports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/consistent-type-specifier-style.md",
          },
          "fixable": "code",
          "schema": [
            {
              "default": "prefer-inline",
              "enum": [
                "prefer-inline",
                "prefer-top-level",
              ],
              "type": "string",
            },
          ],
          "type": "suggestion",
        },
      },
      "default": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Ensure a default export is present, given a default import.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/default.md",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "dynamic-import-chunkname": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/dynamic-import-chunkname.md",
          },
          "schema": [
            {
              "properties": {
                "importFunctions": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "webpackChunknameFormat": {
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "export": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid any invalid exports, i.e. re-export of the same name.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/export.md",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "exports-last": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Ensure all exports appear after other statements.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/exports-last.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "extensions": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Ensure consistent use of file extension within the import path.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/extensions.md",
          },
          "schema": {
            "anyOf": [
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "always",
                      "ignorePackages",
                      "never",
                    ],
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "always",
                      "ignorePackages",
                      "never",
                    ],
                  },
                  {
                    "properties": {
                      "ignorePackages": {
                        "type": "boolean",
                      },
                      "pattern": {
                        "patternProperties": {
                          ".*": {
                            "enum": [
                              "always",
                              "ignorePackages",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "properties": {
                      "ignorePackages": {
                        "type": "boolean",
                      },
                      "pattern": {
                        "patternProperties": {
                          ".*": {
                            "enum": [
                              "always",
                              "ignorePackages",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "patternProperties": {
                      ".*": {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "always",
                      "ignorePackages",
                      "never",
                    ],
                  },
                  {
                    "patternProperties": {
                      ".*": {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            ],
          },
          "type": "suggestion",
        },
      },
      "first": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Ensure all imports appear before other statements.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/first.md",
          },
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "absolute-first",
                "disable-absolute-first",
              ],
              "type": "string",
            },
          ],
          "type": "suggestion",
        },
      },
      "group-exports": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Prefer named exports to be grouped together in a single export declaration",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/group-exports.md",
          },
          "type": "suggestion",
        },
      },
      "imports-first": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "category": "Style guide",
            "description": "Replaced by \`import/first\`.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md",
          },
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "absolute-first",
                "disable-absolute-first",
              ],
              "type": "string",
            },
          ],
          "type": "suggestion",
        },
      },
      "max-dependencies": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Enforce the maximum number of dependencies a module can have.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/max-dependencies.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreTypeImports": {
                  "type": "boolean",
                },
                "max": {
                  "type": "number",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "named": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Ensure named imports correspond to a named export in the remote file.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/named.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "commonjs": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "namespace": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/namespace.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowComputed": {
                  "default": false,
                  "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "newline-after-import": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Enforce a newline after import statements.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/newline-after-import.md",
          },
          "fixable": "whitespace",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "considerComments": {
                  "type": "boolean",
                },
                "count": {
                  "minimum": 1,
                  "type": "integer",
                },
                "exactCount": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "layout",
        },
      },
      "no-absolute-path": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid import of modules using absolute paths.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-absolute-path.md",
          },
          "fixable": "code",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "amd": {
                  "type": "boolean",
                },
                "commonjs": {
                  "type": "boolean",
                },
                "esmodule": {
                  "type": "boolean",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-amd": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Module systems",
            "description": "Forbid AMD \`require\` and \`define\` calls.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-amd.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-anonymous-default-export": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid anonymous values as default exports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-anonymous-default-export.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowAnonymousClass": {
                  "description": "If \`false\`, will report default export of an anonymous class",
                  "type": "boolean",
                },
                "allowAnonymousFunction": {
                  "description": "If \`false\`, will report default export of an anonymous function",
                  "type": "boolean",
                },
                "allowArray": {
                  "description": "If \`false\`, will report default export of an array",
                  "type": "boolean",
                },
                "allowArrowFunction": {
                  "description": "If \`false\`, will report default export of an arrow function",
                  "type": "boolean",
                },
                "allowCallExpression": {
                  "description": "If \`false\`, will report default export of a function call",
                  "type": "boolean",
                },
                "allowLiteral": {
                  "description": "If \`false\`, will report default export of a literal",
                  "type": "boolean",
                },
                "allowNew": {
                  "description": "If \`false\`, will report default export of a class instantiation",
                  "type": "boolean",
                },
                "allowObject": {
                  "description": "If \`false\`, will report default export of an object expression",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-commonjs": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Module systems",
            "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-commonjs.md",
          },
          "schema": {
            "anyOf": [
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "allow-primitive-modules",
                    ],
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowConditionalRequire": {
                        "type": "boolean",
                      },
                      "allowPrimitiveModules": {
                        "type": "boolean",
                      },
                      "allowRequire": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            ],
          },
          "type": "suggestion",
        },
      },
      "no-cycle": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid a module from importing a module with a dependency path back to itself.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-cycle.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowUnsafeDynamicCyclicDependency": {
                  "default": false,
                  "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                  "type": "boolean",
                },
                "amd": {
                  "type": "boolean",
                },
                "commonjs": {
                  "type": "boolean",
                },
                "esmodule": {
                  "type": "boolean",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
                "ignoreExternal": {
                  "default": false,
                  "description": "ignore external modules",
                  "type": "boolean",
                },
                "maxDepth": {
                  "anyOf": [
                    {
                      "description": "maximum dependency depth to traverse",
                      "minimum": 1,
                      "type": "integer",
                    },
                    {
                      "enum": [
                        "∞",
                      ],
                      "type": "string",
                    },
                  ],
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-default-export": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid default exports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-default-export.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-deprecated": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-deprecated.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-duplicates": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid repeated import of the same module in multiple places.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-duplicates.md",
          },
          "fixable": "code",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "considerQueryString": {
                  "type": "boolean",
                },
                "prefer-inline": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-dynamic-require": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid \`require()\` calls with expressions.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-dynamic-require.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "esmodule": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-empty-named-blocks": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid empty named import blocks.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-empty-named-blocks.md",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-extraneous-dependencies": {
        "Program:exit": [Function],
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid the use of extraneous packages.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-extraneous-dependencies.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "bundledDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
                "devDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
                "includeInternal": {
                  "type": [
                    "boolean",
                  ],
                },
                "includeTypes": {
                  "type": [
                    "boolean",
                  ],
                },
                "optionalDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
                "packageDir": {
                  "type": [
                    "string",
                    "array",
                  ],
                },
                "peerDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-import-module-exports": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Module systems",
            "description": "Forbid import statements with CommonJS module.exports.",
            "recommended": true,
          },
          "fixable": "code",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "exceptions": {
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-internal-modules": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid importing the submodules of other modules.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-internal-modules.md",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "forbid": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
          "type": "suggestion",
        },
      },
      "no-mutable-exports": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-mutable-exports.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-named-as-default": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid use of exported name as identifier of default export.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-named-as-default.md",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-named-as-default-member": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid use of exported name as property of default export.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-named-as-default-member.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-named-default": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid named default exports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-named-default.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-named-export": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid named exports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-named-export.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-namespace": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-namespace.md",
          },
          "fixable": "code",
          "schema": [
            {
              "properties": {
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-nodejs-modules": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Module systems",
            "description": "Forbid Node.js builtin modules.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-nodejs-modules.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allow": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-relative-packages": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid importing packages through relative paths.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-relative-packages.md",
          },
          "fixable": "code",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "amd": {
                  "type": "boolean",
                },
                "commonjs": {
                  "type": "boolean",
                },
                "esmodule": {
                  "type": "boolean",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-relative-parent-imports": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid importing modules from parent directories.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-relative-parent-imports.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "amd": {
                  "type": "boolean",
                },
                "commonjs": {
                  "type": "boolean",
                },
                "esmodule": {
                  "type": "boolean",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-restricted-paths": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Enforce which files can be imported in a given folder.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-restricted-paths.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "basePath": {
                  "type": "string",
                },
                "zones": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "except": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "from": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "minLength": 1,
                            "type": "array",
                            "uniqueItems": true,
                          },
                        ],
                      },
                      "message": {
                        "type": "string",
                      },
                      "target": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "minLength": 1,
                            "type": "array",
                            "uniqueItems": true,
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                  "minItems": 1,
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-self-import": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid a module from importing itself.",
            "recommended": true,
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-self-import.md",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-unassigned-import": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid unassigned imports",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-unassigned-import.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allow": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "devDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
                "optionalDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
                "peerDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-unresolved": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Ensure imports point to a file/module that can be resolved.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-unresolved.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "amd": {
                  "type": "boolean",
                },
                "caseSensitive": {
                  "default": true,
                  "type": "boolean",
                },
                "caseSensitiveStrict": {
                  "default": false,
                  "type": "boolean",
                },
                "commonjs": {
                  "type": "boolean",
                },
                "esmodule": {
                  "type": "boolean",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-unused-modules": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid modules without exports, or exports without matching import in another module.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-unused-modules.md",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "properties": {
                    "src": {
                      "minItems": 1,
                    },
                    "unusedExports": {
                      "enum": [
                        true,
                      ],
                    },
                  },
                  "required": [
                    "unusedExports",
                  ],
                },
                {
                  "properties": {
                    "missingExports": {
                      "enum": [
                        true,
                      ],
                    },
                  },
                  "required": [
                    "missingExports",
                  ],
                },
              ],
              "properties": {
                "ignoreExports": {
                  "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                  "items": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "missingExports": {
                  "description": "report modules without any exports",
                  "type": "boolean",
                },
                "src": {
                  "description": "files/paths to be analyzed (only for unused exports)",
                  "items": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "unusedExports": {
                  "description": "report exports without any usage",
                  "type": "boolean",
                },
              },
            },
          ],
          "type": "suggestion",
        },
      },
      "no-useless-path-segments": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid unnecessary path segments in import and require statements.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-useless-path-segments.md",
          },
          "fixable": "code",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "commonjs": {
                  "type": "boolean",
                },
                "noUselessIndex": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-webpack-loader-syntax": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid webpack loader syntax in imports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-webpack-loader-syntax.md",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "order": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Enforce a convention in module import order.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/order.md",
          },
          "fixable": "code",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "alphabetize": {
                  "additionalProperties": false,
                  "properties": {
                    "caseInsensitive": {
                      "default": false,
                      "type": "boolean",
                    },
                    "order": {
                      "default": "ignore",
                      "enum": [
                        "ignore",
                        "asc",
                        "desc",
                      ],
                    },
                    "orderImportKind": {
                      "default": "ignore",
                      "enum": [
                        "ignore",
                        "asc",
                        "desc",
                      ],
                    },
                  },
                  "type": "object",
                },
                "distinctGroup": {
                  "default": true,
                  "type": "boolean",
                },
                "groups": {
                  "type": "array",
                },
                "newlines-between": {
                  "enum": [
                    "ignore",
                    "always",
                    "always-and-inside-groups",
                    "never",
                  ],
                },
                "pathGroups": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "group": {
                        "enum": [
                          "builtin",
                          "external",
                          "internal",
                          "unknown",
                          "parent",
                          "sibling",
                          "index",
                          "object",
                          "type",
                        ],
                        "type": "string",
                      },
                      "pattern": {
                        "type": "string",
                      },
                      "patternOptions": {
                        "type": "object",
                      },
                      "position": {
                        "enum": [
                          "after",
                          "before",
                        ],
                        "type": "string",
                      },
                    },
                    "required": [
                      "pattern",
                      "group",
                    ],
                    "type": "object",
                  },
                  "type": "array",
                },
                "pathGroupsExcludedImportTypes": {
                  "type": "array",
                },
                "warnOnUnassignedImports": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "prefer-default-export": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Prefer a default export if module exports a single name or multiple names.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/prefer-default-export.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "target": {
                  "default": "single",
                  "enum": [
                    "single",
                    "any",
                  ],
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "unambiguous": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Module systems",
            "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/unambiguous.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
    },
  },
  "jest": {
    "configs": {
      "all": {
        "env": {
          "jest/globals": true,
        },
        "plugins": [
          "jest",
        ],
        "rules": {
          "jest/consistent-test-it": "error",
          "jest/expect-expect": "error",
          "jest/max-nested-describe": "error",
          "jest/no-alias-methods": "error",
          "jest/no-commented-out-tests": "error",
          "jest/no-conditional-expect": "error",
          "jest/no-deprecated-functions": "error",
          "jest/no-disabled-tests": "error",
          "jest/no-done-callback": "error",
          "jest/no-duplicate-hooks": "error",
          "jest/no-export": "error",
          "jest/no-focused-tests": "error",
          "jest/no-hooks": "error",
          "jest/no-identical-title": "error",
          "jest/no-if": "error",
          "jest/no-interpolation-in-snapshots": "error",
          "jest/no-jasmine-globals": "error",
          "jest/no-jest-import": "error",
          "jest/no-large-snapshots": "error",
          "jest/no-mocks-import": "error",
          "jest/no-restricted-matchers": "error",
          "jest/no-standalone-expect": "error",
          "jest/no-test-prefixes": "error",
          "jest/no-test-return-statement": "error",
          "jest/prefer-called-with": "error",
          "jest/prefer-comparison-matcher": "error",
          "jest/prefer-equality-matcher": "error",
          "jest/prefer-expect-assertions": "error",
          "jest/prefer-expect-resolves": "error",
          "jest/prefer-hooks-on-top": "error",
          "jest/prefer-lowercase-title": "error",
          "jest/prefer-spy-on": "error",
          "jest/prefer-strict-equal": "error",
          "jest/prefer-to-be": "error",
          "jest/prefer-to-contain": "error",
          "jest/prefer-to-have-length": "error",
          "jest/prefer-todo": "error",
          "jest/require-hook": "error",
          "jest/require-to-throw-message": "error",
          "jest/require-top-level-describe": "error",
          "jest/unbound-method": "error",
          "jest/valid-describe-callback": "error",
          "jest/valid-expect": "error",
          "jest/valid-expect-in-promise": "error",
          "jest/valid-title": "error",
        },
      },
      "recommended": {
        "env": {
          "jest/globals": true,
        },
        "plugins": [
          "jest",
        ],
        "rules": {
          "jest/expect-expect": "warn",
          "jest/no-commented-out-tests": "warn",
          "jest/no-conditional-expect": "error",
          "jest/no-deprecated-functions": "error",
          "jest/no-disabled-tests": "warn",
          "jest/no-done-callback": "error",
          "jest/no-export": "error",
          "jest/no-focused-tests": "error",
          "jest/no-identical-title": "error",
          "jest/no-interpolation-in-snapshots": "error",
          "jest/no-jasmine-globals": "error",
          "jest/no-jest-import": "error",
          "jest/no-mocks-import": "error",
          "jest/no-standalone-expect": "error",
          "jest/no-test-prefixes": "error",
          "jest/valid-describe-callback": "error",
          "jest/valid-expect": "error",
          "jest/valid-expect-in-promise": "error",
          "jest/valid-title": "error",
        },
      },
      "style": {
        "plugins": [
          "jest",
        ],
        "rules": {
          "jest/no-alias-methods": "warn",
          "jest/prefer-to-be": "error",
          "jest/prefer-to-contain": "error",
          "jest/prefer-to-have-length": "error",
        },
      },
    },
    "environments": {
      "globals": {
        "globals": {
          "afterAll": false,
          "afterEach": false,
          "beforeAll": false,
          "beforeEach": false,
          "describe": false,
          "expect": false,
          "fit": false,
          "it": false,
          "jest": false,
          "test": false,
          "xdescribe": false,
          "xit": false,
          "xtest": false,
        },
      },
    },
    "processors": {
      ".snap": {
        "postprocess": [Function],
        "preprocess": [Function],
      },
    },
    "rules": {
      "consistent-test-it": {
        "create": [Function],
        "defaultOptions": [
          {
            "fn": "test",
            "withinDescribe": "it",
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Have control over \`test\` and \`it\` usages",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/consistent-test-it.md",
          },
          "fixable": "code",
          "messages": {
            "consistentMethod": "Prefer using '{{ testKeyword }}' instead of '{{ oppositeTestKeyword }}'",
            "consistentMethodWithinDescribe": "Prefer using '{{ testKeywordWithinDescribe }}' instead of '{{ oppositeTestKeyword }}' within describe",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "fn": {
                  "enum": [
                    "it",
                    "test",
                  ],
                },
                "withinDescribe": {
                  "enum": [
                    "it",
                    "test",
                  ],
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "expect-expect": {
        "create": [Function],
        "defaultOptions": [
          {
            "additionalTestBlockFunctions": [],
            "assertFunctionNames": [
              "expect",
            ],
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce assertion to be made in a test body",
            "recommended": "warn",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/expect-expect.md",
          },
          "messages": {
            "noAssertions": "Test has no assertions",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "additionalTestBlockFunctions": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "assertFunctionNames": {
                  "items": [
                    {
                      "type": "string",
                    },
                  ],
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "max-nested-describe": {
        "create": [Function],
        "defaultOptions": [
          {
            "max": 5,
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforces a maximum depth to nested describe calls",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/max-nested-describe.md",
          },
          "messages": {
            "exceededMaxDepth": "Too many nested describe calls ({{ depth }}). Maximum allowed is {{ max }}.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "max": {
                  "minimum": 0,
                  "type": "integer",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-alias-methods": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow alias methods",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-alias-methods.md",
          },
          "fixable": "code",
          "messages": {
            "replaceAlias": "Replace {{ alias }}() with its canonical name of {{ canonical }}()",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-commented-out-tests": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow commented out tests",
            "recommended": "warn",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-commented-out-tests.md",
          },
          "messages": {
            "commentedTests": "Some tests seem to be commented",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-conditional-expect": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Prevent calling \`expect\` conditionally",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-conditional-expect.md",
          },
          "messages": {
            "conditionalExpect": "Avoid calling \`expect\` conditionally\`",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-deprecated-functions": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow use of deprecated functions",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-deprecated-functions.md",
          },
          "fixable": "code",
          "messages": {
            "deprecatedFunction": "\`{{ deprecation }}\` has been deprecated in favor of \`{{ replacement }}\`",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-disabled-tests": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow disabled tests",
            "recommended": "warn",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-disabled-tests.md",
          },
          "messages": {
            "disabledSuite": "Disabled test suite",
            "disabledTest": "Disabled test",
            "missingFunction": "Test is missing function argument",
            "pending": "Call to pending()",
            "pendingSuite": "Call to pending() within test suite",
            "pendingTest": "Call to pending() within test",
            "skippedTest": "Skipped test",
            "skippedTestSuite": "Skipped test suite",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-done-callback": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Avoid using a callback in asynchronous tests and hooks",
            "recommended": "error",
            "suggestion": true,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-done-callback.md",
          },
          "hasSuggestions": true,
          "messages": {
            "noDoneCallback": "Return a Promise instead of relying on callback parameter",
            "suggestWrappingInPromise": "Wrap in \`new Promise({{ callback }} => ...\`",
            "useAwaitInsteadOfCallback": "Use await instead of callback in async functions",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-duplicate-hooks": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow duplicate setup and teardown hooks",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-duplicate-hooks.md",
          },
          "messages": {
            "noDuplicateHook": "Duplicate {{hook}} in describe block",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-export": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow using \`exports\` in files containing tests",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-export.md",
          },
          "messages": {
            "unexpectedExport": "Do not export from a test file.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-focused-tests": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow focused tests",
            "recommended": "error",
            "suggestion": true,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-focused-tests.md",
          },
          "hasSuggestions": true,
          "messages": {
            "focusedTest": "Unexpected focused test.",
            "suggestRemoveFocus": "Remove focus from test.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-hooks": {
        "create": [Function],
        "defaultOptions": [
          {
            "allow": [],
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow setup and teardown hooks",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-hooks.md",
          },
          "messages": {
            "unexpectedHook": "Unexpected '{{ hookName }}' hook",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allow": {
                  "contains": [
                    "beforeAll",
                    "beforeEach",
                    "afterAll",
                    "afterEach",
                  ],
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-identical-title": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow identical titles",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-identical-title.md",
          },
          "messages": {
            "multipleDescribeTitle": "Describe block title is used multiple times in the same describe block.",
            "multipleTestTitle": "Test title is used multiple times in the same describe block.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-if": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow conditional logic",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-if.md",
          },
          "messages": {
            "conditionalInTest": "Test should not contain {{ condition }} statements.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-interpolation-in-snapshots": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow string interpolation inside snapshots",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-interpolation-in-snapshots.md",
          },
          "messages": {
            "noInterpolation": "Do not use string interpolation inside of snapshots",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-jasmine-globals": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow Jasmine globals",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-jasmine-globals.md",
          },
          "fixable": "code",
          "messages": {
            "illegalFail": "Illegal usage of \`fail\`, prefer throwing an error, or the \`done.fail\` callback",
            "illegalGlobal": "Illegal usage of global \`{{ global }}\`, prefer \`{{ replacement }}\`",
            "illegalJasmine": "Illegal usage of jasmine global",
            "illegalMethod": "Illegal usage of \`{{ method }}\`, prefer \`{{ replacement }}\`",
            "illegalPending": "Illegal usage of \`pending\`, prefer explicitly skipping a test using \`test.skip\`",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-jest-import": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow importing Jest",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-jest-import.md",
          },
          "messages": {
            "unexpectedImport": "Jest is automatically in scope. Do not import "jest", as Jest doesn't export anything.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-large-snapshots": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "disallow large snapshots",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-large-snapshots.md",
          },
          "messages": {
            "noSnapshot": "\`{{ lineCount }}\`s should begin with lowercase",
            "tooLongSnapshots": "Expected Jest snapshot to be smaller than {{ lineLimit }} lines but was {{ lineCount }} lines long",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowedSnapshots": {
                  "additionalProperties": {
                    "type": "array",
                  },
                  "type": "object",
                },
                "inlineMaxSize": {
                  "type": "number",
                },
                "maxSize": {
                  "type": "number",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-mocks-import": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow manually importing from \`__mocks__\`",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-mocks-import.md",
          },
          "messages": {
            "noManualImport": "Mocks should not be manually imported from a __mocks__ directory. Instead use \`jest.mock\` and import from the original module path.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-restricted-matchers": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow specific matchers & modifiers",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-restricted-matchers.md",
          },
          "messages": {
            "restrictedChain": "Use of \`{{ chain }}\` is disallowed",
            "restrictedChainWithMessage": "{{ message }}",
          },
          "schema": [
            {
              "additionalProperties": {
                "type": [
                  "string",
                  "null",
                ],
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-standalone-expect": {
        "create": [Function],
        "defaultOptions": [
          {
            "additionalTestBlockFunctions": [],
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow using \`expect\` outside of \`it\` or \`test\` blocks",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-standalone-expect.md",
          },
          "messages": {
            "unexpectedExpect": "Expect must be inside of a test block.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "additionalTestBlockFunctions": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
            },
          ],
          "type": "suggestion",
        },
      },
      "no-test-prefixes": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Use \`.only\` and \`.skip\` over \`f\` and \`x\`",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-test-prefixes.md",
          },
          "fixable": "code",
          "messages": {
            "usePreferredName": "Use "{{ preferredNodeName }}" instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-test-return-statement": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow explicitly returning from tests",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-test-return-statement.md",
          },
          "messages": {
            "noReturnValue": "Jest tests should not return a value.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-called-with": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`toBeCalledWith()\` or \`toHaveBeenCalledWith()\`",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-called-with.md",
          },
          "messages": {
            "preferCalledWith": "Prefer {{name}}With(/* expected args */)",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-comparison-matcher": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using the built-in comparison matchers",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-comparison-matcher.md",
          },
          "fixable": "code",
          "messages": {
            "useToBeComparison": "Prefer using \`{{ preferredMatcher }}\` instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-equality-matcher": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using the built-in equality matchers",
            "recommended": false,
            "suggestion": true,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-equality-matcher.md",
          },
          "hasSuggestions": true,
          "messages": {
            "suggestEqualityMatcher": "Use \`{{ equalityMatcher }}\`",
            "useEqualityMatcher": "Prefer using one of the equality matchers instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-expect-assertions": {
        "create": [Function],
        "defaultOptions": [
          {
            "onlyFunctionsWithAsyncKeyword": false,
            "onlyFunctionsWithExpectInCallback": false,
            "onlyFunctionsWithExpectInLoop": false,
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`expect.assertions()\` OR \`expect.hasAssertions()\`",
            "recommended": false,
            "suggestion": true,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-expect-assertions.md",
          },
          "hasSuggestions": true,
          "messages": {
            "assertionsRequiresNumberArgument": "This argument should be a number",
            "assertionsRequiresOneArgument": "\`expect.assertions\` excepts a single argument of type number",
            "hasAssertionsTakesNoArguments": "\`expect.hasAssertions\` expects no arguments",
            "haveExpectAssertions": "Every test should have either \`expect.assertions(<number of assertions>)\` or \`expect.hasAssertions()\` as its first expression",
            "suggestAddingAssertions": "Add \`expect.assertions(<number of assertions>)\`",
            "suggestAddingHasAssertions": "Add \`expect.hasAssertions()\`",
            "suggestRemovingExtraArguments": "Remove extra arguments",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "onlyFunctionsWithAsyncKeyword": {
                  "type": "boolean",
                },
                "onlyFunctionsWithExpectInCallback": {
                  "type": "boolean",
                },
                "onlyFunctionsWithExpectInLoop": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "prefer-expect-resolves": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Prefer \`await expect(...).resolves\` over \`expect(await ...)\` syntax",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-expect-resolves.md",
          },
          "fixable": "code",
          "messages": {
            "expectResolves": "Use \`await expect(...).resolves instead.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-hooks-on-top": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest having hooks before any test cases",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-hooks-on-top.md",
          },
          "messages": {
            "noHookOnTop": "Hooks should come before test cases",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-lowercase-title": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowedPrefixes": [],
            "ignore": [],
            "ignoreTopLevelDescribe": false,
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce lowercase test names",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-lowercase-title.md",
          },
          "fixable": "code",
          "messages": {
            "unexpectedLowercase": "\`{{ method }}\`s should begin with lowercase",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowedPrefixes": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "ignore": {
                  "additionalItems": false,
                  "items": {
                    "enum": [
                      "describe",
                      "test",
                      "it",
                    ],
                  },
                  "type": "array",
                },
                "ignoreTopLevelDescribe": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "prefer-spy-on": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`jest.spyOn()\`",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-spy-on.md",
          },
          "fixable": "code",
          "messages": {
            "useJestSpyOn": "Use jest.spyOn() instead.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-strict-equal": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`toStrictEqual()\`",
            "recommended": false,
            "suggestion": true,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-strict-equal.md",
          },
          "hasSuggestions": true,
          "messages": {
            "suggestReplaceWithStrictEqual": "Replace with \`toStrictEqual()\`",
            "useToStrictEqual": "Use \`toStrictEqual()\` instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-to-be": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`toBe()\` for primitive literals",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-to-be.md",
          },
          "fixable": "code",
          "messages": {
            "useToBe": "Use \`toBe\` when expecting primitive literals",
            "useToBeDefined": "Use \`toBeDefined\` instead",
            "useToBeNaN": "Use \`toBeNaN\` instead",
            "useToBeNull": "Use \`toBeNull\` instead",
            "useToBeUndefined": "Use \`toBeUndefined\` instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-to-contain": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`toContain()\`",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-to-contain.md",
          },
          "fixable": "code",
          "messages": {
            "useToContain": "Use toContain() instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-to-have-length": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`toHaveLength()\`",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-to-have-length.md",
          },
          "fixable": "code",
          "messages": {
            "useToHaveLength": "Use toHaveLength() instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-todo": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`test.todo\`",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-todo.md",
          },
          "fixable": "code",
          "messages": {
            "emptyTest": "Prefer todo test case over empty test case",
            "unimplementedTest": "Prefer todo test case over unimplemented test case",
          },
          "schema": [],
          "type": "layout",
        },
      },
      "require-hook": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowedFunctionCalls": [],
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Require setup and teardown code to be within a hook",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/require-hook.md",
          },
          "messages": {
            "useHook": "This should be done within a hook",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowedFunctionCalls": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "require-to-throw-message": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Require a message for \`toThrow()\`",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/require-to-throw-message.md",
          },
          "messages": {
            "addErrorMessage": "Add an error message to {{ matcherName }}()",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "require-top-level-describe": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Require test cases and hooks to be inside a \`describe\` block",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/require-top-level-describe.md",
          },
          "messages": {
            "tooManyDescribes": "There should not be more than {{ max }} describe{{ s }} at the top level",
            "unexpectedHook": "All hooks must be wrapped in a describe block.",
            "unexpectedTestCase": "All test cases must be wrapped in a describe block.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "maxNumberOfTopLevelDescribes": {
                  "minimum": 1,
                  "type": "number",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "unbound-method": {
        "create": [Function],
        "defaultOptions": [
          {
            "ignoreStatic": false,
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce unbound methods are called with their expected scope",
            "recommended": false,
            "requiresTypeChecking": true,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/unbound-method.md",
          },
          "messages": {
            "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.",
            "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.
If your function does not access \`this\`, you can annotate it with \`this: void\`, or consider using an arrow function instead.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreStatic": {
                  "description": "Whether to skip checking whether \`static\` methods are correctly bound.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "valid-describe-callback": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Enforce valid \`describe()\` callback",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/valid-describe-callback.md",
          },
          "messages": {
            "nameAndCallback": "Describe requires name and callback arguments",
            "noAsyncDescribeCallback": "No async describe callback",
            "secondArgumentMustBeFunction": "Second argument must be function",
            "unexpectedDescribeArgument": "Unexpected argument(s) in describe callback",
            "unexpectedReturnInDescribe": "Unexpected return statement in describe callback",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "valid-expect": {
        "create": [Function],
        "defaultOptions": [
          {
            "alwaysAwait": false,
            "asyncMatchers": [
              "toReject",
              "toResolve",
            ],
            "maxArgs": 1,
            "minArgs": 1,
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce valid \`expect()\` usage",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/valid-expect.md",
          },
          "messages": {
            "asyncMustBeAwaited": "Async assertions must be awaited{{ orReturned }}.",
            "matcherNotCalled": "Matchers must be called to assert.",
            "matcherNotFound": "Expect must have a corresponding matcher call.",
            "modifierUnknown": "Expect has no modifier named "{{ modifierName }}".",
            "notEnoughArgs": "Expect requires at least {{ amount }} argument{{ s }}.",
            "promisesWithAsyncAssertionsMustBeAwaited": "Promises which return async assertions must be awaited{{ orReturned }}.",
            "tooManyArgs": "Expect takes at most {{ amount }} argument{{ s }}.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "alwaysAwait": {
                  "default": false,
                  "type": "boolean",
                },
                "asyncMatchers": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "maxArgs": {
                  "minimum": 1,
                  "type": "number",
                },
                "minArgs": {
                  "minimum": 1,
                  "type": "number",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "valid-expect-in-promise": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Ensure promises that have expectations in their chain are valid",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/valid-expect-in-promise.md",
          },
          "messages": {
            "expectInFloatingPromise": "This promise should either be returned or awaited to ensure the expects in it's chain are called",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "valid-title": {
        "create": [Function],
        "defaultOptions": [
          {
            "disallowedWords": [],
            "ignoreTypeOfDescribeName": false,
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce valid titles",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/valid-title.md",
          },
          "fixable": "code",
          "messages": {
            "accidentalSpace": "should not have leading or trailing spaces",
            "disallowedWord": ""{{ word }}" is not allowed in test titles.",
            "duplicatePrefix": "should not have duplicate prefix",
            "emptyTitle": "{{ jestFunctionName }} should not have an empty title",
            "mustMatch": "{{ jestFunctionName }} should match {{ pattern }}",
            "mustMatchCustom": "{{ message }}",
            "mustNotMatch": "{{ jestFunctionName }} should not match {{ pattern }}",
            "mustNotMatchCustom": "{{ message }}",
            "titleMustBeString": "Title must be a string",
          },
          "schema": [
            {
              "additionalProperties": false,
              "patternProperties": {
                "^must(?:Not)?Match$": {
                  "oneOf": [
                    {
                      "type": "string",
                    },
                    {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "maxItems": 2,
                      "minItems": 1,
                      "type": "array",
                    },
                    {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalItems": false,
                            "items": {
                              "type": "string",
                            },
                            "maxItems": 2,
                            "minItems": 1,
                            "type": "array",
                          },
                        ],
                      },
                      "propertyNames": {
                        "enum": [
                          "describe",
                          "test",
                          "it",
                        ],
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "properties": {
                "disallowedWords": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "ignoreTypeOfDescribeName": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
    },
  },
  "jsx-a11y": {
    "configs": {
      "recommended": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true,
          },
        },
        "plugins": [
          "jsx-a11y",
        ],
        "rules": {
          "jsx-a11y/alt-text": "error",
          "jsx-a11y/anchor-ambiguous-text": "off",
          "jsx-a11y/anchor-has-content": "error",
          "jsx-a11y/anchor-is-valid": "error",
          "jsx-a11y/aria-activedescendant-has-tabindex": "error",
          "jsx-a11y/aria-props": "error",
          "jsx-a11y/aria-proptypes": "error",
          "jsx-a11y/aria-role": "error",
          "jsx-a11y/aria-unsupported-elements": "error",
          "jsx-a11y/autocomplete-valid": "error",
          "jsx-a11y/click-events-have-key-events": "error",
          "jsx-a11y/control-has-associated-label": [
            "off",
            {
              "ignoreElements": [
                "audio",
                "canvas",
                "embed",
                "input",
                "textarea",
                "tr",
                "video",
              ],
              "ignoreRoles": [
                "grid",
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "row",
                "tablist",
                "toolbar",
                "tree",
                "treegrid",
              ],
              "includeRoles": [
                "alert",
                "dialog",
              ],
            },
          ],
          "jsx-a11y/heading-has-content": "error",
          "jsx-a11y/html-has-lang": "error",
          "jsx-a11y/iframe-has-title": "error",
          "jsx-a11y/img-redundant-alt": "error",
          "jsx-a11y/interactive-supports-focus": [
            "error",
            {
              "tabbable": [
                "button",
                "checkbox",
                "link",
                "searchbox",
                "spinbutton",
                "switch",
                "textbox",
              ],
            },
          ],
          "jsx-a11y/label-has-associated-control": "error",
          "jsx-a11y/label-has-for": "off",
          "jsx-a11y/media-has-caption": "error",
          "jsx-a11y/mouse-events-have-key-events": "error",
          "jsx-a11y/no-access-key": "error",
          "jsx-a11y/no-autofocus": "error",
          "jsx-a11y/no-distracting-elements": "error",
          "jsx-a11y/no-interactive-element-to-noninteractive-role": [
            "error",
            {
              "canvas": [
                "img",
              ],
              "tr": [
                "none",
                "presentation",
              ],
            },
          ],
          "jsx-a11y/no-noninteractive-element-interactions": [
            "error",
            {
              "alert": [
                "onKeyUp",
                "onKeyDown",
                "onKeyPress",
              ],
              "body": [
                "onError",
                "onLoad",
              ],
              "dialog": [
                "onKeyUp",
                "onKeyDown",
                "onKeyPress",
              ],
              "handlers": [
                "onClick",
                "onError",
                "onLoad",
                "onMouseDown",
                "onMouseUp",
                "onKeyPress",
                "onKeyDown",
                "onKeyUp",
              ],
              "iframe": [
                "onError",
                "onLoad",
              ],
              "img": [
                "onError",
                "onLoad",
              ],
            },
          ],
          "jsx-a11y/no-noninteractive-element-to-interactive-role": [
            "error",
            {
              "fieldset": [
                "radiogroup",
                "presentation",
              ],
              "li": [
                "menuitem",
                "option",
                "row",
                "tab",
                "treeitem",
              ],
              "ol": [
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "tablist",
                "tree",
                "treegrid",
              ],
              "table": [
                "grid",
              ],
              "td": [
                "gridcell",
              ],
              "ul": [
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "tablist",
                "tree",
                "treegrid",
              ],
            },
          ],
          "jsx-a11y/no-noninteractive-tabindex": [
            "error",
            {
              "allowExpressionValues": true,
              "roles": [
                "tabpanel",
              ],
              "tags": [],
            },
          ],
          "jsx-a11y/no-redundant-roles": "error",
          "jsx-a11y/no-static-element-interactions": [
            "error",
            {
              "allowExpressionValues": true,
              "handlers": [
                "onClick",
                "onMouseDown",
                "onMouseUp",
                "onKeyPress",
                "onKeyDown",
                "onKeyUp",
              ],
            },
          ],
          "jsx-a11y/role-has-required-aria-props": "error",
          "jsx-a11y/role-supports-aria-props": "error",
          "jsx-a11y/scope": "error",
          "jsx-a11y/tabindex-no-positive": "error",
        },
      },
      "strict": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true,
          },
        },
        "plugins": [
          "jsx-a11y",
        ],
        "rules": {
          "jsx-a11y/alt-text": "error",
          "jsx-a11y/anchor-has-content": "error",
          "jsx-a11y/anchor-is-valid": "error",
          "jsx-a11y/aria-activedescendant-has-tabindex": "error",
          "jsx-a11y/aria-props": "error",
          "jsx-a11y/aria-proptypes": "error",
          "jsx-a11y/aria-role": "error",
          "jsx-a11y/aria-unsupported-elements": "error",
          "jsx-a11y/autocomplete-valid": "error",
          "jsx-a11y/click-events-have-key-events": "error",
          "jsx-a11y/control-has-associated-label": [
            "off",
            {
              "ignoreElements": [
                "audio",
                "canvas",
                "embed",
                "input",
                "textarea",
                "tr",
                "video",
              ],
              "ignoreRoles": [
                "grid",
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "row",
                "tablist",
                "toolbar",
                "tree",
                "treegrid",
              ],
              "includeRoles": [
                "alert",
                "dialog",
              ],
            },
          ],
          "jsx-a11y/heading-has-content": "error",
          "jsx-a11y/html-has-lang": "error",
          "jsx-a11y/iframe-has-title": "error",
          "jsx-a11y/img-redundant-alt": "error",
          "jsx-a11y/interactive-supports-focus": [
            "error",
            {
              "tabbable": [
                "button",
                "checkbox",
                "link",
                "progressbar",
                "searchbox",
                "slider",
                "spinbutton",
                "switch",
                "textbox",
              ],
            },
          ],
          "jsx-a11y/label-has-associated-control": "error",
          "jsx-a11y/label-has-for": "off",
          "jsx-a11y/media-has-caption": "error",
          "jsx-a11y/mouse-events-have-key-events": "error",
          "jsx-a11y/no-access-key": "error",
          "jsx-a11y/no-autofocus": "error",
          "jsx-a11y/no-distracting-elements": "error",
          "jsx-a11y/no-interactive-element-to-noninteractive-role": "error",
          "jsx-a11y/no-noninteractive-element-interactions": [
            "error",
            {
              "body": [
                "onError",
                "onLoad",
              ],
              "iframe": [
                "onError",
                "onLoad",
              ],
              "img": [
                "onError",
                "onLoad",
              ],
            },
          ],
          "jsx-a11y/no-noninteractive-element-to-interactive-role": "error",
          "jsx-a11y/no-noninteractive-tabindex": "error",
          "jsx-a11y/no-redundant-roles": "error",
          "jsx-a11y/no-static-element-interactions": "error",
          "jsx-a11y/role-has-required-aria-props": "error",
          "jsx-a11y/role-supports-aria-props": "error",
          "jsx-a11y/scope": "error",
          "jsx-a11y/tabindex-no-positive": "error",
        },
      },
    },
    "rules": {
      "accessible-emoji": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "description": "Enforce emojis are wrapped in \`<span>\` and provide screenreader access.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "alt-text": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce all elements that require alternative text have meaningful information to relay back to end user.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md",
          },
          "schema": [
            {
              "properties": {
                "area": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "elements": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "img": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "input[type="image"]": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "object": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "anchor-ambiguous-text": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce \`<a>\` text to not exactly match "click here", "here", "link", or "a link".",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-ambiguous-text.md",
          },
          "schema": [
            {
              "properties": {
                "words": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "anchor-has-content": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce all anchors to contain accessible content.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md",
          },
          "schema": [
            {
              "properties": {
                "components": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "anchor-is-valid": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce all anchors are valid, navigable elements.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md",
          },
          "schema": [
            {
              "properties": {
                "aspects": {
                  "additionalItems": false,
                  "items": {
                    "enum": [
                      "noHref",
                      "invalidHref",
                      "preferButton",
                    ],
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
                "components": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "specialLink": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "aria-activedescendant-has-tabindex": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce elements with aria-activedescendant are tabbable.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "aria-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce all \`aria-*\` props are valid.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-props.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "aria-proptypes": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce ARIA state and property values are valid.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
        "validityCheck": [Function],
      },
      "aria-role": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-role.md",
          },
          "schema": [
            {
              "properties": {
                "allowedInvalidRoles": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "ignoreNonDOM": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "aria-unsupported-elements": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "autocomplete-valid": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that autocomplete attributes are used correctly.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md",
          },
          "schema": [
            {
              "properties": {
                "inputComponents": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "click-events-have-key-events": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce a clickable non-interactive element has at least one keyboard event listener.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/click-events-have-key-events.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "control-has-associated-label": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that a control (an interactive element) has a text label.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/control-has-associated-label.md",
          },
          "schema": [
            {
              "properties": {
                "controlComponents": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "depth": {
                  "description": "JSX tree depth limit to check for accessible label",
                  "minimum": 0,
                  "type": "integer",
                },
                "ignoreElements": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "ignoreRoles": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "labelAttributes": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "heading-has-content": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce heading (\`h1\`, \`h2\`, etc) elements contain accessible content.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/heading-has-content.md",
          },
          "schema": [
            {
              "properties": {
                "components": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "html-has-lang": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce \`<html>\` element has \`lang\` prop.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/html-has-lang.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "iframe-has-title": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce iframe elements have a title attribute.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/iframe-has-title.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "img-redundant-alt": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce \`<img>\` alt prop does not contain the word "image", "picture", or "photo".",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md",
          },
          "schema": [
            {
              "properties": {
                "components": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "words": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "interactive-supports-focus": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that elements with interactive handlers like \`onClick\` must be focusable.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/interactive-supports-focus.md",
          },
          "schema": [
            {
              "properties": {
                "tabbable": {
                  "additionalItems": false,
                  "items": {
                    "enum": [
                      "button",
                      "checkbox",
                      "columnheader",
                      "combobox",
                      "grid",
                      "gridcell",
                      "link",
                      "listbox",
                      "menu",
                      "menubar",
                      "menuitem",
                      "menuitemcheckbox",
                      "menuitemradio",
                      "option",
                      "progressbar",
                      "radio",
                      "radiogroup",
                      "row",
                      "rowheader",
                      "scrollbar",
                      "searchbox",
                      "slider",
                      "spinbutton",
                      "switch",
                      "tab",
                      "tablist",
                      "textbox",
                      "tree",
                      "treegrid",
                      "treeitem",
                      "doc-backlink",
                      "doc-biblioref",
                      "doc-glossref",
                      "doc-noteref",
                    ],
                    "type": "string",
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "label-has-associated-control": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that a \`label\` tag has a text label and an associated control.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/label-has-associated-control.md",
          },
          "schema": [
            {
              "properties": {
                "assert": {
                  "description": "Assert that the label has htmlFor, a nested label, both or either",
                  "enum": [
                    "htmlFor",
                    "nesting",
                    "both",
                    "either",
                  ],
                  "type": "string",
                },
                "controlComponents": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "depth": {
                  "description": "JSX tree depth limit to check for accessible label",
                  "minimum": 0,
                  "type": "integer",
                },
                "labelAttributes": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "labelComponents": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "label-has-for": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "description": "Enforce that \`<label>\` elements have the \`htmlFor\` prop.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/label-has-for.md",
          },
          "replacedBy": [
            "label-has-associated-control",
          ],
          "schema": [
            {
              "properties": {
                "allowChildren": {
                  "type": "boolean",
                },
                "components": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "required": {
                  "oneOf": [
                    {
                      "enum": [
                        "nesting",
                        "id",
                      ],
                      "type": "string",
                    },
                    {
                      "properties": {
                        "some": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "nesting",
                              "id",
                            ],
                            "type": "string",
                          },
                          "minItems": 0,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": [
                        "some",
                      ],
                      "type": "object",
                    },
                    {
                      "properties": {
                        "every": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "nesting",
                              "id",
                            ],
                            "type": "string",
                          },
                          "minItems": 0,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": [
                        "every",
                      ],
                      "type": "object",
                    },
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "lang": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce lang attribute has a valid value.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/lang.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "media-has-caption": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforces that \`<audio>\` and \`<video>\` elements must have a \`<track>\` for captions.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/media-has-caption.md",
          },
          "schema": [
            {
              "properties": {
                "audio": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "track": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "video": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "mouse-events-have-key-events": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that \`onMouseOver\`/\`onMouseOut\` are accompanied by \`onFocus\`/\`onBlur\` for keyboard-only users.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/mouse-events-have-key-events.md",
          },
          "schema": [
            {
              "properties": {
                "hoverInHandlers": {
                  "additionalItems": false,
                  "description": "An array of events that need to be accompanied by \`onFocus\`",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "hoverOutHandlers": {
                  "additionalItems": false,
                  "description": "An array of events that need to be accompanied by \`onBlur\`",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-access-key": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that the \`accessKey\` prop is not used on any element to avoid complications with keyboard commands used by a screenreader.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-access-key.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-aria-hidden-on-focusable": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Disallow \`aria-hidden="true"\` from being set on focusable elements.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-aria-hidden-on-focusable.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-autofocus": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce autoFocus prop is not used.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-autofocus.md",
          },
          "schema": [
            {
              "properties": {
                "ignoreNonDOM": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-distracting-elements": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce distracting elements are not used.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-distracting-elements.md",
          },
          "schema": [
            {
              "properties": {
                "elements": {
                  "additionalItems": false,
                  "items": {
                    "enum": [
                      "marquee",
                      "blink",
                    ],
                    "type": "string",
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-interactive-element-to-noninteractive-role": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Interactive elements should not be assigned non-interactive roles.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-interactive-element-to-noninteractive-role.md",
          },
          "schema": [
            {
              "additionalProperties": {
                "items": {
                  "type": "string",
                },
                "type": "array",
                "uniqueItems": true,
              },
              "type": "object",
            },
          ],
        },
      },
      "no-noninteractive-element-interactions": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Non-interactive elements should not be assigned mouse or keyboard event listeners.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-interactions.md",
          },
          "schema": [
            {
              "properties": {
                "handlers": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-noninteractive-element-to-interactive-role": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Non-interactive elements should not be assigned interactive roles.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-to-interactive-role.md",
          },
          "schema": [
            {
              "additionalProperties": {
                "items": {
                  "type": "string",
                },
                "type": "array",
                "uniqueItems": true,
              },
              "type": "object",
            },
          ],
        },
      },
      "no-noninteractive-tabindex": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "\`tabIndex\` should only be declared on interactive elements.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-tabindex.md",
          },
          "schema": [
            {
              "properties": {
                "roles": {
                  "additionalItems": false,
                  "description": "An array of ARIA roles",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "tags": {
                  "additionalItems": false,
                  "description": "An array of HTML tag names",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-onchange": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "description": "Enforce usage of \`onBlur\` over \`onChange\` on select menus for accessibility.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-onchange.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-redundant-roles": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce explicit role property is not the same as implicit/default role property on element.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-redundant-roles.md",
          },
          "schema": [
            {
              "additionalProperties": {
                "items": {
                  "type": "string",
                },
                "type": "array",
                "uniqueItems": true,
              },
              "type": "object",
            },
          ],
        },
      },
      "no-static-element-interactions": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that non-interactive, visible elements (such as \`<div>\`) that have click handlers use the role attribute.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-static-element-interactions.md",
          },
          "schema": [
            {
              "properties": {
                "handlers": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "prefer-tag-over-role": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforces using semantic DOM elements over the ARIA \`role\` property.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/prefer-tag-over-role.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "role-has-required-aria-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that elements with ARIA roles must have all required attributes for that role.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-has-required-aria-props.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "role-supports-aria-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that elements with explicit or implicit roles defined contain only \`aria-*\` properties supported by that \`role\`.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "scope": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce \`scope\` prop is only used on \`<th>\` elements.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/scope.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "tabindex-no-positive": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce \`tabIndex\` value is not greater than zero.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/tabindex-no-positive.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
    },
  },
  "react": {
    "configs": {
      "all": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true,
          },
        },
        "plugins": [
          "react",
        ],
        "rules": {
          "react/boolean-prop-naming": 2,
          "react/button-has-type": 2,
          "react/default-props-match-prop-types": 2,
          "react/destructuring-assignment": 2,
          "react/display-name": 2,
          "react/forbid-component-props": 2,
          "react/forbid-dom-props": 2,
          "react/forbid-elements": 2,
          "react/forbid-foreign-prop-types": 2,
          "react/forbid-prop-types": 2,
          "react/function-component-definition": 2,
          "react/hook-use-state": 2,
          "react/iframe-missing-sandbox": 2,
          "react/jsx-boolean-value": 2,
          "react/jsx-child-element-spacing": 2,
          "react/jsx-closing-bracket-location": 2,
          "react/jsx-closing-tag-location": 2,
          "react/jsx-curly-brace-presence": 2,
          "react/jsx-curly-newline": 2,
          "react/jsx-curly-spacing": 2,
          "react/jsx-equals-spacing": 2,
          "react/jsx-filename-extension": 2,
          "react/jsx-first-prop-new-line": 2,
          "react/jsx-fragments": 2,
          "react/jsx-handler-names": 2,
          "react/jsx-indent": 2,
          "react/jsx-indent-props": 2,
          "react/jsx-key": 2,
          "react/jsx-max-depth": 2,
          "react/jsx-max-props-per-line": 2,
          "react/jsx-newline": 2,
          "react/jsx-no-bind": 2,
          "react/jsx-no-comment-textnodes": 2,
          "react/jsx-no-constructed-context-values": 2,
          "react/jsx-no-duplicate-props": 2,
          "react/jsx-no-leaked-render": 2,
          "react/jsx-no-literals": 2,
          "react/jsx-no-script-url": 2,
          "react/jsx-no-target-blank": 2,
          "react/jsx-no-undef": 2,
          "react/jsx-no-useless-fragment": 2,
          "react/jsx-one-expression-per-line": 2,
          "react/jsx-pascal-case": 2,
          "react/jsx-props-no-multi-spaces": 2,
          "react/jsx-props-no-spreading": 2,
          "react/jsx-sort-props": 2,
          "react/jsx-tag-spacing": 2,
          "react/jsx-uses-react": 2,
          "react/jsx-uses-vars": 2,
          "react/jsx-wrap-multilines": 2,
          "react/no-access-state-in-setstate": 2,
          "react/no-adjacent-inline-elements": 2,
          "react/no-array-index-key": 2,
          "react/no-arrow-function-lifecycle": 2,
          "react/no-children-prop": 2,
          "react/no-danger": 2,
          "react/no-danger-with-children": 2,
          "react/no-deprecated": 2,
          "react/no-did-mount-set-state": 2,
          "react/no-did-update-set-state": 2,
          "react/no-direct-mutation-state": 2,
          "react/no-find-dom-node": 2,
          "react/no-invalid-html-attribute": 2,
          "react/no-is-mounted": 2,
          "react/no-multi-comp": 2,
          "react/no-namespace": 2,
          "react/no-object-type-as-default-prop": 2,
          "react/no-redundant-should-component-update": 2,
          "react/no-render-return-value": 2,
          "react/no-set-state": 2,
          "react/no-string-refs": 2,
          "react/no-this-in-sfc": 2,
          "react/no-typos": 2,
          "react/no-unescaped-entities": 2,
          "react/no-unknown-property": 2,
          "react/no-unsafe": 2,
          "react/no-unstable-nested-components": 2,
          "react/no-unused-class-component-methods": 2,
          "react/no-unused-prop-types": 2,
          "react/no-unused-state": 2,
          "react/no-will-update-set-state": 2,
          "react/prefer-es6-class": 2,
          "react/prefer-exact-props": 2,
          "react/prefer-read-only-props": 2,
          "react/prefer-stateless-function": 2,
          "react/prop-types": 2,
          "react/react-in-jsx-scope": 2,
          "react/require-default-props": 2,
          "react/require-optimization": 2,
          "react/require-render-return": 2,
          "react/self-closing-comp": 2,
          "react/sort-comp": 2,
          "react/sort-default-props": 2,
          "react/sort-prop-types": 2,
          "react/state-in-constructor": 2,
          "react/static-property-placement": 2,
          "react/style-prop-object": 2,
          "react/void-dom-elements-no-children": 2,
        },
      },
      "jsx-runtime": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true,
          },
          "jsxPragma": null,
        },
        "plugins": [
          "react",
        ],
        "rules": {
          "react/jsx-uses-react": 0,
          "react/react-in-jsx-scope": 0,
        },
      },
      "recommended": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true,
          },
        },
        "plugins": [
          "react",
        ],
        "rules": {
          "react/display-name": 2,
          "react/jsx-key": 2,
          "react/jsx-no-comment-textnodes": 2,
          "react/jsx-no-duplicate-props": 2,
          "react/jsx-no-target-blank": 2,
          "react/jsx-no-undef": 2,
          "react/jsx-uses-react": 2,
          "react/jsx-uses-vars": 2,
          "react/no-children-prop": 2,
          "react/no-danger-with-children": 2,
          "react/no-deprecated": 2,
          "react/no-direct-mutation-state": 2,
          "react/no-find-dom-node": 2,
          "react/no-is-mounted": 2,
          "react/no-render-return-value": 2,
          "react/no-string-refs": 2,
          "react/no-unescaped-entities": 2,
          "react/no-unknown-property": 2,
          "react/no-unsafe": 0,
          "react/prop-types": 2,
          "react/react-in-jsx-scope": 2,
          "react/require-render-return": 2,
        },
      },
    },
    "deprecatedRules": {
      "jsx-sort-default-props": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce defaultProps declarations alphabetical sorting",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md",
          },
          "messages": {
            "propsNotSorted": "Default prop types declarations should be sorted alphabetically",
          },
          "replacedBy": [
            "sort-default-props",
          ],
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreCase": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-space-before-closing": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce spacing before closing bracket in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md",
          },
          "fixable": "code",
          "messages": {
            "needSpaceBeforeClose": "A space is required before closing bracket",
            "noSpaceBeforeClose": "A space is forbidden before closing bracket",
          },
          "replacedBy": [
            "jsx-tag-spacing",
          ],
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
            },
          ],
        },
      },
    },
    "rules": {
      "boolean-prop-naming": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforces consistent naming for boolean props",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/boolean-prop-naming.md",
          },
          "messages": {
            "patternMismatch": "Prop name ({{propName}}) doesn't match rule ({{pattern}})",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "minLength": 1,
                  "type": "string",
                },
                "propTypeNames": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
                "rule": {
                  "default": "^(is|has)[A-Z]([A-Za-z0-9]?)+",
                  "minLength": 1,
                  "type": "string",
                },
                "validateNested": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "button-has-type": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow usage of \`button\` elements without an explicit \`type\` attribute",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/button-has-type.md",
          },
          "messages": {
            "complexType": "The button type attribute must be specified by a static string or a trivial ternary expression",
            "forbiddenValue": ""{{value}}" is an invalid value for button type attribute",
            "invalidValue": ""{{value}}" is an invalid value for button type attribute",
            "missingType": "Missing an explicit type attribute for button",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "button": {
                  "default": true,
                  "type": "boolean",
                },
                "reset": {
                  "default": true,
                  "type": "boolean",
                },
                "submit": {
                  "default": true,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "default-props-match-prop-types": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce all defaultProps have a corresponding non-required PropType",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/default-props-match-prop-types.md",
          },
          "messages": {
            "defaultHasNoType": "defaultProp "{{name}}" has no corresponding propTypes declaration.",
            "requiredHasDefault": "defaultProp "{{name}}" defined for isRequired propType.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowRequiredDefaults": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "destructuring-assignment": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce consistent usage of destructuring assignment of props, state, and context",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/destructuring-assignment.md",
          },
          "fixable": "code",
          "messages": {
            "destructureInSignature": "Must destructure props in the function signature.",
            "noDestructAssignment": "Must never use destructuring {{type}} assignment",
            "noDestructContextInSFCArg": "Must never use destructuring context assignment in SFC argument",
            "noDestructPropsInSFCArg": "Must never use destructuring props assignment in SFC argument",
            "useDestructAssignment": "Must use destructuring {{type}} assignment",
          },
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
              "type": "string",
            },
            {
              "additionalProperties": false,
              "properties": {
                "destructureInSignature": {
                  "enum": [
                    "always",
                    "ignore",
                  ],
                  "type": "string",
                },
                "ignoreClassFields": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "display-name": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow missing displayName in a React component definition",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/display-name.md",
          },
          "messages": {
            "noContextDisplayName": "Context definition is missing display name",
            "noDisplayName": "Component definition is missing display name",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "checkContextObjects": {
                  "type": "boolean",
                },
                "ignoreTranspilerName": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "forbid-component-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow certain props on components",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-component-props.md",
          },
          "messages": {
            "propIsForbidden": "Prop "{{prop}}" is forbidden on Components",
          },
          "schema": [
            {
              "properties": {
                "forbid": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowedFor": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "message": {
                            "type": "string",
                          },
                          "propName": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "disallowedFor": {
                            "items": {
                              "type": "string",
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "message": {
                            "type": "string",
                          },
                          "propName": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "disallowedFor",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "forbid-dom-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow certain props on DOM Nodes",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-dom-props.md",
          },
          "messages": {
            "propIsForbidden": "Prop "{{prop}}" is forbidden on DOM Nodes",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "forbid": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "properties": {
                          "disallowedFor": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "message": {
                            "type": "string",
                          },
                          "propName": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "minLength": 1,
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "forbid-elements": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow certain elements",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-elements.md",
          },
          "messages": {
            "forbiddenElement": "<{{element}}> is forbidden",
            "forbiddenElement_message": "<{{element}}> is forbidden, {{message}}",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "forbid": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "element": {
                            "type": "string",
                          },
                          "message": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "element",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "forbid-foreign-prop-types": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow using another component's propTypes",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-foreign-prop-types.md",
          },
          "messages": {
            "forbiddenPropType": "Using propTypes from another component is not safe because they may be removed in production builds",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowInPropTypes": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "forbid-prop-types": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow certain propTypes",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-prop-types.md",
          },
          "messages": {
            "forbiddenPropType": "Prop type "{{target}}" is forbidden",
          },
          "schema": [
            {
              "additionalProperties": true,
              "properties": {
                "checkChildContextTypes": {
                  "type": "boolean",
                },
                "checkContextTypes": {
                  "type": "boolean",
                },
                "forbid": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "function-component-definition": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce a specific function type for function components",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/function-component-definition.md",
          },
          "fixable": "code",
          "messages": {
            "arrow-function": "Function component is not an arrow function",
            "function-declaration": "Function component is not a function declaration",
            "function-expression": "Function component is not a function expression",
          },
          "schema": [
            {
              "properties": {
                "namedComponents": {
                  "anyOf": [
                    {
                      "enum": [
                        "function-declaration",
                        "arrow-function",
                        "function-expression",
                      ],
                    },
                    {
                      "items": {
                        "enum": [
                          "function-declaration",
                          "arrow-function",
                          "function-expression",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                  ],
                },
                "unnamedComponents": {
                  "anyOf": [
                    {
                      "enum": [
                        "arrow-function",
                        "function-expression",
                      ],
                    },
                    {
                      "items": {
                        "enum": [
                          "arrow-function",
                          "function-expression",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "hook-use-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Ensure destructuring and symmetric naming of useState hook value and setter variables",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/hook-use-state.md",
          },
          "hasSuggestions": true,
          "messages": {
            "suggestMemo": "Replace useState call with useMemo",
            "suggestPair": "Destructure useState call into value + setter pair",
            "useStateErrorMessage": "useState call is not destructured into value + setter pair",
            "useStateErrorMessageOrAddOption": "useState call is not destructured into value + setter pair (you can allow destructuring by enabling "allowDestructuredState" option)",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowDestructuredState": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "iframe-missing-sandbox": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce sandbox attribute on iframe elements",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/iframe-missing-sandbox.md",
          },
          "messages": {
            "attributeMissing": "An iframe element is missing a sandbox attribute",
            "invalidCombination": "An iframe element defines a sandbox attribute with both allow-scripts and allow-same-origin which is invalid",
            "invalidValue": "An iframe element defines a sandbox attribute with invalid value "{{ value }}"",
          },
          "schema": [],
        },
      },
      "jsx-boolean-value": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce boolean attributes notation in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-boolean-value.md",
          },
          "fixable": "code",
          "messages": {
            "omitBoolean": "Value must be omitted for boolean attributes{{exceptionsMessage}}",
            "omitBoolean_noMessage": "Value must be omitted for boolean attributes",
            "setBoolean": "Value must be set for boolean attributes{{exceptionsMessage}}",
            "setBoolean_noMessage": "Value must be set for boolean attributes",
          },
          "schema": {
            "anyOf": [
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "always",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "never": {
                        "items": {
                          "minLength": 1,
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "never",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "always": {
                        "items": {
                          "minLength": 1,
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            ],
          },
        },
      },
      "jsx-child-element-spacing": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-child-element-spacing.md",
          },
          "fixable": null,
          "messages": {
            "spacingAfterPrev": "Ambiguous spacing after previous element {{element}}",
            "spacingBeforeNext": "Ambiguous spacing before next element {{element}}",
          },
          "schema": [],
        },
      },
      "jsx-closing-bracket-location": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce closing bracket location in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-bracket-location.md",
          },
          "fixable": "code",
          "messages": {
            "bracketLocation": "The closing bracket must be {{location}}{{details}}",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "enum": [
                    "after-props",
                    "props-aligned",
                    "tag-aligned",
                    "line-aligned",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "location": {
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned",
                      ],
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "nonEmpty": {
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned",
                        false,
                      ],
                    },
                    "selfClosing": {
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned",
                        false,
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
        },
      },
      "jsx-closing-tag-location": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce closing tag location for multiline JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-tag-location.md",
          },
          "fixable": "whitespace",
          "messages": {
            "matchIndent": "Expected closing tag to match indentation of opening.",
            "onOwnLine": "Closing tag of a multiline JSX expression must be on its own line.",
          },
        },
      },
      "jsx-curly-brace-presence": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-brace-presence.md",
          },
          "fixable": "code",
          "messages": {
            "missingCurly": "Need to wrap this literal in a JSX expression.",
            "unnecessaryCurly": "Curly braces are unnecessary here.",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "children": {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                    },
                    "propElementValues": {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                    },
                    "props": {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                    },
                  },
                  "type": "object",
                },
                {
                  "enum": [
                    "always",
                    "never",
                    "ignore",
                  ],
                },
              ],
            },
          ],
        },
      },
      "jsx-curly-newline": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-newline.md",
          },
          "fixable": "whitespace",
          "messages": {
            "expectedAfter": "Expected newline after '{'.",
            "expectedBefore": "Expected newline before '}'.",
            "unexpectedAfter": "Unexpected newline after '{'.",
            "unexpectedBefore": "Unexpected newline before '}'.",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "enum": [
                    "consistent",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "multiline": {
                      "enum": [
                        "consistent",
                        "require",
                        "forbid",
                      ],
                    },
                    "singleline": {
                      "enum": [
                        "consistent",
                        "require",
                        "forbid",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
          "type": "layout",
        },
      },
      "jsx-curly-spacing": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-spacing.md",
          },
          "fixable": "code",
          "messages": {
            "noNewlineAfter": "There should be no newline after '{{token}}'",
            "noNewlineBefore": "There should be no newline before '{{token}}'",
            "noSpaceAfter": "There should be no space after '{{token}}'",
            "noSpaceBefore": "There should be no space before '{{token}}'",
            "spaceNeededAfter": "A space is required after '{{token}}'",
            "spaceNeededBefore": "A space is required before '{{token}}'",
          },
          "schema": {
            "definitions": {
              "basicConfig": {
                "properties": {
                  "allowMultiline": {
                    "type": "boolean",
                  },
                  "spacing": {
                    "properties": {
                      "objectLiterals": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                  "when": {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                },
                "type": "object",
              },
              "basicConfigOrBoolean": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/basicConfig",
                  },
                  {
                    "type": "boolean",
                  },
                ],
              },
            },
            "items": [
              {
                "anyOf": [
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/basicConfig",
                      },
                      {
                        "properties": {
                          "attributes": {
                            "$ref": "#/definitions/basicConfigOrBoolean",
                          },
                          "children": {
                            "$ref": "#/definitions/basicConfigOrBoolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                ],
              },
              {
                "additionalProperties": false,
                "properties": {
                  "allowMultiline": {
                    "type": "boolean",
                  },
                  "spacing": {
                    "properties": {
                      "objectLiterals": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
        },
      },
      "jsx-equals-spacing": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce or disallow spaces around equal signs in JSX attributes",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-equals-spacing.md",
          },
          "fixable": "code",
          "messages": {
            "needSpaceAfter": "A space is required after '='",
            "needSpaceBefore": "A space is required before '='",
            "noSpaceAfter": "There should be no space after '='",
            "noSpaceBefore": "There should be no space before '='",
          },
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
            },
          ],
        },
      },
      "jsx-filename-extension": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow file extensions that may contain JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-filename-extension.md",
          },
          "messages": {
            "extensionOnlyForJSX": "Only files containing JSX may use the extension '{{ext}}'",
            "noJSXWithExtension": "JSX not allowed in files with extension '{{ext}}'",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allow": {
                  "enum": [
                    "always",
                    "as-needed",
                  ],
                },
                "extensions": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-first-prop-new-line": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce proper position of the first property in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-first-prop-new-line.md",
          },
          "fixable": "code",
          "messages": {
            "propOnNewLine": "Property should be placed on a new line",
            "propOnSameLine": "Property should be placed on the same line as the component declaration",
          },
          "schema": [
            {
              "enum": [
                "always",
                "never",
                "multiline",
                "multiline-multiprop",
                "multiprop",
              ],
            },
          ],
        },
      },
      "jsx-fragments": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce shorthand or standard form for React fragments",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-fragments.md",
          },
          "fixable": "code",
          "messages": {
            "fragmentsNotSupported": "Fragments are only supported starting from React v16.2. Please disable the \`react/jsx-fragments\` rule in \`eslint\` settings or upgrade your version of React.",
            "preferFragment": "Prefer fragment shorthand over {{react}}.{{fragment}}",
            "preferPragma": "Prefer {{react}}.{{fragment}} over fragment shorthand",
          },
          "schema": [
            {
              "enum": [
                "syntax",
                "element",
              ],
            },
          ],
        },
      },
      "jsx-handler-names": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce event handler naming conventions in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-handler-names.md",
          },
          "messages": {
            "badHandlerName": "Handler function for {{propKey}} prop key must be a camelCase name beginning with '{{handlerPrefix}}' only",
            "badPropKey": "Prop key for {{propValue}} must begin with '{{handlerPropPrefix}}'",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkInlineFunction": {
                      "type": "boolean",
                    },
                    "checkLocalVariables": {
                      "type": "boolean",
                    },
                    "eventHandlerPrefix": {
                      "type": "string",
                    },
                    "eventHandlerPropPrefix": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkInlineFunction": {
                      "type": "boolean",
                    },
                    "checkLocalVariables": {
                      "type": "boolean",
                    },
                    "eventHandlerPrefix": {
                      "type": "string",
                    },
                    "eventHandlerPropPrefix": {
                      "enum": [
                        false,
                      ],
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkInlineFunction": {
                      "type": "boolean",
                    },
                    "checkLocalVariables": {
                      "type": "boolean",
                    },
                    "eventHandlerPrefix": {
                      "enum": [
                        false,
                      ],
                      "type": "boolean",
                    },
                    "eventHandlerPropPrefix": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkLocalVariables": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkInlineFunction": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
        },
      },
      "jsx-indent": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce JSX indentation",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent.md",
          },
          "fixable": "whitespace",
          "messages": {
            "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "enum": [
                    "tab",
                  ],
                },
                {
                  "type": "integer",
                },
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "checkAttributes": {
                  "type": "boolean",
                },
                "indentLogicalExpressions": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-indent-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce props indentation in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent-props.md",
          },
          "fixable": "code",
          "messages": {
            "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "enum": [
                    "tab",
                    "first",
                  ],
                },
                {
                  "type": "integer",
                },
                {
                  "properties": {
                    "ignoreTernaryOperator": {
                      "type": "boolean",
                    },
                    "indentMode": {
                      "anyOf": [
                        {
                          "enum": [
                            "tab",
                            "first",
                          ],
                        },
                        {
                          "type": "integer",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
        },
      },
      "jsx-key": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow missing \`key\` props in iterators/collection literals",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-key.md",
          },
          "messages": {
            "keyBeforeSpread": "\`key\` prop must be placed before any \`{...spread}, to avoid conflicting with React’s new JSX transform: https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\`",
            "missingArrayKey": "Missing "key" prop for element in array",
            "missingArrayKeyUsePrag": "Missing "key" prop for element in array. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead",
            "missingIterKey": "Missing "key" prop for element in iterator",
            "missingIterKeyUsePrag": "Missing "key" prop for element in iterator. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead",
            "nonUniqueKeys": "\`key\` prop must be unique",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "checkFragmentShorthand": {
                  "default": false,
                  "type": "boolean",
                },
                "checkKeyMustBeforeSpread": {
                  "default": false,
                  "type": "boolean",
                },
                "warnOnDuplicates": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-max-depth": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce JSX maximum depth",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-depth.md",
          },
          "messages": {
            "wrongDepth": "Expected the depth of nested jsx elements to be <= {{needed}}, but found {{found}}.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "max": {
                  "minimum": 0,
                  "type": "integer",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-max-props-per-line": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce maximum of props on a single line in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-props-per-line.md",
          },
          "fixable": "code",
          "messages": {
            "newLine": "Prop \`{{prop}}\` must be placed on a new line",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "maximum": {
                      "properties": {
                        "multi": {
                          "minimum": 1,
                          "type": "integer",
                        },
                        "single": {
                          "minimum": 1,
                          "type": "integer",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "maximum": {
                      "minimum": 1,
                      "type": "number",
                    },
                    "when": {
                      "enum": [
                        "always",
                        "multiline",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
        },
      },
      "jsx-newline": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Require or prevent a new line after jsx elements and expressions.",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-newline.md",
          },
          "fixable": "code",
          "messages": {
            "allowMultilines": "Multiline JSX elements should start in a new line",
            "prevent": "JSX element should not start in a new line",
            "require": "JSX element should start in a new line",
          },
          "schema": [
            {
              "additionalProperties": false,
              "if": {
                "properties": {
                  "allowMultilines": {
                    "const": true,
                  },
                },
              },
              "properties": {
                "allowMultilines": {
                  "default": false,
                  "type": "boolean",
                },
                "prevent": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "then": {
                "properties": {
                  "prevent": {
                    "const": true,
                  },
                },
                "required": [
                  "prevent",
                ],
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-bind": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow \`.bind()\` or arrow functions in JSX props",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-bind.md",
          },
          "messages": {
            "arrowFunc": "JSX props should not use arrow functions",
            "bindCall": "JSX props should not use .bind()",
            "bindExpression": "JSX props should not use ::",
            "func": "JSX props should not use functions",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowArrowFunctions": {
                  "default": false,
                  "type": "boolean",
                },
                "allowBind": {
                  "default": false,
                  "type": "boolean",
                },
                "allowFunctions": {
                  "default": false,
                  "type": "boolean",
                },
                "ignoreDOMComponents": {
                  "default": false,
                  "type": "boolean",
                },
                "ignoreRefs": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-comment-textnodes": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow comments from being inserted as text nodes",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-comment-textnodes.md",
          },
          "messages": {
            "putCommentInBraces": "Comments inside children section of tag should be placed inside braces",
          },
          "schema": [],
        },
      },
      "jsx-no-constructed-context-values": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallows JSX context provider values from taking values that will cause needless rerenders",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-constructed-context-values.md",
          },
          "messages": {
            "defaultMsg": "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
            "defaultMsgFunc": "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useCallback hook.",
            "withIdentifierMsg": "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
            "withIdentifierMsgFunc": "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useCallback hook.",
          },
          "schema": {},
        },
      },
      "jsx-no-duplicate-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow duplicate properties in JSX",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-duplicate-props.md",
          },
          "messages": {
            "noDuplicateProps": "No duplicate props allowed",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreCase": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-leaked-render": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow problematic leaked values from being rendered",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-leaked-render.md",
          },
          "fixable": "code",
          "messages": {
            "noPotentialLeakedRender": "Potential leaked value that might cause unintentionally rendered values or rendering crashes",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "validStrategies": {
                  "default": [
                    "ternary",
                    "coerce",
                  ],
                  "items": {
                    "enum": [
                      "ternary",
                      "coerce",
                    ],
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-literals": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow usage of string literals in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-literals.md",
          },
          "messages": {
            "invalidPropValue": "Invalid prop value: "{{text}}"",
            "literalNotInJSXExpression": "Missing JSX expression container around literal string: "{{text}}"",
            "noStringsInAttributes": "Strings not allowed in attributes: "{{text}}"",
            "noStringsInJSX": "Strings not allowed in JSX files: "{{text}}"",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowedStrings": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "ignoreProps": {
                  "type": "boolean",
                },
                "noAttributeStrings": {
                  "type": "boolean",
                },
                "noStrings": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-script-url": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of \`javascript:\` URLs",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-script-url.md",
          },
          "messages": {
            "noScriptURL": "A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML, try using dangerouslySetInnerHTML instead.",
          },
          "schema": [
            {
              "items": {
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string",
                  },
                  "props": {
                    "items": {
                      "type": "string",
                      "uniqueItems": true,
                    },
                    "type": "array",
                  },
                },
                "required": [
                  "name",
                  "props",
                ],
                "type": "object",
              },
              "type": "array",
              "uniqueItems": true,
            },
          ],
        },
      },
      "jsx-no-target-blank": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow \`target="_blank"\` attribute without \`rel="noreferrer"\`",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md",
          },
          "fixable": "code",
          "messages": {
            "noTargetBlankWithoutNoopener": "Using target="_blank" without rel="noreferrer" or rel="noopener" (the former implies the latter and is preferred due to wider support) is a security risk: see https://mathiasbynens.github.io/rel-noopener/#recommendations",
            "noTargetBlankWithoutNoreferrer": "Using target="_blank" without rel="noreferrer" (which implies rel="noopener") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowReferrer": {
                  "type": "boolean",
                },
                "enforceDynamicLinks": {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                "forms": {
                  "default": false,
                  "type": "boolean",
                },
                "links": {
                  "default": true,
                  "type": "boolean",
                },
                "warnOnSpreadAttributes": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-undef": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow undeclared variables in JSX",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-undef.md",
          },
          "messages": {
            "undefined": "'{{identifier}}' is not defined.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowGlobals": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-useless-fragment": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow unnecessary fragments",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-useless-fragment.md",
          },
          "fixable": "code",
          "messages": {
            "ChildOfHtmlElement": "Passing a fragment to an HTML element is useless.",
            "NeedsMoreChildren": "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
          },
          "schema": [
            {
              "properties": {
                "allowExpressions": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "jsx-one-expression-per-line": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Require one JSX element per line",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-one-expression-per-line.md",
          },
          "fixable": "whitespace",
          "messages": {
            "moveToNewLine": "\`{{descriptor}}\` must be placed on a new line",
          },
          "schema": [
            {
              "additionalProperties": false,
              "default": {
                "allow": "none",
              },
              "properties": {
                "allow": {
                  "enum": [
                    "none",
                    "literal",
                    "single-child",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-pascal-case": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce PascalCase for user-defined JSX components",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-pascal-case.md",
          },
          "messages": {
            "usePascalCase": "Imported JSX component {{name}} must be in PascalCase",
            "usePascalOrSnakeCase": "Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowAllCaps": {
                  "type": "boolean",
                },
                "allowLeadingUnderscore": {
                  "type": "boolean",
                },
                "allowNamespace": {
                  "type": "boolean",
                },
                "ignore": {
                  "items": [
                    {
                      "type": "string",
                    },
                  ],
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-props-no-multi-spaces": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow multiple spaces between inline JSX props",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-multi-spaces.md",
          },
          "fixable": "code",
          "messages": {
            "noLineGap": "Expected no line gap between “{{prop1}}” and “{{prop2}}”",
            "onlyOneSpace": "Expected only one space between “{{prop1}}” and “{{prop2}}”",
          },
          "schema": [],
        },
      },
      "jsx-props-no-spreading": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow JSX prop spreading",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spreading.md",
          },
          "messages": {
            "noSpreading": "Prop spreading is forbidden",
          },
          "schema": [
            {
              "allOf": [
                {
                  "properties": {
                    "custom": {
                      "enum": [
                        "enforce",
                        "ignore",
                      ],
                    },
                    "exceptions": {
                      "items": {
                        "type": "string",
                        "uniqueItems": true,
                      },
                      "type": "array",
                    },
                    "html": {
                      "enum": [
                        "enforce",
                        "ignore",
                      ],
                    },
                  },
                  "type": "object",
                },
                {
                  "not": {
                    "properties": {
                      "custom": {
                        "enum": [
                          "ignore",
                        ],
                      },
                      "exceptions": {
                        "maxItems": 0,
                        "minItems": 0,
                        "type": "array",
                      },
                      "html": {
                        "enum": [
                          "ignore",
                        ],
                      },
                    },
                    "required": [
                      "html",
                      "custom",
                    ],
                    "type": "object",
                  },
                },
              ],
            },
          ],
        },
      },
      "jsx-sort-default-props": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce defaultProps declarations alphabetical sorting",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md",
          },
          "messages": {
            "propsNotSorted": "Default prop types declarations should be sorted alphabetically",
          },
          "replacedBy": [
            "sort-default-props",
          ],
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreCase": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-sort-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce props alphabetical sorting",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-props.md",
          },
          "fixable": "code",
          "messages": {
            "listCallbacksLast": "Callbacks must be listed after all other props",
            "listIsEmpty": "A customized reserved first list must not be empty",
            "listMultilineFirst": "Multiline props must be listed before all other props",
            "listMultilineLast": "Multiline props must be listed after all other props",
            "listReservedPropsFirst": "Reserved props must be listed before all other props",
            "listShorthandFirst": "Shorthand props must be listed before all other props",
            "listShorthandLast": "Shorthand props must be listed after all other props",
            "noUnreservedProps": "A customized reserved first list must only contain a subset of React reserved props. Remove: {{unreservedWords}}",
            "sortPropsByAlpha": "Props should be sorted alphabetically",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "callbacksLast": {
                  "type": "boolean",
                },
                "ignoreCase": {
                  "type": "boolean",
                },
                "locale": {
                  "default": "auto",
                  "type": "string",
                },
                "multiline": {
                  "default": "ignore",
                  "enum": [
                    "ignore",
                    "first",
                    "last",
                  ],
                },
                "noSortAlphabetically": {
                  "type": "boolean",
                },
                "reservedFirst": {
                  "type": [
                    "array",
                    "boolean",
                  ],
                },
                "shorthandFirst": {
                  "type": "boolean",
                },
                "shorthandLast": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-space-before-closing": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce spacing before closing bracket in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md",
          },
          "fixable": "code",
          "messages": {
            "needSpaceBeforeClose": "A space is required before closing bracket",
            "noSpaceBeforeClose": "A space is forbidden before closing bracket",
          },
          "replacedBy": [
            "jsx-tag-spacing",
          ],
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
            },
          ],
        },
      },
      "jsx-tag-spacing": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce whitespace in and around the JSX opening and closing brackets",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-tag-spacing.md",
          },
          "fixable": "whitespace",
          "messages": {
            "afterOpenNeedSpace": "A space is required after opening bracket",
            "afterOpenNoSpace": "A space is forbidden after opening bracket",
            "beforeCloseNeedNewline": "A newline is required before closing bracket",
            "beforeCloseNeedSpace": "Whitespace is required before closing bracket",
            "beforeCloseNoSpace": "A space is forbidden before closing bracket",
            "beforeSelfCloseNeedNewline": "A newline is required before closing bracket",
            "beforeSelfCloseNeedSpace": "A space is required before closing bracket",
            "beforeSelfCloseNoSpace": "A space is forbidden before closing bracket",
            "closeSlashNeedSpace": "Whitespace is required between \`<\` and \`/\`; write \`< /\`",
            "closeSlashNoSpace": "Whitespace is forbidden between \`<\` and \`/\`; write \`</\`",
            "selfCloseSlashNeedSpace": "Whitespace is required between \`/\` and \`>\`; write \`/ >\`",
            "selfCloseSlashNoSpace": "Whitespace is forbidden between \`/\` and \`>\`; write \`/>\`",
          },
          "schema": [
            {
              "additionalProperties": false,
              "default": {
                "afterOpening": "never",
                "beforeClosing": "allow",
                "beforeSelfClosing": "always",
                "closingSlash": "never",
              },
              "properties": {
                "afterOpening": {
                  "enum": [
                    "always",
                    "allow-multiline",
                    "never",
                    "allow",
                  ],
                },
                "beforeClosing": {
                  "enum": [
                    "always",
                    "proportional-always",
                    "never",
                    "allow",
                  ],
                },
                "beforeSelfClosing": {
                  "enum": [
                    "always",
                    "proportional-always",
                    "never",
                    "allow",
                  ],
                },
                "closingSlash": {
                  "enum": [
                    "always",
                    "never",
                    "allow",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-uses-react": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow React to be incorrectly marked as unused",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-react.md",
          },
          "schema": [],
        },
      },
      "jsx-uses-vars": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow variables used in JSX to be incorrectly marked as unused",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-vars.md",
          },
          "schema": [],
        },
      },
      "jsx-wrap-multilines": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow missing parentheses around multiline JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-wrap-multilines.md",
          },
          "fixable": "code",
          "messages": {
            "missingParens": "Missing parentheses around multilines JSX",
            "parensOnNewLines": "Parentheses around JSX should be on separate lines",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "arrow": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                  ],
                },
                "assignment": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                  ],
                },
                "condition": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                  ],
                },
                "declaration": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                  ],
                },
                "logical": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                  ],
                },
                "prop": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                  ],
                },
                "return": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-access-state-in-setstate": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow when this.state is accessed within setState",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-access-state-in-setstate.md",
          },
          "messages": {
            "useCallback": "Use callback in setState when referencing the previous state.",
          },
        },
      },
      "no-adjacent-inline-elements": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow adjacent inline elements not separated by whitespace.",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-adjacent-inline-elements.md",
          },
          "messages": {
            "inlineElement": "Child elements which render as inline HTML elements should be separated by a space or wrapped in block level elements.",
          },
          "schema": [],
        },
      },
      "no-array-index-key": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of Array index in keys",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-array-index-key.md",
          },
          "messages": {
            "noArrayIndex": "Do not use Array index in keys",
          },
          "schema": [],
        },
      },
      "no-arrow-function-lifecycle": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Lifecycle methods should be methods on the prototype, not class fields",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-arrow-function-lifecycle.md",
          },
          "fixable": "code",
          "messages": {
            "lifecycle": "{{propertyName}} is a React lifecycle method, and should not be an arrow function or in a class field. Use an instance method instead.",
          },
          "schema": [],
        },
      },
      "no-children-prop": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow passing of children as props",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-children-prop.md",
          },
          "messages": {
            "nestChildren": "Do not pass children as props. Instead, nest children between the opening and closing tags.",
            "nestFunction": "Do not nest a function between the opening and closing tags. Instead, pass it as a prop.",
            "passChildrenAsArgs": "Do not pass children as props. Instead, pass them as additional arguments to React.createElement.",
            "passFunctionAsArgs": "Do not pass a function as an additional argument to React.createElement. Instead, pass it as a prop.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowFunctions": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-danger": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of dangerous JSX properties",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger.md",
          },
          "messages": {
            "dangerousProp": "Dangerous property '{{name}}' found",
          },
          "schema": [],
        },
      },
      "no-danger-with-children": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow when a DOM element is using both children and dangerouslySetInnerHTML",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger-with-children.md",
          },
          "messages": {
            "dangerWithChildren": "Only set one of \`children\` or \`props.dangerouslySetInnerHTML\`",
          },
          "schema": [],
        },
      },
      "no-deprecated": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of deprecated methods",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-deprecated.md",
          },
          "messages": {
            "deprecated": "{{oldMethod}} is deprecated since React {{version}}{{newMethod}}{{refs}}",
          },
          "schema": [],
        },
      },
      "no-did-mount-set-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of setState in componentDidMount",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-mount-set-state.md",
          },
          "messages": {
            "noSetState": "Do not use setState in {{name}}",
          },
          "schema": [
            {
              "enum": [
                "disallow-in-func",
              ],
            },
          ],
        },
      },
      "no-did-update-set-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of setState in componentDidUpdate",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-update-set-state.md",
          },
          "messages": {
            "noSetState": "Do not use setState in {{name}}",
          },
          "schema": [
            {
              "enum": [
                "disallow-in-func",
              ],
            },
          ],
        },
      },
      "no-direct-mutation-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow direct mutation of this.state",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-direct-mutation-state.md",
          },
          "messages": {
            "noDirectMutation": "Do not mutate state directly. Use setState().",
          },
        },
      },
      "no-find-dom-node": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of findDOMNode",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-find-dom-node.md",
          },
          "messages": {
            "noFindDOMNode": "Do not use findDOMNode. It doesn’t work with function components and is deprecated in StrictMode. See https://reactjs.org/docs/react-dom.html#finddomnode",
          },
          "schema": [],
        },
      },
      "no-invalid-html-attribute": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow usage of invalid attributes",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-invalid-html-attribute.md",
          },
          "hasSuggestions": true,
          "messages": {
            "emptyIsMeaningless": "An empty “{{attributeName}}” attribute is meaningless.",
            "neverValid": "“{{reportingValue}}” is never a valid “{{attributeName}}” attribute value.",
            "noEmpty": "An empty “{{attributeName}}” attribute is meaningless.",
            "noMethod": "The ”{{attributeName}}“ attribute cannot be a method.",
            "notAlone": "“{{reportingValue}}” must be directly followed by “{{missingValue}}”.",
            "notPaired": "“{{reportingValue}}” can not be directly followed by “{{secondValue}}” without “{{missingValue}}”.",
            "notValidFor": "“{{reportingValue}}” is not a valid “{{attributeName}}” attribute value for <{{elementName}}>.",
            "onlyMeaningfulFor": "The ”{{attributeName}}“ attribute only has meaning on the tags: {{tagNames}}",
            "onlyStrings": "“{{attributeName}}” attribute only supports strings.",
            "spaceDelimited": "”{{attributeName}}“ attribute values should be space delimited.",
            "suggestRemoveDefault": ""remove {{attributeName}}"",
            "suggestRemoveEmpty": ""remove empty attribute {{attributeName}}"",
            "suggestRemoveInvalid": "“remove invalid attribute {{reportingValue}}”",
            "suggestRemoveNonString": "remove non-string value in “{{reportingValue}}”",
            "suggestRemoveWhitespaces": "remove whitespaces in “{{reportingValue}}”",
          },
          "schema": [
            {
              "items": {
                "enum": [
                  "rel",
                ],
              },
              "type": "array",
              "uniqueItems": true,
            },
          ],
          "type": "suggestion",
        },
      },
      "no-is-mounted": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of isMounted",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-is-mounted.md",
          },
          "messages": {
            "noIsMounted": "Do not use isMounted",
          },
          "schema": [],
        },
      },
      "no-multi-comp": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow multiple component definition per file",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-multi-comp.md",
          },
          "messages": {
            "onlyOneComponent": "Declare only one React component per file",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreStateless": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-namespace": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Enforce that namespaces are not used in React elements",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-namespace.md",
          },
          "messages": {
            "noNamespace": "React component {{name}} must not be in a namespace, as React does not support them",
          },
          "schema": [],
        },
      },
      "no-object-type-as-default-prop": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of referential-type variables as default param in functional component",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-object-type-as-default-prop.md",
          },
          "messages": {
            "forbiddenTypeDefaultParam": "{{propName}} has a/an {{forbiddenType}} as default prop. This could lead to potential infinite render loop in React. Use a variable reference instead of {{forbiddenType}}.",
          },
        },
      },
      "no-redundant-should-component-update": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow usage of shouldComponentUpdate when extending React.PureComponent",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-redundant-should-component-update.md",
          },
          "messages": {
            "noShouldCompUpdate": "{{component}} does not need shouldComponentUpdate when extending React.PureComponent.",
          },
          "schema": [],
        },
      },
      "no-render-return-value": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of the return value of ReactDOM.render",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-render-return-value.md",
          },
          "messages": {
            "noReturnValue": "Do not depend on the return value from {{node}}.render",
          },
          "schema": [],
        },
      },
      "no-set-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow usage of setState",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-set-state.md",
          },
          "messages": {
            "noSetState": "Do not use setState",
          },
          "schema": [],
        },
      },
      "no-string-refs": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow using string references",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-string-refs.md",
          },
          "messages": {
            "stringInRefDeprecated": "Using string literals in ref attributes is deprecated.",
            "thisRefsDeprecated": "Using this.refs is deprecated.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "noTemplateLiterals": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-this-in-sfc": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow \`this\` from being used in stateless functional components",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-this-in-sfc.md",
          },
          "messages": {
            "noThisInSFC": "Stateless functional components should not use \`this\`",
          },
          "schema": [],
        },
      },
      "no-typos": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow common typos",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-typos.md",
          },
          "messages": {
            "noPropTypesBinding": "\`'prop-types'\` imported without a local \`PropTypes\` binding.",
            "noReactBinding": "\`'react'\` imported without a local \`React\` binding.",
            "staticLifecycleMethod": "Lifecycle method should be static: {{method}}",
            "typoLifecycleMethod": "Typo in component lifecycle method declaration: {{actual}} should be {{expected}}",
            "typoPropDeclaration": "Typo in property declaration",
            "typoPropType": "Typo in declared prop type: {{name}}",
            "typoPropTypeChain": "Typo in prop type chain qualifier: {{name}}",
            "typoStaticClassProp": "Typo in static class property declaration",
          },
          "schema": [],
        },
      },
      "no-unescaped-entities": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow unescaped HTML entities from appearing in markup",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unescaped-entities.md",
          },
          "messages": {
            "unescapedEntity": "HTML entity, \`{{entity}}\` , must be escaped.",
            "unescapedEntityAlts": "\`{{entity}}\` can be escaped with {{alts}}.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "forbid": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "properties": {
                          "alternatives": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "char": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-unknown-property": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow usage of unknown DOM property",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unknown-property.md",
          },
          "fixable": "code",
          "messages": {
            "invalidPropOnTag": "Invalid property '{{name}}' found on tag '{{tagName}}', but it is only allowed on: {{allowedTags}}",
            "unknownProp": "Unknown property '{{name}}' found",
            "unknownPropWithStandardName": "Unknown property '{{name}}' found, use '{{standardName}}' instead",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-unsafe": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of unsafe lifecycle methods",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unsafe.md",
          },
          "messages": {
            "unsafeMethod": "{{method}} is unsafe for use in async rendering. Update the component to use {{newMethod}} instead. {{details}}",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "checkAliases": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-unstable-nested-components": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow creating unstable components inside components",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unstable-nested-components.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowAsProps": {
                  "type": "boolean",
                },
                "customValidators": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-unused-class-component-methods": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow declaring unused methods of component class",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-class-component-methods.md",
          },
          "messages": {
            "unused": "Unused method or property "{{name}}"",
            "unusedWithClass": "Unused method or property "{{name}}" of class "{{className}}"",
          },
          "schema": [],
        },
      },
      "no-unused-prop-types": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow definitions of unused propTypes",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-prop-types.md",
          },
          "messages": {
            "unusedPropType": "'{{name}}' PropType is defined but prop is never used",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "customValidators": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "skipShapeProps": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-unused-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow definitions of unused state",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-state.md",
          },
          "messages": {
            "unusedStateField": "Unused state field: '{{name}}'",
          },
          "schema": [],
        },
      },
      "no-will-update-set-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of setState in componentWillUpdate",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-will-update-set-state.md",
          },
          "messages": {
            "noSetState": "Do not use setState in {{name}}",
          },
          "schema": [
            {
              "enum": [
                "disallow-in-func",
              ],
            },
          ],
        },
      },
      "prefer-es6-class": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce ES5 or ES6 class for React Components",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-es6-class.md",
          },
          "messages": {
            "shouldUseCreateClass": "Component should use createClass instead of es6 class",
            "shouldUseES6Class": "Component should use es6 class instead of createClass",
          },
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
            },
          ],
        },
      },
      "prefer-exact-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Prefer exact proptype definitions",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-exact-props.md",
          },
          "messages": {
            "flow": "Component flow props should be set with exact objects.",
            "propTypes": "Component propTypes should be exact by using {{exactPropWrappers}}.",
          },
          "schema": [],
        },
      },
      "prefer-read-only-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce that props are read-only",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-read-only-props.md",
          },
          "fixable": "code",
          "messages": {
            "readOnlyProp": "Prop '{{name}}' should be read-only.",
          },
          "schema": [],
        },
      },
      "prefer-stateless-function": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce stateless components to be written as a pure function",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-stateless-function.md",
          },
          "messages": {
            "componentShouldBePure": "Component should be written as a pure function",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignorePureComponents": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "prop-types": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow missing props validation in a React component definition",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prop-types.md",
          },
          "messages": {
            "missingPropType": "'{{name}}' is missing in props validation",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "customValidators": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "skipUndeclared": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "react-in-jsx-scope": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow missing React when using JSX",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md",
          },
          "messages": {
            "notInScope": "'{{name}}' must be in scope when using JSX",
          },
          "schema": [],
        },
      },
      "require-default-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce a defaultProps definition for every prop that is not a required prop",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-default-props.md",
          },
          "messages": {
            "destructureInSignature": "Must destructure props in the function signature to initialize an optional prop.",
            "noDefaultPropsWithFunction": "Don’t use defaultProps with function components.",
            "noDefaultWithRequired": "propType "{{name}}" is required and should not have a defaultProps declaration.",
            "shouldAssignObjectDefault": "propType "{{name}}" is not required, but has no corresponding default argument value.",
            "shouldHaveDefault": "propType "{{name}}" is not required, but has no corresponding defaultProps declaration.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "classes": {
                  "enum": [
                    "defaultProps",
                    "ignore",
                  ],
                },
                "forbidDefaultForRequired": {
                  "type": "boolean",
                },
                "functions": {
                  "enum": [
                    "defaultArguments",
                    "defaultProps",
                    "ignore",
                  ],
                },
                "ignoreFunctionalComponents": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "require-optimization": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce React components to have a shouldComponentUpdate method",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-optimization.md",
          },
          "messages": {
            "noShouldComponentUpdate": "Component is not optimized. Please add a shouldComponentUpdate method.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowDecorators": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "require-render-return": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Enforce ES5 or ES6 class for returning value in render function",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-render-return.md",
          },
          "messages": {
            "noRenderReturn": "Your render method should have a return statement",
          },
          "schema": [],
        },
      },
      "self-closing-comp": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow extra closing tags for components without children",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/self-closing-comp.md",
          },
          "fixable": "code",
          "messages": {
            "notSelfClosing": "Empty components are self-closing",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "component": {
                  "default": true,
                  "type": "boolean",
                },
                "html": {
                  "default": true,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "sort-comp": {
        "create": [Function],
        "defaultConfig": {
          "groups": {
            "lifecycle": [
              "displayName",
              "propTypes",
              "contextTypes",
              "childContextTypes",
              "mixins",
              "statics",
              "defaultProps",
              "constructor",
              "getDefaultProps",
              "state",
              "getInitialState",
              "getChildContext",
              "getDerivedStateFromProps",
              "componentWillMount",
              "UNSAFE_componentWillMount",
              "componentDidMount",
              "componentWillReceiveProps",
              "UNSAFE_componentWillReceiveProps",
              "shouldComponentUpdate",
              "componentWillUpdate",
              "UNSAFE_componentWillUpdate",
              "getSnapshotBeforeUpdate",
              "componentDidUpdate",
              "componentDidCatch",
              "componentWillUnmount",
            ],
          },
          "order": [
            "static-methods",
            "lifecycle",
            "everything-else",
            "render",
          ],
        },
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce component methods order",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-comp.md",
          },
          "messages": {
            "unsortedProps": "{{propA}} should be placed {{position}} {{propB}}",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "groups": {
                  "patternProperties": {
                    "^.*$": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
                "order": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "sort-default-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce defaultProps declarations alphabetical sorting",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-default-props.md",
          },
          "messages": {
            "propsNotSorted": "Default prop types declarations should be sorted alphabetically",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreCase": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "sort-prop-types": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce propTypes declarations alphabetical sorting",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-prop-types.md",
          },
          "fixable": "code",
          "messages": {
            "callbackPropsLast": "Callback prop types must be listed after all other prop types",
            "propsNotSorted": "Prop types declarations should be sorted alphabetically",
            "requiredPropsFirst": "Required prop types must be listed before all other prop types",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "callbacksLast": {
                  "type": "boolean",
                },
                "ignoreCase": {
                  "type": "boolean",
                },
                "noSortAlphabetically": {
                  "type": "boolean",
                },
                "requiredFirst": {
                  "type": "boolean",
                },
                "sortShapeProp": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "state-in-constructor": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce class component state initialization style",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/state-in-constructor.md",
          },
          "messages": {
            "stateInitClassProp": "State initialization should be in a class property",
            "stateInitConstructor": "State initialization should be in a constructor",
          },
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
            },
          ],
        },
      },
      "static-property-placement": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforces where React component static properties should be positioned.",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/static-property-placement.md",
          },
          "fixable": null,
          "messages": {
            "declareOutsideClass": "'{{name}}' should be declared outside the class body.",
            "notGetterClassFunc": "'{{name}}' should be declared as a static getter class function.",
            "notStaticClassProp": "'{{name}}' should be declared as a static class property.",
          },
          "schema": [
            {
              "enum": [
                "static public field",
                "static getter",
                "property assignment",
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "childContextTypes": {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
                "contextType": {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
                "contextTypes": {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
                "defaultProps": {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
                "displayName": {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
                "propTypes": {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "style-prop-object": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Enforce style prop value is an object",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/style-prop-object.md",
          },
          "messages": {
            "stylePropNotObject": "Style prop value must be an object",
          },
          "schema": [
            {
              "properties": {
                "allow": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "void-dom-elements-no-children": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow void DOM elements (e.g. \`<img />\`, \`<br />\`) from receiving children",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/void-dom-elements-no-children.md",
          },
          "messages": {
            "noChildrenInVoidEl": "Void DOM element <{{element}} /> cannot receive children.",
          },
          "schema": [],
        },
      },
    },
  },
  "react-hooks": {
    "configs": {
      "recommended": {
        "plugins": [
          "react-hooks",
        ],
        "rules": {
          "react-hooks/exhaustive-deps": "warn",
          "react-hooks/rules-of-hooks": "error",
        },
      },
    },
    "rules": {
      "exhaustive-deps": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "verifies the list of dependencies for Hooks like useEffect and similar",
            "recommended": true,
            "url": "https://github.com/facebook/react/issues/14920",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "schema": [
            {
              "additionalProperties": false,
              "enableDangerousAutofixThisMayCauseInfiniteLoops": false,
              "properties": {
                "additionalHooks": {
                  "type": "string",
                },
                "enableDangerousAutofixThisMayCauseInfiniteLoops": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "rules-of-hooks": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "enforces the Rules of Hooks",
            "recommended": true,
            "url": "https://reactjs.org/docs/hooks-rules.html",
          },
          "type": "problem",
        },
      },
    },
  },
  "use-macros": {
    "meta": {
      "name": "eslint-plugin-use-macros",
    },
    "rules": {
      "graphql-tag": {
        "create": [Function],
        "meta": {
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "error",
                "warn",
                "off",
              ],
            },
          ],
          "type": "suggestion",
        },
      },
      "styled-components": {
        "create": [Function],
        "meta": {
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "error",
                "warn",
                "off",
              ],
            },
          ],
          "type": "suggestion",
        },
      },
    },
  },
  "wantedly": {
    "meta": {
      "name": "eslint-plugin-wantedly",
    },
    "rules": {
      "graphql-operation-name": {
        "create": [Function],
        "meta": {
          "docs": {
            "url": "https://github.com/wantedly/frolint/tree/master/packages/eslint-plugin-wantedly/docs/rules/graphql-operation-name.md",
          },
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "error",
                "warn",
                "off",
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "autofix": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "graphql-pascal-case-type-name": {
        "create": [Function],
        "meta": {
          "docs": {
            "url": "https://github.com/wantedly/frolint/tree/master/packages/eslint-plugin-wantedly/docs/rules/graphql-pascal-case-type-name.md",
          },
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "error",
                "warn",
                "off",
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "autofix": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "nexus-camel-case-field-name": {
        "create": [Function],
        "meta": {
          "docs": {
            "url": "https://github.com/wantedly/frolint/tree/master/packages/eslint-plugin-wantedly/docs/rules/nexus-camel-case-field-name.md",
          },
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "error",
                "warn",
                "off",
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "autofix": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "nexus-enum-values-description": {
        "create": [Function],
        "meta": {
          "docs": {
            "url": "https://github.com/wantedly/frolint/tree/master/packages/eslint-plugin-wantedly/docs/rules/nexus-enum-values-description.md",
          },
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "error",
                "warn",
                "off",
              ],
            },
          ],
          "type": "suggestion",
        },
      },
      "nexus-field-description": {
        "create": [Function],
        "meta": {
          "docs": {
            "url": "https://github.com/wantedly/frolint/tree/master/packages/eslint-plugin-wantedly/docs/rules/nexus-field-description.md",
          },
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "error",
                "warn",
                "off",
              ],
            },
          ],
          "type": "suggestion",
        },
      },
      "nexus-pascal-case-type-name": {
        "create": [Function],
        "meta": {
          "docs": {
            "url": "https://github.com/wantedly/frolint/tree/master/packages/eslint-plugin-wantedly/docs/rules/nexus-pascal-case-type-name.md",
          },
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "error",
                "warn",
                "off",
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "autofix": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "nexus-type-description": {
        "create": [Function],
        "meta": {
          "docs": {
            "url": "https://github.com/wantedly/frolint/tree/master/packages/eslint-plugin-wantedly/docs/rules/nexus-type-description.md",
          },
          "schema": [
            {
              "enum": [
                "error",
                "warn",
                "off",
              ],
            },
          ],
          "type": "suggestion",
        },
      },
      "nexus-upper-case-enum-members": {
        "create": [Function],
        "meta": {
          "docs": {
            "url": "https://github.com/wantedly/frolint/tree/master/packages/eslint-plugin-wantedly/docs/rules/nexus-upper-case-enum-members.md",
          },
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "error",
                "warn",
                "off",
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "autofix": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
    },
  },
}
`;

exports[`eslint-config-wantedly-typescript should match snapshot for: rules 1`] = `
{
  "@babel/object-curly-spacing": [
    0,
  ],
  "@babel/semi": [
    0,
  ],
  "@typescript-eslint/adjacent-overload-signatures": [
    2,
  ],
  "@typescript-eslint/array-type": [
    0,
  ],
  "@typescript-eslint/ban-ts-comment": [
    2,
  ],
  "@typescript-eslint/ban-tslint-comment": [
    0,
  ],
  "@typescript-eslint/ban-types": [
    2,
  ],
  "@typescript-eslint/block-spacing": [
    0,
  ],
  "@typescript-eslint/brace-style": [
    0,
  ],
  "@typescript-eslint/class-literal-property-style": [
    0,
  ],
  "@typescript-eslint/comma-dangle": [
    0,
  ],
  "@typescript-eslint/comma-spacing": [
    0,
  ],
  "@typescript-eslint/consistent-generic-constructors": [
    0,
  ],
  "@typescript-eslint/consistent-indexed-object-style": [
    0,
  ],
  "@typescript-eslint/consistent-type-assertions": [
    0,
  ],
  "@typescript-eslint/consistent-type-definitions": [
    0,
  ],
  "@typescript-eslint/explicit-function-return-type": [
    0,
  ],
  "@typescript-eslint/explicit-member-accessibility": [
    2,
    {
      "overrides": {
        "accessors": "no-public",
        "constructors": "no-public",
        "parameterProperties": "no-public",
      },
    },
  ],
  "@typescript-eslint/explicit-module-boundary-types": [
    0,
  ],
  "@typescript-eslint/func-call-spacing": [
    2,
    "never",
  ],
  "@typescript-eslint/indent": [
    0,
  ],
  "@typescript-eslint/key-spacing": [
    0,
  ],
  "@typescript-eslint/keyword-spacing": [
    0,
  ],
  "@typescript-eslint/lines-around-comment": [
    0,
  ],
  "@typescript-eslint/member-delimiter-style": [
    0,
  ],
  "@typescript-eslint/no-array-constructor": [
    2,
  ],
  "@typescript-eslint/no-confusing-non-null-assertion": [
    0,
  ],
  "@typescript-eslint/no-duplicate-enum-values": [
    2,
  ],
  "@typescript-eslint/no-empty-function": [
    2,
  ],
  "@typescript-eslint/no-empty-interface": [
    2,
  ],
  "@typescript-eslint/no-explicit-any": [
    0,
  ],
  "@typescript-eslint/no-extra-non-null-assertion": [
    2,
  ],
  "@typescript-eslint/no-extra-parens": [
    0,
  ],
  "@typescript-eslint/no-extra-semi": [
    0,
  ],
  "@typescript-eslint/no-floating-promises": [
    2,
  ],
  "@typescript-eslint/no-inferrable-types": [
    2,
  ],
  "@typescript-eslint/no-loss-of-precision": [
    2,
  ],
  "@typescript-eslint/no-misused-new": [
    2,
  ],
  "@typescript-eslint/no-namespace": [
    2,
  ],
  "@typescript-eslint/no-non-null-asserted-optional-chain": [
    2,
  ],
  "@typescript-eslint/no-non-null-assertion": [
    1,
  ],
  "@typescript-eslint/no-redeclare": [
    2,
  ],
  "@typescript-eslint/no-this-alias": [
    2,
  ],
  "@typescript-eslint/no-unnecessary-type-constraint": [
    2,
  ],
  "@typescript-eslint/no-unsafe-declaration-merging": [
    2,
  ],
  "@typescript-eslint/no-unused-vars": [
    2,
    {
      "argsIgnorePattern": "^_",
      "ignoreRestSiblings": true,
      "varsIgnorePattern": "^_",
    },
  ],
  "@typescript-eslint/no-use-before-define": [
    0,
  ],
  "@typescript-eslint/no-useless-constructor": [
    0,
  ],
  "@typescript-eslint/no-var-requires": [
    2,
  ],
  "@typescript-eslint/object-curly-spacing": [
    0,
  ],
  "@typescript-eslint/prefer-as-const": [
    2,
  ],
  "@typescript-eslint/prefer-for-of": [
    0,
  ],
  "@typescript-eslint/prefer-function-type": [
    0,
  ],
  "@typescript-eslint/prefer-namespace-keyword": [
    2,
  ],
  "@typescript-eslint/quotes": [
    0,
  ],
  "@typescript-eslint/semi": [
    2,
    "always",
  ],
  "@typescript-eslint/space-before-blocks": [
    0,
  ],
  "@typescript-eslint/space-before-function-paren": [
    0,
  ],
  "@typescript-eslint/space-infix-ops": [
    0,
  ],
  "@typescript-eslint/triple-slash-reference": [
    2,
  ],
  "@typescript-eslint/type-annotation-spacing": [
    0,
  ],
  "array-bracket-newline": [
    0,
  ],
  "array-bracket-spacing": [
    0,
  ],
  "array-callback-return": [
    0,
  ],
  "array-element-newline": [
    0,
  ],
  "arrow-body-style": [
    0,
  ],
  "arrow-parens": [
    1,
    "always",
  ],
  "arrow-spacing": [
    0,
  ],
  "babel/object-curly-spacing": [
    0,
  ],
  "babel/quotes": [
    0,
  ],
  "babel/semi": [
    0,
  ],
  "block-spacing": [
    0,
  ],
  "brace-style": [
    0,
  ],
  "camelcase": [
    2,
    {
      "ignoreDestructuring": true,
      "ignoreGlobals": false,
      "ignoreImports": false,
      "properties": "never",
    },
  ],
  "class-methods-use-this": [
    0,
  ],
  "comma-dangle": [
    2,
    {
      "arrays": "always-multiline",
      "exports": "always-multiline",
      "functions": "never",
      "imports": "always-multiline",
      "objects": "always-multiline",
    },
  ],
  "comma-spacing": [
    0,
  ],
  "comma-style": [
    0,
  ],
  "computed-property-spacing": [
    0,
  ],
  "consistent-return": [
    0,
  ],
  "constructor-super": [
    2,
  ],
  "curly": [
    0,
  ],
  "dot-location": [
    0,
  ],
  "dot-notation": [
    1,
  ],
  "eol-last": [
    0,
  ],
  "eqeqeq": [
    2,
    "smart",
  ],
  "flowtype/boolean-style": [
    0,
  ],
  "flowtype/delimiter-dangle": [
    0,
  ],
  "flowtype/generic-spacing": [
    0,
  ],
  "flowtype/object-type-curly-spacing": [
    0,
  ],
  "flowtype/object-type-delimiter": [
    0,
  ],
  "flowtype/quotes": [
    0,
  ],
  "flowtype/semi": [
    0,
  ],
  "flowtype/space-after-type-colon": [
    0,
  ],
  "flowtype/space-before-generic-bracket": [
    0,
  ],
  "flowtype/space-before-type-colon": [
    0,
  ],
  "flowtype/union-intersection-spacing": [
    0,
  ],
  "for-direction": [
    2,
  ],
  "func-call-spacing": [
    0,
  ],
  "function-call-argument-newline": [
    0,
  ],
  "function-paren-newline": [
    0,
  ],
  "generator-star": [
    0,
  ],
  "generator-star-spacing": [
    0,
  ],
  "getter-return": [
    2,
  ],
  "implicit-arrow-linebreak": [
    0,
  ],
  "import/extensions": [
    0,
  ],
  "import/first": [
    1,
  ],
  "import/no-extraneous-dependencies": [
    0,
  ],
  "import/no-unresolved": [
    0,
  ],
  "import/prefer-default-export": [
    0,
  ],
  "indent": [
    0,
  ],
  "indent-legacy": [
    0,
  ],
  "jsx-a11y/alt-text": [
    0,
  ],
  "jsx-a11y/label-has-for": [
    0,
  ],
  "jsx-a11y/no-noninteractive-element-interactions": [
    0,
  ],
  "jsx-a11y/no-static-element-interactions": [
    0,
  ],
  "jsx-no-target-blank": [
    0,
  ],
  "jsx-quotes": [
    0,
  ],
  "key-spacing": [
    0,
  ],
  "keyword-spacing": [
    0,
  ],
  "linebreak-style": [
    2,
    "unix",
  ],
  "lines-around-comment": [
    0,
  ],
  "max-len": [
    0,
  ],
  "max-statements-per-line": [
    0,
  ],
  "multiline-ternary": [
    0,
  ],
  "new-cap": [
    2,
    {
      "capIsNew": false,
      "newIsCap": true,
      "properties": true,
    },
  ],
  "new-parens": [
    0,
  ],
  "newline-per-chained-call": [
    0,
  ],
  "no-alert": [
    0,
  ],
  "no-array-constructor": [
    0,
  ],
  "no-arrow-condition": [
    0,
  ],
  "no-case-declarations": [
    2,
  ],
  "no-class-assign": [
    2,
  ],
  "no-comma-dangle": [
    0,
  ],
  "no-compare-neg-zero": [
    2,
  ],
  "no-cond-assign": [
    1,
  ],
  "no-confusing-arrow": [
    0,
  ],
  "no-console": [
    2,
  ],
  "no-const-assign": [
    2,
  ],
  "no-constant-condition": [
    2,
  ],
  "no-control-regex": [
    2,
  ],
  "no-debugger": [
    2,
  ],
  "no-delete-var": [
    2,
  ],
  "no-dupe-args": [
    2,
  ],
  "no-dupe-class-members": [
    2,
  ],
  "no-dupe-keys": [
    2,
  ],
  "no-duplicate-case": [
    2,
  ],
  "no-else-return": [
    1,
  ],
  "no-empty": [
    2,
  ],
  "no-empty-character-class": [
    2,
  ],
  "no-empty-function": [
    0,
  ],
  "no-empty-pattern": [
    2,
  ],
  "no-ex-assign": [
    2,
  ],
  "no-extra-boolean-cast": [
    1,
  ],
  "no-extra-parens": [
    0,
  ],
  "no-extra-semi": [
    0,
  ],
  "no-fallthrough": [
    2,
  ],
  "no-floating-decimal": [
    0,
  ],
  "no-func-assign": [
    2,
  ],
  "no-global-assign": [
    2,
  ],
  "no-import-assign": [
    0,
  ],
  "no-inner-declarations": [
    2,
  ],
  "no-invalid-regexp": [
    2,
  ],
  "no-irregular-whitespace": [
    2,
  ],
  "no-lonely-if": [
    1,
  ],
  "no-loss-of-precision": [
    0,
  ],
  "no-mixed-operators": [
    1,
    {
      "allowSamePrecedence": true,
      "groups": [
        [
          "&",
          "|",
          "^",
          "~",
          "<<",
          ">>",
          ">>>",
        ],
        [
          "&&",
          "||",
        ],
      ],
    },
  ],
  "no-mixed-spaces-and-tabs": [
    0,
  ],
  "no-multi-spaces": [
    0,
  ],
  "no-multiple-empty-lines": [
    0,
  ],
  "no-nested-ternary": [
    0,
  ],
  "no-new-symbol": [
    2,
  ],
  "no-obj-calls": [
    2,
  ],
  "no-octal": [
    2,
  ],
  "no-param-reassign": [
    2,
  ],
  "no-plusplus": [
    2,
    {
      "allowForLoopAfterthoughts": true,
    },
  ],
  "no-redeclare": [
    0,
  ],
  "no-regex-spaces": [
    2,
  ],
  "no-reserved-keys": [
    0,
  ],
  "no-self-assign": [
    2,
  ],
  "no-setter-return": [
    0,
  ],
  "no-shadow": [
    0,
  ],
  "no-space-before-semi": [
    0,
  ],
  "no-spaced-func": [
    0,
  ],
  "no-sparse-arrays": [
    2,
  ],
  "no-tabs": [
    0,
  ],
  "no-this-before-super": [
    2,
  ],
  "no-trailing-spaces": [
    0,
  ],
  "no-undef": [
    2,
  ],
  "no-underscore-dangle": [
    0,
  ],
  "no-unexpected-multiline": [
    0,
  ],
  "no-unreachable": [
    2,
  ],
  "no-unsafe-finally": [
    2,
  ],
  "no-unsafe-negation": [
    2,
  ],
  "no-unused-labels": [
    2,
  ],
  "no-unused-vars": [
    0,
  ],
  "no-use-before-define": [
    0,
  ],
  "no-useless-constructor": [
    0,
  ],
  "no-useless-escape": [
    0,
  ],
  "no-var": [
    2,
  ],
  "no-whitespace-before-property": [
    0,
  ],
  "no-wrap-func": [
    0,
  ],
  "nonblock-statement-body-position": [
    0,
  ],
  "object-curly-newline": [
    0,
  ],
  "object-curly-spacing": [
    0,
  ],
  "object-property-newline": [
    0,
  ],
  "object-shorthand": [
    1,
  ],
  "one-var-declaration-per-line": [
    0,
  ],
  "operator-linebreak": [
    0,
  ],
  "padded-blocks": [
    0,
  ],
  "prefer-const": [
    1,
  ],
  "prefer-rest-params": [
    2,
  ],
  "prefer-spread": [
    2,
  ],
  "prefer-template": [
    1,
  ],
  "quote-props": [
    1,
    "as-needed",
  ],
  "quotes": [
    0,
  ],
  "react-hooks/exhaustive-deps": [
    1,
  ],
  "react-hooks/rules-of-hooks": [
    2,
  ],
  "react/display-name": [
    2,
  ],
  "react/forbid-prop-types": [
    0,
  ],
  "react/jsx-child-element-spacing": [
    0,
  ],
  "react/jsx-closing-bracket-location": [
    1,
  ],
  "react/jsx-closing-tag-location": [
    0,
  ],
  "react/jsx-curly-newline": [
    0,
  ],
  "react/jsx-curly-spacing": [
    0,
  ],
  "react/jsx-equals-spacing": [
    0,
  ],
  "react/jsx-filename-extension": [
    1,
    {
      "extensions": [
        ".jsx",
        ".tsx",
      ],
    },
  ],
  "react/jsx-first-prop-new-line": [
    0,
  ],
  "react/jsx-indent": [
    1,
    2,
  ],
  "react/jsx-indent-props": [
    1,
    2,
  ],
  "react/jsx-key": [
    2,
  ],
  "react/jsx-max-props-per-line": [
    0,
  ],
  "react/jsx-newline": [
    0,
  ],
  "react/jsx-no-bind": [
    1,
    {
      "allowArrowFunctions": true,
      "allowBind": false,
      "allowFunctions": false,
      "ignoreDOMComponents": false,
      "ignoreRefs": false,
    },
  ],
  "react/jsx-no-comment-textnodes": [
    2,
  ],
  "react/jsx-no-duplicate-props": [
    2,
  ],
  "react/jsx-no-target-blank": [
    1,
  ],
  "react/jsx-no-undef": [
    2,
  ],
  "react/jsx-one-expression-per-line": [
    0,
  ],
  "react/jsx-props-no-multi-spaces": [
    0,
  ],
  "react/jsx-space-before-closing": [
    0,
  ],
  "react/jsx-tag-spacing": [
    0,
  ],
  "react/jsx-uses-react": [
    0,
  ],
  "react/jsx-uses-vars": [
    2,
  ],
  "react/jsx-wrap-multilines": [
    1,
  ],
  "react/no-array-index-key": [
    2,
  ],
  "react/no-children-prop": [
    2,
  ],
  "react/no-danger-with-children": [
    2,
  ],
  "react/no-deprecated": [
    2,
  ],
  "react/no-did-update-set-state": [
    2,
  ],
  "react/no-direct-mutation-state": [
    2,
  ],
  "react/no-find-dom-node": [
    2,
  ],
  "react/no-is-mounted": [
    2,
  ],
  "react/no-multi-comp": [
    0,
  ],
  "react/no-render-return-value": [
    2,
  ],
  "react/no-string-refs": [
    2,
  ],
  "react/no-unescaped-entities": [
    2,
  ],
  "react/no-unknown-property": [
    2,
  ],
  "react/no-unsafe": [
    0,
  ],
  "react/no-unused-prop-types": [
    0,
  ],
  "react/prop-types": [
    0,
  ],
  "react/react-in-jsx-scope": [
    0,
  ],
  "react/require-default-props": [
    0,
  ],
  "react/require-render-return": [
    2,
  ],
  "require-yield": [
    2,
  ],
  "rest-spread-spacing": [
    0,
  ],
  "semi": [
    0,
  ],
  "semi-spacing": [
    0,
  ],
  "semi-style": [
    0,
  ],
  "space-after-function-name": [
    0,
  ],
  "space-after-keywords": [
    0,
  ],
  "space-before-blocks": [
    0,
  ],
  "space-before-function-paren": [
    1,
    {
      "anonymous": "always",
      "asyncArrow": "always",
      "named": "never",
    },
  ],
  "space-before-function-parentheses": [
    0,
  ],
  "space-before-keywords": [
    0,
  ],
  "space-in-brackets": [
    0,
  ],
  "space-in-parens": [
    0,
  ],
  "space-infix-ops": [
    0,
  ],
  "space-return-throw-case": [
    0,
  ],
  "space-unary-ops": [
    0,
  ],
  "space-unary-word-ops": [
    0,
  ],
  "standard/array-bracket-even-spacing": [
    0,
  ],
  "standard/computed-property-even-spacing": [
    0,
  ],
  "standard/object-curly-even-spacing": [
    0,
  ],
  "switch-colon-spacing": [
    0,
  ],
  "template-curly-spacing": [
    0,
  ],
  "template-tag-spacing": [
    0,
  ],
  "unicode-bom": [
    0,
  ],
  "unicorn/empty-brace-spaces": [
    0,
  ],
  "unicorn/no-nested-ternary": [
    0,
  ],
  "unicorn/number-literal-case": [
    0,
  ],
  "use-isnan": [
    2,
  ],
  "use-macros/graphql-tag": [
    2,
  ],
  "use-macros/styled-components": [
    2,
  ],
  "valid-typeof": [
    2,
  ],
  "vue/array-bracket-newline": [
    0,
  ],
  "vue/array-bracket-spacing": [
    0,
  ],
  "vue/array-element-newline": [
    0,
  ],
  "vue/arrow-spacing": [
    0,
  ],
  "vue/block-spacing": [
    0,
  ],
  "vue/block-tag-newline": [
    0,
  ],
  "vue/brace-style": [
    0,
  ],
  "vue/comma-dangle": [
    0,
  ],
  "vue/comma-spacing": [
    0,
  ],
  "vue/comma-style": [
    0,
  ],
  "vue/dot-location": [
    0,
  ],
  "vue/func-call-spacing": [
    0,
  ],
  "vue/html-closing-bracket-newline": [
    0,
  ],
  "vue/html-closing-bracket-spacing": [
    0,
  ],
  "vue/html-end-tags": [
    0,
  ],
  "vue/html-indent": [
    0,
  ],
  "vue/html-quotes": [
    0,
  ],
  "vue/html-self-closing": [
    0,
  ],
  "vue/key-spacing": [
    0,
  ],
  "vue/keyword-spacing": [
    0,
  ],
  "vue/max-attributes-per-line": [
    0,
  ],
  "vue/max-len": [
    0,
  ],
  "vue/multiline-html-element-content-newline": [
    0,
  ],
  "vue/multiline-ternary": [
    0,
  ],
  "vue/mustache-interpolation-spacing": [
    0,
  ],
  "vue/no-extra-parens": [
    0,
  ],
  "vue/no-multi-spaces": [
    0,
  ],
  "vue/no-spaces-around-equal-signs-in-attribute": [
    0,
  ],
  "vue/object-curly-newline": [
    0,
  ],
  "vue/object-curly-spacing": [
    0,
  ],
  "vue/object-property-newline": [
    0,
  ],
  "vue/operator-linebreak": [
    0,
  ],
  "vue/quote-props": [
    0,
  ],
  "vue/script-indent": [
    0,
  ],
  "vue/singleline-html-element-content-newline": [
    0,
  ],
  "vue/space-in-parens": [
    0,
  ],
  "vue/space-infix-ops": [
    0,
  ],
  "vue/space-unary-ops": [
    0,
  ],
  "vue/template-curly-spacing": [
    0,
  ],
  "wantedly/graphql-operation-name": [
    1,
  ],
  "wrap-iife": [
    0,
  ],
  "wrap-regex": [
    0,
  ],
  "yield-star-spacing": [
    0,
  ],
}
`;
