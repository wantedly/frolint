// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`eslint-config-wantedly should match snapshot for: language 1`] = `
{
  "columnStart": 0,
  "createSourceCode": [Function],
  "fileType": "text",
  "lineStart": 1,
  "matchesSelectorClass": [Function],
  "nodeTypeKey": "type",
  "parse": [Function],
  "validateLanguageOptions": [Function],
  "visitorKeys": {
    "ArrayExpression": [
      "elements",
    ],
    "ArrayPattern": [
      "elements",
    ],
    "ArrowFunctionExpression": [
      "params",
      "body",
    ],
    "AssignmentExpression": [
      "left",
      "right",
    ],
    "AssignmentPattern": [
      "left",
      "right",
    ],
    "AwaitExpression": [
      "argument",
    ],
    "BinaryExpression": [
      "left",
      "right",
    ],
    "BlockStatement": [
      "body",
    ],
    "BreakStatement": [
      "label",
    ],
    "CallExpression": [
      "callee",
      "arguments",
    ],
    "CatchClause": [
      "param",
      "body",
    ],
    "ChainExpression": [
      "expression",
    ],
    "ClassBody": [
      "body",
    ],
    "ClassDeclaration": [
      "id",
      "superClass",
      "body",
    ],
    "ClassExpression": [
      "id",
      "superClass",
      "body",
    ],
    "ConditionalExpression": [
      "test",
      "consequent",
      "alternate",
    ],
    "ContinueStatement": [
      "label",
    ],
    "DebuggerStatement": [],
    "DoWhileStatement": [
      "body",
      "test",
    ],
    "EmptyStatement": [],
    "ExperimentalRestProperty": [
      "argument",
    ],
    "ExperimentalSpreadProperty": [
      "argument",
    ],
    "ExportAllDeclaration": [
      "exported",
      "source",
    ],
    "ExportDefaultDeclaration": [
      "declaration",
    ],
    "ExportNamedDeclaration": [
      "declaration",
      "specifiers",
      "source",
    ],
    "ExportSpecifier": [
      "exported",
      "local",
    ],
    "ExpressionStatement": [
      "expression",
    ],
    "ForInStatement": [
      "left",
      "right",
      "body",
    ],
    "ForOfStatement": [
      "left",
      "right",
      "body",
    ],
    "ForStatement": [
      "init",
      "test",
      "update",
      "body",
    ],
    "FunctionDeclaration": [
      "id",
      "params",
      "body",
    ],
    "FunctionExpression": [
      "id",
      "params",
      "body",
    ],
    "Identifier": [],
    "IfStatement": [
      "test",
      "consequent",
      "alternate",
    ],
    "ImportDeclaration": [
      "specifiers",
      "source",
    ],
    "ImportDefaultSpecifier": [
      "local",
    ],
    "ImportExpression": [
      "source",
    ],
    "ImportNamespaceSpecifier": [
      "local",
    ],
    "ImportSpecifier": [
      "imported",
      "local",
    ],
    "JSXAttribute": [
      "name",
      "value",
    ],
    "JSXClosingElement": [
      "name",
    ],
    "JSXClosingFragment": [],
    "JSXElement": [
      "openingElement",
      "children",
      "closingElement",
    ],
    "JSXEmptyExpression": [],
    "JSXExpressionContainer": [
      "expression",
    ],
    "JSXFragment": [
      "openingFragment",
      "children",
      "closingFragment",
    ],
    "JSXIdentifier": [],
    "JSXMemberExpression": [
      "object",
      "property",
    ],
    "JSXNamespacedName": [
      "namespace",
      "name",
    ],
    "JSXOpeningElement": [
      "name",
      "attributes",
    ],
    "JSXOpeningFragment": [],
    "JSXSpreadAttribute": [
      "argument",
    ],
    "JSXSpreadChild": [
      "expression",
    ],
    "JSXText": [],
    "LabeledStatement": [
      "label",
      "body",
    ],
    "Literal": [],
    "LogicalExpression": [
      "left",
      "right",
    ],
    "MemberExpression": [
      "object",
      "property",
    ],
    "MetaProperty": [
      "meta",
      "property",
    ],
    "MethodDefinition": [
      "key",
      "value",
    ],
    "NewExpression": [
      "callee",
      "arguments",
    ],
    "ObjectExpression": [
      "properties",
    ],
    "ObjectPattern": [
      "properties",
    ],
    "PrivateIdentifier": [],
    "Program": [
      "body",
    ],
    "Property": [
      "key",
      "value",
    ],
    "PropertyDefinition": [
      "key",
      "value",
    ],
    "RestElement": [
      "argument",
    ],
    "ReturnStatement": [
      "argument",
    ],
    "SequenceExpression": [
      "expressions",
    ],
    "SpreadElement": [
      "argument",
    ],
    "StaticBlock": [
      "body",
    ],
    "Super": [],
    "SwitchCase": [
      "test",
      "consequent",
    ],
    "SwitchStatement": [
      "discriminant",
      "cases",
    ],
    "TaggedTemplateExpression": [
      "tag",
      "quasi",
    ],
    "TemplateElement": [],
    "TemplateLiteral": [
      "quasis",
      "expressions",
    ],
    "ThisExpression": [],
    "ThrowStatement": [
      "argument",
    ],
    "TryStatement": [
      "block",
      "handler",
      "finalizer",
    ],
    "UnaryExpression": [
      "argument",
    ],
    "UpdateExpression": [
      "argument",
    ],
    "VariableDeclaration": [
      "declarations",
    ],
    "VariableDeclarator": [
      "id",
      "init",
    ],
    "WhileStatement": [
      "test",
      "body",
    ],
    "WithStatement": [
      "object",
      "body",
    ],
    "YieldExpression": [
      "argument",
    ],
  },
}
`;

exports[`eslint-config-wantedly should match snapshot for: languageOptions 1`] = `
{
  "ecmaVersion": 5,
  "globals": {
    "AI": false,
    "AITextSession": false,
    "AbortController": false,
    "AbortSignal": false,
    "AbsoluteOrientationSensor": false,
    "AbstractRange": false,
    "Accelerometer": false,
    "AnalyserNode": false,
    "Animation": false,
    "AnimationEffect": false,
    "AnimationEvent": false,
    "AnimationPlaybackEvent": false,
    "AnimationTimeline": false,
    "Attr": false,
    "Audio": false,
    "AudioBuffer": false,
    "AudioBufferSourceNode": false,
    "AudioContext": false,
    "AudioData": false,
    "AudioDecoder": false,
    "AudioDestinationNode": false,
    "AudioEncoder": false,
    "AudioListener": false,
    "AudioNode": false,
    "AudioParam": false,
    "AudioParamMap": false,
    "AudioProcessingEvent": false,
    "AudioScheduledSourceNode": false,
    "AudioSinkInfo": false,
    "AudioWorklet": false,
    "AudioWorkletGlobalScope": false,
    "AudioWorkletNode": false,
    "AudioWorkletProcessor": false,
    "AuthenticatorAssertionResponse": false,
    "AuthenticatorAttestationResponse": false,
    "AuthenticatorResponse": false,
    "BackgroundFetchManager": false,
    "BackgroundFetchRecord": false,
    "BackgroundFetchRegistration": false,
    "BarProp": false,
    "BaseAudioContext": false,
    "BatteryManager": false,
    "BeforeUnloadEvent": false,
    "BiquadFilterNode": false,
    "Blob": false,
    "BlobEvent": false,
    "Bluetooth": false,
    "BluetoothCharacteristicProperties": false,
    "BluetoothDevice": false,
    "BluetoothRemoteGATTCharacteristic": false,
    "BluetoothRemoteGATTDescriptor": false,
    "BluetoothRemoteGATTServer": false,
    "BluetoothRemoteGATTService": false,
    "BluetoothUUID": false,
    "BroadcastChannel": false,
    "BrowserCaptureMediaStreamTrack": false,
    "Buffer": false,
    "ByteLengthQueuingStrategy": false,
    "CDATASection": false,
    "CSS": false,
    "CSSAnimation": false,
    "CSSConditionRule": false,
    "CSSContainerRule": false,
    "CSSCounterStyleRule": false,
    "CSSFontFaceRule": false,
    "CSSFontFeatureValuesRule": false,
    "CSSFontPaletteValuesRule": false,
    "CSSGroupingRule": false,
    "CSSImageValue": false,
    "CSSImportRule": false,
    "CSSKeyframeRule": false,
    "CSSKeyframesRule": false,
    "CSSKeywordValue": false,
    "CSSLayerBlockRule": false,
    "CSSLayerStatementRule": false,
    "CSSMathClamp": false,
    "CSSMathInvert": false,
    "CSSMathMax": false,
    "CSSMathMin": false,
    "CSSMathNegate": false,
    "CSSMathProduct": false,
    "CSSMathSum": false,
    "CSSMathValue": false,
    "CSSMatrixComponent": false,
    "CSSMediaRule": false,
    "CSSNamespaceRule": false,
    "CSSNumericArray": false,
    "CSSNumericValue": false,
    "CSSPageDescriptors": false,
    "CSSPageRule": false,
    "CSSPerspective": false,
    "CSSPositionTryDescriptors": false,
    "CSSPositionTryRule": false,
    "CSSPositionValue": false,
    "CSSPropertyRule": false,
    "CSSRotate": false,
    "CSSRule": false,
    "CSSRuleList": false,
    "CSSScale": false,
    "CSSScopeRule": false,
    "CSSSkew": false,
    "CSSSkewX": false,
    "CSSSkewY": false,
    "CSSStartingStyleRule": false,
    "CSSStyleDeclaration": false,
    "CSSStyleRule": false,
    "CSSStyleSheet": false,
    "CSSStyleValue": false,
    "CSSSupportsRule": false,
    "CSSTransformComponent": false,
    "CSSTransformValue": false,
    "CSSTransition": false,
    "CSSTranslate": false,
    "CSSUnitValue": false,
    "CSSUnparsedValue": false,
    "CSSVariableReferenceValue": false,
    "CSSViewTransitionRule": false,
    "Cache": false,
    "CacheStorage": false,
    "CanvasCaptureMediaStream": false,
    "CanvasCaptureMediaStreamTrack": false,
    "CanvasGradient": false,
    "CanvasPattern": false,
    "CanvasRenderingContext2D": false,
    "CaptureController": false,
    "CaretPosition": false,
    "ChannelMergerNode": false,
    "ChannelSplitterNode": false,
    "ChapterInformation": false,
    "CharacterBoundsUpdateEvent": false,
    "CharacterData": false,
    "Clipboard": false,
    "ClipboardEvent": false,
    "ClipboardItem": false,
    "CloseEvent": false,
    "CloseWatcher": false,
    "Comment": false,
    "CompositionEvent": false,
    "CompressionStream": false,
    "ConstantSourceNode": false,
    "ContentVisibilityAutoStateChangeEvent": false,
    "ConvolverNode": false,
    "CookieChangeEvent": false,
    "CookieDeprecationLabel": false,
    "CookieStore": false,
    "CookieStoreManager": false,
    "CountQueuingStrategy": false,
    "Credential": false,
    "CredentialsContainer": false,
    "CropTarget": false,
    "Crypto": false,
    "CryptoKey": false,
    "CustomElementRegistry": false,
    "CustomEvent": false,
    "CustomStateSet": false,
    "DOMError": false,
    "DOMException": false,
    "DOMImplementation": false,
    "DOMMatrix": false,
    "DOMMatrixReadOnly": false,
    "DOMParser": false,
    "DOMPoint": false,
    "DOMPointReadOnly": false,
    "DOMQuad": false,
    "DOMRect": false,
    "DOMRectList": false,
    "DOMRectReadOnly": false,
    "DOMStringList": false,
    "DOMStringMap": false,
    "DOMTokenList": false,
    "DataTransfer": false,
    "DataTransferItem": false,
    "DataTransferItemList": false,
    "DecompressionStream": false,
    "DelayNode": false,
    "DelegatedInkTrailPresenter": false,
    "DeviceMotionEvent": false,
    "DeviceMotionEventAcceleration": false,
    "DeviceMotionEventRotationRate": false,
    "DeviceOrientationEvent": false,
    "Document": false,
    "DocumentFragment": false,
    "DocumentPictureInPicture": false,
    "DocumentPictureInPictureEvent": false,
    "DocumentTimeline": false,
    "DocumentType": false,
    "DragEvent": false,
    "DynamicsCompressorNode": false,
    "EditContext": false,
    "Element": false,
    "ElementInternals": false,
    "EncodedAudioChunk": false,
    "EncodedVideoChunk": false,
    "ErrorEvent": false,
    "Event": false,
    "EventCounts": false,
    "EventSource": false,
    "EventTarget": false,
    "External": false,
    "EyeDropper": false,
    "FeaturePolicy": false,
    "FederatedCredential": false,
    "Fence": false,
    "FencedFrameConfig": false,
    "FetchLaterResult": false,
    "File": false,
    "FileList": false,
    "FileReader": false,
    "FileSystem": false,
    "FileSystemDirectoryEntry": false,
    "FileSystemDirectoryHandle": false,
    "FileSystemDirectoryReader": false,
    "FileSystemEntry": false,
    "FileSystemFileEntry": false,
    "FileSystemFileHandle": false,
    "FileSystemHandle": false,
    "FileSystemWritableFileStream": false,
    "Float16Array": false,
    "FocusEvent": false,
    "FontData": false,
    "FontFace": false,
    "FontFaceSet": false,
    "FontFaceSetLoadEvent": false,
    "FormData": false,
    "FormDataEvent": false,
    "FragmentDirective": false,
    "GPU": false,
    "GPUAdapter": false,
    "GPUAdapterInfo": false,
    "GPUBindGroup": false,
    "GPUBindGroupLayout": false,
    "GPUBuffer": false,
    "GPUBufferUsage": false,
    "GPUCanvasContext": false,
    "GPUColorWrite": false,
    "GPUCommandBuffer": false,
    "GPUCommandEncoder": false,
    "GPUCompilationInfo": false,
    "GPUCompilationMessage": false,
    "GPUComputePassEncoder": false,
    "GPUComputePipeline": false,
    "GPUDevice": false,
    "GPUDeviceLostInfo": false,
    "GPUError": false,
    "GPUExternalTexture": false,
    "GPUInternalError": false,
    "GPUMapMode": false,
    "GPUOutOfMemoryError": false,
    "GPUPipelineError": false,
    "GPUPipelineLayout": false,
    "GPUQuerySet": false,
    "GPUQueue": false,
    "GPURenderBundle": false,
    "GPURenderBundleEncoder": false,
    "GPURenderPassEncoder": false,
    "GPURenderPipeline": false,
    "GPUSampler": false,
    "GPUShaderModule": false,
    "GPUShaderStage": false,
    "GPUSupportedFeatures": false,
    "GPUSupportedLimits": false,
    "GPUTexture": false,
    "GPUTextureUsage": false,
    "GPUTextureView": false,
    "GPUUncapturedErrorEvent": false,
    "GPUValidationError": false,
    "GainNode": false,
    "Gamepad": false,
    "GamepadAxisMoveEvent": false,
    "GamepadButton": false,
    "GamepadButtonEvent": false,
    "GamepadEvent": false,
    "GamepadHapticActuator": false,
    "GamepadPose": false,
    "Geolocation": false,
    "GeolocationCoordinates": false,
    "GeolocationPosition": false,
    "GeolocationPositionError": false,
    "GravitySensor": false,
    "Gyroscope": false,
    "HID": false,
    "HIDConnectionEvent": false,
    "HIDDevice": false,
    "HIDInputReportEvent": false,
    "HTMLAllCollection": false,
    "HTMLAnchorElement": false,
    "HTMLAreaElement": false,
    "HTMLAudioElement": false,
    "HTMLBRElement": false,
    "HTMLBaseElement": false,
    "HTMLBodyElement": false,
    "HTMLButtonElement": false,
    "HTMLCanvasElement": false,
    "HTMLCollection": false,
    "HTMLDListElement": false,
    "HTMLDataElement": false,
    "HTMLDataListElement": false,
    "HTMLDetailsElement": false,
    "HTMLDialogElement": false,
    "HTMLDirectoryElement": false,
    "HTMLDivElement": false,
    "HTMLDocument": false,
    "HTMLElement": false,
    "HTMLEmbedElement": false,
    "HTMLFencedFrameElement": false,
    "HTMLFieldSetElement": false,
    "HTMLFontElement": false,
    "HTMLFormControlsCollection": false,
    "HTMLFormElement": false,
    "HTMLFrameElement": false,
    "HTMLFrameSetElement": false,
    "HTMLHRElement": false,
    "HTMLHeadElement": false,
    "HTMLHeadingElement": false,
    "HTMLHtmlElement": false,
    "HTMLIFrameElement": false,
    "HTMLImageElement": false,
    "HTMLInputElement": false,
    "HTMLLIElement": false,
    "HTMLLabelElement": false,
    "HTMLLegendElement": false,
    "HTMLLinkElement": false,
    "HTMLMapElement": false,
    "HTMLMarqueeElement": false,
    "HTMLMediaElement": false,
    "HTMLMenuElement": false,
    "HTMLMetaElement": false,
    "HTMLMeterElement": false,
    "HTMLModElement": false,
    "HTMLOListElement": false,
    "HTMLObjectElement": false,
    "HTMLOptGroupElement": false,
    "HTMLOptionElement": false,
    "HTMLOptionsCollection": false,
    "HTMLOutputElement": false,
    "HTMLParagraphElement": false,
    "HTMLParamElement": false,
    "HTMLPictureElement": false,
    "HTMLPreElement": false,
    "HTMLProgressElement": false,
    "HTMLQuoteElement": false,
    "HTMLScriptElement": false,
    "HTMLSelectElement": false,
    "HTMLSlotElement": false,
    "HTMLSourceElement": false,
    "HTMLSpanElement": false,
    "HTMLStyleElement": false,
    "HTMLTableCaptionElement": false,
    "HTMLTableCellElement": false,
    "HTMLTableColElement": false,
    "HTMLTableElement": false,
    "HTMLTableRowElement": false,
    "HTMLTableSectionElement": false,
    "HTMLTemplateElement": false,
    "HTMLTextAreaElement": false,
    "HTMLTimeElement": false,
    "HTMLTitleElement": false,
    "HTMLTrackElement": false,
    "HTMLUListElement": false,
    "HTMLUnknownElement": false,
    "HTMLVideoElement": false,
    "HashChangeEvent": false,
    "Headers": false,
    "Highlight": false,
    "HighlightRegistry": false,
    "History": false,
    "IDBCursor": false,
    "IDBCursorWithValue": false,
    "IDBDatabase": false,
    "IDBFactory": false,
    "IDBIndex": false,
    "IDBKeyRange": false,
    "IDBObjectStore": false,
    "IDBOpenDBRequest": false,
    "IDBRequest": false,
    "IDBTransaction": false,
    "IDBVersionChangeEvent": false,
    "IIRFilterNode": false,
    "IdentityCredential": false,
    "IdentityCredentialError": false,
    "IdentityProvider": false,
    "IdleDeadline": false,
    "IdleDetector": false,
    "Image": false,
    "ImageBitmap": false,
    "ImageBitmapRenderingContext": false,
    "ImageCapture": false,
    "ImageData": false,
    "ImageDecoder": false,
    "ImageTrack": false,
    "ImageTrackList": false,
    "Ink": false,
    "InputDeviceCapabilities": false,
    "InputDeviceInfo": false,
    "InputEvent": false,
    "IntersectionObserver": false,
    "IntersectionObserverEntry": false,
    "Iterator": false,
    "Keyboard": false,
    "KeyboardEvent": false,
    "KeyboardLayoutMap": false,
    "KeyframeEffect": false,
    "LargestContentfulPaint": false,
    "LaunchParams": false,
    "LaunchQueue": false,
    "LayoutShift": false,
    "LayoutShiftAttribution": false,
    "LinearAccelerationSensor": false,
    "Location": false,
    "Lock": false,
    "LockManager": false,
    "MIDIAccess": false,
    "MIDIConnectionEvent": false,
    "MIDIInput": false,
    "MIDIInputMap": false,
    "MIDIMessageEvent": false,
    "MIDIOutput": false,
    "MIDIOutputMap": false,
    "MIDIPort": false,
    "MathMLElement": false,
    "MediaCapabilities": false,
    "MediaCapabilitiesInfo": false,
    "MediaDeviceInfo": false,
    "MediaDevices": false,
    "MediaElementAudioSourceNode": false,
    "MediaEncryptedEvent": false,
    "MediaError": false,
    "MediaKeyError": false,
    "MediaKeyMessageEvent": false,
    "MediaKeySession": false,
    "MediaKeyStatusMap": false,
    "MediaKeySystemAccess": false,
    "MediaKeys": false,
    "MediaList": false,
    "MediaMetadata": false,
    "MediaQueryList": false,
    "MediaQueryListEvent": false,
    "MediaRecorder": false,
    "MediaRecorderErrorEvent": false,
    "MediaSession": false,
    "MediaSource": false,
    "MediaSourceHandle": false,
    "MediaStream": false,
    "MediaStreamAudioDestinationNode": false,
    "MediaStreamAudioSourceNode": false,
    "MediaStreamEvent": false,
    "MediaStreamTrack": false,
    "MediaStreamTrackAudioSourceNode": false,
    "MediaStreamTrackAudioStats": false,
    "MediaStreamTrackEvent": false,
    "MediaStreamTrackGenerator": false,
    "MediaStreamTrackProcessor": false,
    "MediaStreamTrackVideoStats": false,
    "MessageChannel": false,
    "MessageEvent": false,
    "MessagePort": false,
    "MimeType": false,
    "MimeTypeArray": false,
    "ModelGenericSession": false,
    "ModelManager": false,
    "MouseEvent": false,
    "MutationEvent": false,
    "MutationObserver": false,
    "MutationRecord": false,
    "NamedNodeMap": false,
    "NavigateEvent": false,
    "Navigation": false,
    "NavigationActivation": false,
    "NavigationCurrentEntryChangeEvent": false,
    "NavigationDestination": false,
    "NavigationHistoryEntry": false,
    "NavigationPreloadManager": false,
    "NavigationTransition": false,
    "Navigator": false,
    "NavigatorLogin": false,
    "NavigatorManagedData": false,
    "NavigatorUAData": false,
    "NetworkInformation": false,
    "Node": false,
    "NodeFilter": false,
    "NodeIterator": false,
    "NodeList": false,
    "NotRestoredReasonDetails": false,
    "NotRestoredReasons": false,
    "Notification": false,
    "NotifyPaintEvent": false,
    "OTPCredential": false,
    "OfflineAudioCompletionEvent": false,
    "OfflineAudioContext": false,
    "OffscreenCanvas": false,
    "OffscreenCanvasRenderingContext2D": false,
    "Option": false,
    "OrientationSensor": false,
    "OscillatorNode": false,
    "OverconstrainedError": false,
    "PERSISTENT": false,
    "PageRevealEvent": false,
    "PageSwapEvent": false,
    "PageTransitionEvent": false,
    "PannerNode": false,
    "PasswordCredential": false,
    "Path2D": false,
    "PaymentAddress": false,
    "PaymentManager": false,
    "PaymentMethodChangeEvent": false,
    "PaymentRequest": false,
    "PaymentRequestUpdateEvent": false,
    "PaymentResponse": false,
    "Performance": false,
    "PerformanceElementTiming": false,
    "PerformanceEntry": false,
    "PerformanceEventTiming": false,
    "PerformanceLongAnimationFrameTiming": false,
    "PerformanceLongTaskTiming": false,
    "PerformanceMark": false,
    "PerformanceMeasure": false,
    "PerformanceNavigation": false,
    "PerformanceNavigationTiming": false,
    "PerformanceObserver": false,
    "PerformanceObserverEntryList": false,
    "PerformancePaintTiming": false,
    "PerformanceResourceTiming": false,
    "PerformanceScriptTiming": false,
    "PerformanceServerTiming": false,
    "PerformanceTiming": false,
    "PeriodicSyncManager": false,
    "PeriodicWave": false,
    "PermissionStatus": false,
    "Permissions": false,
    "PictureInPictureEvent": false,
    "PictureInPictureWindow": false,
    "Plugin": false,
    "PluginArray": false,
    "PointerEvent": false,
    "PopStateEvent": false,
    "Presentation": false,
    "PresentationAvailability": false,
    "PresentationConnection": false,
    "PresentationConnectionAvailableEvent": false,
    "PresentationConnectionCloseEvent": false,
    "PresentationConnectionList": false,
    "PresentationReceiver": false,
    "PresentationRequest": false,
    "PressureObserver": false,
    "PressureRecord": false,
    "ProcessingInstruction": false,
    "Profiler": false,
    "ProgressEvent": false,
    "PromiseRejectionEvent": false,
    "ProtectedAudience": false,
    "PublicKeyCredential": false,
    "PushManager": false,
    "PushSubscription": false,
    "PushSubscriptionOptions": false,
    "RTCCertificate": false,
    "RTCDTMFSender": false,
    "RTCDTMFToneChangeEvent": false,
    "RTCDataChannel": false,
    "RTCDataChannelEvent": false,
    "RTCDtlsTransport": false,
    "RTCEncodedAudioFrame": false,
    "RTCEncodedVideoFrame": false,
    "RTCError": false,
    "RTCErrorEvent": false,
    "RTCIceCandidate": false,
    "RTCIceTransport": false,
    "RTCPeerConnection": false,
    "RTCPeerConnectionIceErrorEvent": false,
    "RTCPeerConnectionIceEvent": false,
    "RTCRtpReceiver": false,
    "RTCRtpScriptTransform": false,
    "RTCRtpSender": false,
    "RTCRtpTransceiver": false,
    "RTCSctpTransport": false,
    "RTCSessionDescription": false,
    "RTCStatsReport": false,
    "RTCTrackEvent": false,
    "RadioNodeList": false,
    "Range": false,
    "ReadableByteStreamController": false,
    "ReadableStream": false,
    "ReadableStreamBYOBReader": false,
    "ReadableStreamBYOBRequest": false,
    "ReadableStreamDefaultController": false,
    "ReadableStreamDefaultReader": false,
    "RelativeOrientationSensor": false,
    "RemotePlayback": false,
    "ReportingObserver": false,
    "Request": false,
    "ResizeObserver": false,
    "ResizeObserverEntry": false,
    "ResizeObserverSize": false,
    "Response": false,
    "SVGAElement": false,
    "SVGAngle": false,
    "SVGAnimateElement": false,
    "SVGAnimateMotionElement": false,
    "SVGAnimateTransformElement": false,
    "SVGAnimatedAngle": false,
    "SVGAnimatedBoolean": false,
    "SVGAnimatedEnumeration": false,
    "SVGAnimatedInteger": false,
    "SVGAnimatedLength": false,
    "SVGAnimatedLengthList": false,
    "SVGAnimatedNumber": false,
    "SVGAnimatedNumberList": false,
    "SVGAnimatedPreserveAspectRatio": false,
    "SVGAnimatedRect": false,
    "SVGAnimatedString": false,
    "SVGAnimatedTransformList": false,
    "SVGAnimationElement": false,
    "SVGCircleElement": false,
    "SVGClipPathElement": false,
    "SVGComponentTransferFunctionElement": false,
    "SVGDefsElement": false,
    "SVGDescElement": false,
    "SVGElement": false,
    "SVGEllipseElement": false,
    "SVGFEBlendElement": false,
    "SVGFEColorMatrixElement": false,
    "SVGFEComponentTransferElement": false,
    "SVGFECompositeElement": false,
    "SVGFEConvolveMatrixElement": false,
    "SVGFEDiffuseLightingElement": false,
    "SVGFEDisplacementMapElement": false,
    "SVGFEDistantLightElement": false,
    "SVGFEDropShadowElement": false,
    "SVGFEFloodElement": false,
    "SVGFEFuncAElement": false,
    "SVGFEFuncBElement": false,
    "SVGFEFuncGElement": false,
    "SVGFEFuncRElement": false,
    "SVGFEGaussianBlurElement": false,
    "SVGFEImageElement": false,
    "SVGFEMergeElement": false,
    "SVGFEMergeNodeElement": false,
    "SVGFEMorphologyElement": false,
    "SVGFEOffsetElement": false,
    "SVGFEPointLightElement": false,
    "SVGFESpecularLightingElement": false,
    "SVGFESpotLightElement": false,
    "SVGFETileElement": false,
    "SVGFETurbulenceElement": false,
    "SVGFilterElement": false,
    "SVGForeignObjectElement": false,
    "SVGGElement": false,
    "SVGGeometryElement": false,
    "SVGGradientElement": false,
    "SVGGraphicsElement": false,
    "SVGImageElement": false,
    "SVGLength": false,
    "SVGLengthList": false,
    "SVGLineElement": false,
    "SVGLinearGradientElement": false,
    "SVGMPathElement": false,
    "SVGMarkerElement": false,
    "SVGMaskElement": false,
    "SVGMatrix": false,
    "SVGMetadataElement": false,
    "SVGNumber": false,
    "SVGNumberList": false,
    "SVGPathElement": false,
    "SVGPatternElement": false,
    "SVGPoint": false,
    "SVGPointList": false,
    "SVGPolygonElement": false,
    "SVGPolylineElement": false,
    "SVGPreserveAspectRatio": false,
    "SVGRadialGradientElement": false,
    "SVGRect": false,
    "SVGRectElement": false,
    "SVGSVGElement": false,
    "SVGScriptElement": false,
    "SVGSetElement": false,
    "SVGStopElement": false,
    "SVGStringList": false,
    "SVGStyleElement": false,
    "SVGSwitchElement": false,
    "SVGSymbolElement": false,
    "SVGTSpanElement": false,
    "SVGTextContentElement": false,
    "SVGTextElement": false,
    "SVGTextPathElement": false,
    "SVGTextPositioningElement": false,
    "SVGTitleElement": false,
    "SVGTransform": false,
    "SVGTransformList": false,
    "SVGUnitTypes": false,
    "SVGUseElement": false,
    "SVGViewElement": false,
    "Scheduler": false,
    "Scheduling": false,
    "Screen": false,
    "ScreenDetailed": false,
    "ScreenDetails": false,
    "ScreenOrientation": false,
    "ScriptProcessorNode": false,
    "ScrollTimeline": false,
    "SecurityPolicyViolationEvent": false,
    "Selection": false,
    "Sensor": false,
    "SensorErrorEvent": false,
    "Serial": false,
    "SerialPort": false,
    "ServiceWorker": false,
    "ServiceWorkerContainer": false,
    "ServiceWorkerRegistration": false,
    "ShadowRoot": false,
    "SharedStorage": false,
    "SharedStorageWorklet": false,
    "SharedWorker": false,
    "SourceBuffer": false,
    "SourceBufferList": false,
    "SpeechSynthesis": false,
    "SpeechSynthesisErrorEvent": false,
    "SpeechSynthesisEvent": false,
    "SpeechSynthesisUtterance": false,
    "SpeechSynthesisVoice": false,
    "StaticRange": false,
    "StereoPannerNode": false,
    "Storage": false,
    "StorageBucket": false,
    "StorageBucketManager": false,
    "StorageEvent": false,
    "StorageManager": false,
    "StylePropertyMap": false,
    "StylePropertyMapReadOnly": false,
    "StyleSheet": false,
    "StyleSheetList": false,
    "SubmitEvent": false,
    "SubtleCrypto": false,
    "SyncManager": false,
    "TEMPORARY": false,
    "TaskAttributionTiming": false,
    "TaskController": false,
    "TaskPriorityChangeEvent": false,
    "TaskSignal": false,
    "Text": false,
    "TextDecoder": false,
    "TextDecoderStream": false,
    "TextEncoder": false,
    "TextEncoderStream": false,
    "TextEvent": false,
    "TextFormat": false,
    "TextFormatUpdateEvent": false,
    "TextMetrics": false,
    "TextTrack": false,
    "TextTrackCue": false,
    "TextTrackCueList": false,
    "TextTrackList": false,
    "TextUpdateEvent": false,
    "TimeEvent": false,
    "TimeRanges": false,
    "ToggleEvent": false,
    "Touch": false,
    "TouchEvent": false,
    "TouchList": false,
    "TrackEvent": false,
    "TransformStream": false,
    "TransformStreamDefaultController": false,
    "TransitionEvent": false,
    "TreeWalker": false,
    "TrustedHTML": false,
    "TrustedScript": false,
    "TrustedScriptURL": false,
    "TrustedTypePolicy": false,
    "TrustedTypePolicyFactory": false,
    "UIEvent": false,
    "URL": false,
    "URLPattern": false,
    "URLSearchParams": false,
    "USB": false,
    "USBAlternateInterface": false,
    "USBConfiguration": false,
    "USBConnectionEvent": false,
    "USBDevice": false,
    "USBEndpoint": false,
    "USBInTransferResult": false,
    "USBInterface": false,
    "USBIsochronousInTransferPacket": false,
    "USBIsochronousInTransferResult": false,
    "USBIsochronousOutTransferPacket": false,
    "USBIsochronousOutTransferResult": false,
    "USBOutTransferResult": false,
    "UserActivation": false,
    "VTTCue": false,
    "VTTRegion": false,
    "ValidityState": false,
    "VideoColorSpace": false,
    "VideoDecoder": false,
    "VideoEncoder": false,
    "VideoFrame": false,
    "VideoPlaybackQuality": false,
    "ViewTimeline": false,
    "ViewTransition": false,
    "ViewTransitionTypeSet": false,
    "VirtualKeyboard": false,
    "VirtualKeyboardGeometryChangeEvent": false,
    "VisibilityStateEntry": false,
    "VisualViewport": false,
    "WGSLLanguageFeatures": false,
    "WakeLock": false,
    "WakeLockSentinel": false,
    "WaveShaperNode": false,
    "WebAssembly": false,
    "WebGL2RenderingContext": false,
    "WebGLActiveInfo": false,
    "WebGLBuffer": false,
    "WebGLContextEvent": false,
    "WebGLFramebuffer": false,
    "WebGLObject": false,
    "WebGLProgram": false,
    "WebGLQuery": false,
    "WebGLRenderbuffer": false,
    "WebGLRenderingContext": false,
    "WebGLSampler": false,
    "WebGLShader": false,
    "WebGLShaderPrecisionFormat": false,
    "WebGLSync": false,
    "WebGLTexture": false,
    "WebGLTransformFeedback": false,
    "WebGLUniformLocation": false,
    "WebGLVertexArrayObject": false,
    "WebSocket": false,
    "WebSocketError": false,
    "WebSocketStream": false,
    "WebTransport": false,
    "WebTransportBidirectionalStream": false,
    "WebTransportDatagramDuplexStream": false,
    "WebTransportError": false,
    "WebTransportReceiveStream": false,
    "WebTransportSendStream": false,
    "WheelEvent": false,
    "Window": false,
    "WindowControlsOverlay": false,
    "WindowControlsOverlayGeometryChangeEvent": false,
    "Worker": false,
    "Worklet": false,
    "WorkletGlobalScope": false,
    "WritableStream": false,
    "WritableStreamDefaultController": false,
    "WritableStreamDefaultWriter": false,
    "XMLDocument": false,
    "XMLHttpRequest": false,
    "XMLHttpRequestEventTarget": false,
    "XMLHttpRequestUpload": false,
    "XMLSerializer": false,
    "XPathEvaluator": false,
    "XPathExpression": false,
    "XPathResult": false,
    "XRAnchor": false,
    "XRAnchorSet": false,
    "XRBoundedReferenceSpace": false,
    "XRCPUDepthInformation": false,
    "XRCamera": false,
    "XRDOMOverlayState": false,
    "XRDepthInformation": false,
    "XRFrame": false,
    "XRHitTestResult": false,
    "XRHitTestSource": false,
    "XRInputSource": false,
    "XRInputSourceArray": false,
    "XRInputSourceEvent": false,
    "XRInputSourcesChangeEvent": false,
    "XRLayer": false,
    "XRLightEstimate": false,
    "XRLightProbe": false,
    "XRPose": false,
    "XRRay": false,
    "XRReferenceSpace": false,
    "XRReferenceSpaceEvent": false,
    "XRRenderState": false,
    "XRRigidTransform": false,
    "XRSession": false,
    "XRSessionEvent": false,
    "XRSpace": false,
    "XRSystem": false,
    "XRTransientInputHitTestResult": false,
    "XRTransientInputHitTestSource": false,
    "XRView": false,
    "XRViewerPose": false,
    "XRViewport": false,
    "XRWebGLBinding": false,
    "XRWebGLDepthInformation": false,
    "XRWebGLLayer": false,
    "XSLTProcessor": false,
    "__dirname": false,
    "__filename": false,
    "addEventListener": false,
    "afterAll": false,
    "afterEach": false,
    "ai": false,
    "alert": false,
    "atob": false,
    "beforeAll": false,
    "beforeEach": false,
    "blur": false,
    "btoa": false,
    "caches": false,
    "cancelAnimationFrame": false,
    "cancelIdleCallback": false,
    "clearImmediate": false,
    "clearInterval": false,
    "clearTimeout": false,
    "clientInformation": false,
    "close": false,
    "closed": false,
    "confirm": false,
    "console": false,
    "cookieStore": false,
    "createImageBitmap": false,
    "credentialless": false,
    "crossOriginIsolated": false,
    "crypto": false,
    "currentFrame": false,
    "currentTime": false,
    "customElements": false,
    "describe": false,
    "devicePixelRatio": false,
    "dispatchEvent": false,
    "document": false,
    "documentPictureInPicture": false,
    "event": false,
    "expect": false,
    "exports": true,
    "external": false,
    "fence": false,
    "fetch": false,
    "fetchLater": false,
    "find": false,
    "fit": false,
    "flushPromises": true,
    "focus": false,
    "frameElement": false,
    "frames": false,
    "getComputedStyle": false,
    "getScreenDetails": false,
    "getSelection": false,
    "global": false,
    "history": false,
    "indexedDB": false,
    "innerHeight": false,
    "innerWidth": false,
    "isSecureContext": false,
    "it": false,
    "jest": false,
    "launchQueue": false,
    "length": false,
    "localStorage": false,
    "location": true,
    "locationbar": false,
    "matchMedia": false,
    "menubar": false,
    "model": false,
    "module": false,
    "moveBy": false,
    "moveTo": false,
    "name": false,
    "navigation": false,
    "navigator": false,
    "offscreenBuffering": false,
    "onabort": true,
    "onafterprint": true,
    "onanimationcancel": true,
    "onanimationend": true,
    "onanimationiteration": true,
    "onanimationstart": true,
    "onappinstalled": true,
    "onauxclick": true,
    "onbeforeinput": true,
    "onbeforeinstallprompt": true,
    "onbeforematch": true,
    "onbeforeprint": true,
    "onbeforetoggle": true,
    "onbeforeunload": true,
    "onbeforexrselect": true,
    "onblur": true,
    "oncancel": true,
    "oncanplay": true,
    "oncanplaythrough": true,
    "onchange": true,
    "onclick": true,
    "onclose": true,
    "oncontentvisibilityautostatechange": true,
    "oncontextlost": true,
    "oncontextmenu": true,
    "oncontextrestored": true,
    "oncopy": true,
    "oncuechange": true,
    "oncut": true,
    "ondblclick": true,
    "ondevicemotion": true,
    "ondeviceorientation": true,
    "ondeviceorientationabsolute": true,
    "ondrag": true,
    "ondragend": true,
    "ondragenter": true,
    "ondragleave": true,
    "ondragover": true,
    "ondragstart": true,
    "ondrop": true,
    "ondurationchange": true,
    "onemptied": true,
    "onended": true,
    "onerror": true,
    "onfocus": true,
    "onformdata": true,
    "ongamepadconnected": true,
    "ongamepaddisconnected": true,
    "ongotpointercapture": true,
    "onhashchange": true,
    "oninput": true,
    "oninvalid": true,
    "onkeydown": true,
    "onkeypress": true,
    "onkeyup": true,
    "onlanguagechange": true,
    "onload": true,
    "onloadeddata": true,
    "onloadedmetadata": true,
    "onloadstart": true,
    "onlostpointercapture": true,
    "onmessage": true,
    "onmessageerror": true,
    "onmousedown": true,
    "onmouseenter": true,
    "onmouseleave": true,
    "onmousemove": true,
    "onmouseout": true,
    "onmouseover": true,
    "onmouseup": true,
    "onmousewheel": true,
    "onoffline": true,
    "ononline": true,
    "onpagehide": true,
    "onpagereveal": true,
    "onpageshow": true,
    "onpageswap": true,
    "onpaste": true,
    "onpause": true,
    "onplay": true,
    "onplaying": true,
    "onpointercancel": true,
    "onpointerdown": true,
    "onpointerenter": true,
    "onpointerleave": true,
    "onpointermove": true,
    "onpointerout": true,
    "onpointerover": true,
    "onpointerrawupdate": true,
    "onpointerup": true,
    "onpopstate": true,
    "onprogress": true,
    "onratechange": true,
    "onrejectionhandled": true,
    "onreset": true,
    "onresize": true,
    "onscroll": true,
    "onscrollend": true,
    "onsearch": true,
    "onsecuritypolicyviolation": true,
    "onseeked": true,
    "onseeking": true,
    "onselect": true,
    "onselectionchange": true,
    "onselectstart": true,
    "onslotchange": true,
    "onstalled": true,
    "onstorage": true,
    "onsubmit": true,
    "onsuspend": true,
    "ontimeupdate": true,
    "ontoggle": true,
    "ontransitioncancel": true,
    "ontransitionend": true,
    "ontransitionrun": true,
    "ontransitionstart": true,
    "onunhandledrejection": true,
    "onunload": true,
    "onvolumechange": true,
    "onwaiting": true,
    "onwheel": true,
    "open": false,
    "opener": false,
    "origin": false,
    "originAgentCluster": false,
    "outerHeight": false,
    "outerWidth": false,
    "pageXOffset": false,
    "pageYOffset": false,
    "parent": false,
    "performance": false,
    "personalbar": false,
    "postMessage": false,
    "print": false,
    "process": false,
    "prompt": false,
    "queryLocalFonts": false,
    "queueMicrotask": false,
    "registerProcessor": false,
    "removeEventListener": false,
    "reportError": false,
    "requestAnimationFrame": false,
    "requestIdleCallback": false,
    "require": false,
    "resizeBy": false,
    "resizeTo": false,
    "sampleRate": false,
    "scheduler": false,
    "screen": false,
    "screenLeft": false,
    "screenTop": false,
    "screenX": false,
    "screenY": false,
    "scroll": false,
    "scrollBy": false,
    "scrollTo": false,
    "scrollX": false,
    "scrollY": false,
    "scrollbars": false,
    "self": false,
    "sessionStorage": false,
    "setImmediate": false,
    "setInterval": false,
    "setTimeout": false,
    "sharedStorage": false,
    "showDirectoryPicker": false,
    "showOpenFilePicker": false,
    "showSaveFilePicker": false,
    "speechSynthesis": false,
    "status": false,
    "statusbar": false,
    "stop": false,
    "structuredClone": false,
    "styleMedia": false,
    "test": false,
    "toolbar": false,
    "top": false,
    "trustedTypes": false,
    "visualViewport": false,
    "window": false,
    "xdescribe": false,
    "xit": false,
    "xtest": false,
  },
  "parser": {
    "meta": {
      "name": "@babel/eslint-parser",
      "version": "7.25.1",
    },
    "parse": [Function],
    "parseForESLint": [Function],
  },
  "parserOptions": {
    "babelOptions": {
      "babelrc": false,
      "configFile": false,
    },
    "ecmaFeatures": {
      "experimentalObjectRestSpread": true,
      "jsx": true,
    },
  },
  "sourceType": "module",
}
`;

exports[`eslint-config-wantedly should match snapshot for: linterOptions 1`] = `
{
  "reportUnusedDisableDirectives": 1,
}
`;

exports[`eslint-config-wantedly should match snapshot for: plugins 1`] = `
{
  "@": {
    "languages": {
      "js": {
        "columnStart": 0,
        "createSourceCode": [Function],
        "fileType": "text",
        "lineStart": 1,
        "matchesSelectorClass": [Function],
        "nodeTypeKey": "type",
        "parse": [Function],
        "validateLanguageOptions": [Function],
        "visitorKeys": {
          "ArrayExpression": [
            "elements",
          ],
          "ArrayPattern": [
            "elements",
          ],
          "ArrowFunctionExpression": [
            "params",
            "body",
          ],
          "AssignmentExpression": [
            "left",
            "right",
          ],
          "AssignmentPattern": [
            "left",
            "right",
          ],
          "AwaitExpression": [
            "argument",
          ],
          "BinaryExpression": [
            "left",
            "right",
          ],
          "BlockStatement": [
            "body",
          ],
          "BreakStatement": [
            "label",
          ],
          "CallExpression": [
            "callee",
            "arguments",
          ],
          "CatchClause": [
            "param",
            "body",
          ],
          "ChainExpression": [
            "expression",
          ],
          "ClassBody": [
            "body",
          ],
          "ClassDeclaration": [
            "id",
            "superClass",
            "body",
          ],
          "ClassExpression": [
            "id",
            "superClass",
            "body",
          ],
          "ConditionalExpression": [
            "test",
            "consequent",
            "alternate",
          ],
          "ContinueStatement": [
            "label",
          ],
          "DebuggerStatement": [],
          "DoWhileStatement": [
            "body",
            "test",
          ],
          "EmptyStatement": [],
          "ExperimentalRestProperty": [
            "argument",
          ],
          "ExperimentalSpreadProperty": [
            "argument",
          ],
          "ExportAllDeclaration": [
            "exported",
            "source",
          ],
          "ExportDefaultDeclaration": [
            "declaration",
          ],
          "ExportNamedDeclaration": [
            "declaration",
            "specifiers",
            "source",
          ],
          "ExportSpecifier": [
            "exported",
            "local",
          ],
          "ExpressionStatement": [
            "expression",
          ],
          "ForInStatement": [
            "left",
            "right",
            "body",
          ],
          "ForOfStatement": [
            "left",
            "right",
            "body",
          ],
          "ForStatement": [
            "init",
            "test",
            "update",
            "body",
          ],
          "FunctionDeclaration": [
            "id",
            "params",
            "body",
          ],
          "FunctionExpression": [
            "id",
            "params",
            "body",
          ],
          "Identifier": [],
          "IfStatement": [
            "test",
            "consequent",
            "alternate",
          ],
          "ImportDeclaration": [
            "specifiers",
            "source",
          ],
          "ImportDefaultSpecifier": [
            "local",
          ],
          "ImportExpression": [
            "source",
          ],
          "ImportNamespaceSpecifier": [
            "local",
          ],
          "ImportSpecifier": [
            "imported",
            "local",
          ],
          "JSXAttribute": [
            "name",
            "value",
          ],
          "JSXClosingElement": [
            "name",
          ],
          "JSXClosingFragment": [],
          "JSXElement": [
            "openingElement",
            "children",
            "closingElement",
          ],
          "JSXEmptyExpression": [],
          "JSXExpressionContainer": [
            "expression",
          ],
          "JSXFragment": [
            "openingFragment",
            "children",
            "closingFragment",
          ],
          "JSXIdentifier": [],
          "JSXMemberExpression": [
            "object",
            "property",
          ],
          "JSXNamespacedName": [
            "namespace",
            "name",
          ],
          "JSXOpeningElement": [
            "name",
            "attributes",
          ],
          "JSXOpeningFragment": [],
          "JSXSpreadAttribute": [
            "argument",
          ],
          "JSXSpreadChild": [
            "expression",
          ],
          "JSXText": [],
          "LabeledStatement": [
            "label",
            "body",
          ],
          "Literal": [],
          "LogicalExpression": [
            "left",
            "right",
          ],
          "MemberExpression": [
            "object",
            "property",
          ],
          "MetaProperty": [
            "meta",
            "property",
          ],
          "MethodDefinition": [
            "key",
            "value",
          ],
          "NewExpression": [
            "callee",
            "arguments",
          ],
          "ObjectExpression": [
            "properties",
          ],
          "ObjectPattern": [
            "properties",
          ],
          "PrivateIdentifier": [],
          "Program": [
            "body",
          ],
          "Property": [
            "key",
            "value",
          ],
          "PropertyDefinition": [
            "key",
            "value",
          ],
          "RestElement": [
            "argument",
          ],
          "ReturnStatement": [
            "argument",
          ],
          "SequenceExpression": [
            "expressions",
          ],
          "SpreadElement": [
            "argument",
          ],
          "StaticBlock": [
            "body",
          ],
          "Super": [],
          "SwitchCase": [
            "test",
            "consequent",
          ],
          "SwitchStatement": [
            "discriminant",
            "cases",
          ],
          "TaggedTemplateExpression": [
            "tag",
            "quasi",
          ],
          "TemplateElement": [],
          "TemplateLiteral": [
            "quasis",
            "expressions",
          ],
          "ThisExpression": [],
          "ThrowStatement": [
            "argument",
          ],
          "TryStatement": [
            "block",
            "handler",
            "finalizer",
          ],
          "UnaryExpression": [
            "argument",
          ],
          "UpdateExpression": [
            "argument",
          ],
          "VariableDeclaration": [
            "declarations",
          ],
          "VariableDeclarator": [
            "id",
            "init",
          ],
          "WhileStatement": [
            "test",
            "body",
          ],
          "WithStatement": [
            "object",
            "body",
          ],
          "YieldExpression": [
            "argument",
          ],
        },
      },
    },
    "rules": {},
  },
  "es": {
    "configs": {
      "no-2015": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-array-from": "error",
          "es/no-array-of": "error",
          "es/no-arrow-functions": "error",
          "es/no-binary-numeric-literals": "error",
          "es/no-block-scoped-functions": "error",
          "es/no-block-scoped-variables": "error",
          "es/no-classes": "error",
          "es/no-computed-properties": "error",
          "es/no-default-parameters": "error",
          "es/no-destructuring": "error",
          "es/no-for-of-loops": "error",
          "es/no-generators": "error",
          "es/no-map": "error",
          "es/no-math-acosh": "error",
          "es/no-math-asinh": "error",
          "es/no-math-atanh": "error",
          "es/no-math-cbrt": "error",
          "es/no-math-clz32": "error",
          "es/no-math-cosh": "error",
          "es/no-math-expm1": "error",
          "es/no-math-fround": "error",
          "es/no-math-hypot": "error",
          "es/no-math-imul": "error",
          "es/no-math-log10": "error",
          "es/no-math-log1p": "error",
          "es/no-math-log2": "error",
          "es/no-math-sign": "error",
          "es/no-math-sinh": "error",
          "es/no-math-tanh": "error",
          "es/no-math-trunc": "error",
          "es/no-modules": "error",
          "es/no-new-target": "error",
          "es/no-number-epsilon": "error",
          "es/no-number-isfinite": "error",
          "es/no-number-isinteger": "error",
          "es/no-number-isnan": "error",
          "es/no-number-issafeinteger": "error",
          "es/no-number-maxsafeinteger": "error",
          "es/no-number-minsafeinteger": "error",
          "es/no-number-parsefloat": "error",
          "es/no-number-parseint": "error",
          "es/no-object-assign": "error",
          "es/no-object-getownpropertysymbols": "error",
          "es/no-object-is": "error",
          "es/no-object-setprototypeof": "error",
          "es/no-object-super-properties": "error",
          "es/no-octal-numeric-literals": "error",
          "es/no-promise": "error",
          "es/no-property-shorthands": "error",
          "es/no-proxy": "error",
          "es/no-reflect": "error",
          "es/no-regexp-u-flag": "error",
          "es/no-regexp-y-flag": "error",
          "es/no-rest-parameters": "error",
          "es/no-set": "error",
          "es/no-spread-elements": "error",
          "es/no-string-fromcodepoint": "error",
          "es/no-string-raw": "error",
          "es/no-subclassing-builtins": "error",
          "es/no-symbol": "error",
          "es/no-template-literals": "error",
          "es/no-typed-arrays": "error",
          "es/no-unicode-codepoint-escapes": "error",
          "es/no-weak-map": "error",
          "es/no-weak-set": "error",
        },
      },
      "no-2016": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-exponential-operators": "error",
        },
      },
      "no-2017": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-async-functions": "error",
          "es/no-atomics": "error",
          "es/no-object-entries": "error",
          "es/no-object-getownpropertydescriptors": "error",
          "es/no-object-values": "error",
          "es/no-shared-array-buffer": "error",
          "es/no-trailing-function-commas": "error",
        },
      },
      "no-2018": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-async-iteration": "error",
          "es/no-malformed-template-literals": "error",
          "es/no-regexp-lookbehind-assertions": "error",
          "es/no-regexp-named-capture-groups": "error",
          "es/no-regexp-s-flag": "error",
          "es/no-regexp-unicode-property-escapes": "error",
          "es/no-rest-spread-properties": "error",
        },
      },
      "no-2019": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-json-superset": "error",
          "es/no-object-fromentries": "error",
          "es/no-optional-catch-binding": "error",
          "es/no-regexp-unicode-property-escapes-2019": "error",
        },
      },
      "no-5": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-accessor-properties": "error",
          "es/no-array-isarray": "error",
          "es/no-date-now": "error",
          "es/no-json": "error",
          "es/no-keyword-properties": "error",
          "es/no-object-defineproperties": "error",
          "es/no-object-defineproperty": "error",
          "es/no-object-freeze": "error",
          "es/no-object-getownpropertydescriptor": "error",
          "es/no-object-getownpropertynames": "error",
          "es/no-object-getprototypeof": "error",
          "es/no-object-isextensible": "error",
          "es/no-object-isfrozen": "error",
          "es/no-object-issealed": "error",
          "es/no-object-keys": "error",
          "es/no-object-preventextensions": "error",
          "es/no-object-seal": "error",
          "es/no-trailing-commas": "error",
        },
      },
      "no-new-in-es2015": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-array-from": "error",
          "es/no-array-of": "error",
          "es/no-arrow-functions": "error",
          "es/no-binary-numeric-literals": "error",
          "es/no-block-scoped-functions": "error",
          "es/no-block-scoped-variables": "error",
          "es/no-classes": "error",
          "es/no-computed-properties": "error",
          "es/no-default-parameters": "error",
          "es/no-destructuring": "error",
          "es/no-for-of-loops": "error",
          "es/no-generators": "error",
          "es/no-map": "error",
          "es/no-math-acosh": "error",
          "es/no-math-asinh": "error",
          "es/no-math-atanh": "error",
          "es/no-math-cbrt": "error",
          "es/no-math-clz32": "error",
          "es/no-math-cosh": "error",
          "es/no-math-expm1": "error",
          "es/no-math-fround": "error",
          "es/no-math-hypot": "error",
          "es/no-math-imul": "error",
          "es/no-math-log10": "error",
          "es/no-math-log1p": "error",
          "es/no-math-log2": "error",
          "es/no-math-sign": "error",
          "es/no-math-sinh": "error",
          "es/no-math-tanh": "error",
          "es/no-math-trunc": "error",
          "es/no-modules": "error",
          "es/no-new-target": "error",
          "es/no-number-epsilon": "error",
          "es/no-number-isfinite": "error",
          "es/no-number-isinteger": "error",
          "es/no-number-isnan": "error",
          "es/no-number-issafeinteger": "error",
          "es/no-number-maxsafeinteger": "error",
          "es/no-number-minsafeinteger": "error",
          "es/no-number-parsefloat": "error",
          "es/no-number-parseint": "error",
          "es/no-object-assign": "error",
          "es/no-object-getownpropertysymbols": "error",
          "es/no-object-is": "error",
          "es/no-object-setprototypeof": "error",
          "es/no-object-super-properties": "error",
          "es/no-octal-numeric-literals": "error",
          "es/no-promise": "error",
          "es/no-property-shorthands": "error",
          "es/no-proxy": "error",
          "es/no-reflect": "error",
          "es/no-regexp-u-flag": "error",
          "es/no-regexp-y-flag": "error",
          "es/no-rest-parameters": "error",
          "es/no-set": "error",
          "es/no-spread-elements": "error",
          "es/no-string-fromcodepoint": "error",
          "es/no-string-raw": "error",
          "es/no-subclassing-builtins": "error",
          "es/no-symbol": "error",
          "es/no-template-literals": "error",
          "es/no-typed-arrays": "error",
          "es/no-unicode-codepoint-escapes": "error",
          "es/no-weak-map": "error",
          "es/no-weak-set": "error",
        },
      },
      "no-new-in-es2016": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-exponential-operators": "error",
        },
      },
      "no-new-in-es2017": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-async-functions": "error",
          "es/no-atomics": "error",
          "es/no-object-entries": "error",
          "es/no-object-getownpropertydescriptors": "error",
          "es/no-object-values": "error",
          "es/no-shared-array-buffer": "error",
          "es/no-trailing-function-commas": "error",
        },
      },
      "no-new-in-es2018": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-async-iteration": "error",
          "es/no-malformed-template-literals": "error",
          "es/no-regexp-lookbehind-assertions": "error",
          "es/no-regexp-named-capture-groups": "error",
          "es/no-regexp-s-flag": "error",
          "es/no-regexp-unicode-property-escapes": "error",
          "es/no-rest-spread-properties": "error",
        },
      },
      "no-new-in-es2019": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-json-superset": "error",
          "es/no-object-fromentries": "error",
          "es/no-optional-catch-binding": "error",
          "es/no-regexp-unicode-property-escapes-2019": "error",
        },
      },
      "no-new-in-es2020": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-bigint": "error",
          "es/no-dynamic-import": "error",
          "es/no-export-ns-from": "error",
          "es/no-global-this": "error",
          "es/no-import-meta": "error",
          "es/no-nullish-coalescing-operators": "error",
          "es/no-optional-chaining": "error",
          "es/no-promise-all-settled": "error",
        },
      },
      "no-new-in-es5": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-accessor-properties": "error",
          "es/no-array-isarray": "error",
          "es/no-date-now": "error",
          "es/no-json": "error",
          "es/no-keyword-properties": "error",
          "es/no-object-defineproperties": "error",
          "es/no-object-defineproperty": "error",
          "es/no-object-freeze": "error",
          "es/no-object-getownpropertydescriptor": "error",
          "es/no-object-getownpropertynames": "error",
          "es/no-object-getprototypeof": "error",
          "es/no-object-isextensible": "error",
          "es/no-object-isfrozen": "error",
          "es/no-object-issealed": "error",
          "es/no-object-keys": "error",
          "es/no-object-preventextensions": "error",
          "es/no-object-seal": "error",
          "es/no-trailing-commas": "error",
        },
      },
      "no-new-in-esnext": {
        "plugins": [
          "es",
        ],
        "rules": {
          "es/no-logical-assignment-operators": "error",
          "es/no-numeric-separators": "error",
          "es/no-promise-any": "error",
          "es/no-weakrefs": "error",
        },
      },
      "restrict-to-es2015": {
        "extends": [
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2020.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2019.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2018.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2017.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2016.js",
        ],
      },
      "restrict-to-es2016": {
        "extends": [
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2020.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2019.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2018.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2017.js",
        ],
      },
      "restrict-to-es2017": {
        "extends": [
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2020.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2019.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2018.js",
        ],
      },
      "restrict-to-es2018": {
        "extends": [
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2020.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2019.js",
        ],
      },
      "restrict-to-es2019": {
        "extends": [
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2020.js",
        ],
      },
      "restrict-to-es3": {
        "extends": [
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2020.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2019.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2018.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2017.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2016.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2015.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es5.js",
        ],
      },
      "restrict-to-es5": {
        "extends": [
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2020.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2019.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2018.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2017.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2016.js",
          "/Users/tsuyoshihara/ghq/github.com/wantedly/frolint/node_modules/eslint-plugin-es/lib/configs/no-new-in-es2015.js",
        ],
      },
    },
    "rules": {
      "no-accessor-properties": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow accessor properties.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-accessor-properties.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 accessor properties are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-array-from": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Array.from\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-array-from.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-array-isarray": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Array.isArray\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-array-isarray.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-array-of": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Array.of\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-array-of.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-arrow-functions": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow arrow function expressions.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-arrow-functions.html",
          },
          "fixable": "code",
          "messages": {
            "forbidden": "ES2015 arrow function expressions are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-async-functions": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2017",
            "description": "disallow async function declarations.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-async-functions.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2017 async function declarations are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-async-iteration": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2018",
            "description": "disallow async iteration.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-async-iteration.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2018 async iteration is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-atomics": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2017",
            "description": "disallow the \`Atomics\` class.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-atomics.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2017 '{{name}}' class is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-bigint": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2020",
            "description": "disallow \`bigint\` syntax and built-ins",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-bigint.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2020 BigInt is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-binary-numeric-literals": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow binary numeric literals.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-binary-numeric-literals.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 binary numeric literals are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-block-scoped-functions": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow block-scoped function declarations.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-block-scoped-functions.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 block-scoped functions are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-block-scoped-variables": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow block-scoped variable declarations.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-block-scoped-variables.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 block-scoped variables are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-classes": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow class declarations.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-classes.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 class declarations are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-computed-properties": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow computed properties.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-computed-properties.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 computed properties are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-date-now": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Date.now\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-date-now.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-default-parameters": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow default parameters.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-default-parameters.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 default parameters are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-destructuring": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow destructuring.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-destructuring.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 destructuring is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-dynamic-import": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2020",
            "description": "disallow \`import()\` syntax",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-dynamic-import.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2020 'import()' syntax is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-exponential-operators": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2016",
            "description": "disallow exponential operators.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-exponential-operators.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2016 exponential operators are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-export-ns-from": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2020",
            "description": "disallow \`export * as ns\`.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-export-ns-from.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2020 'export * as ns' are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-for-of-loops": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow \`for-of\` statements.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-for-of-loops.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 'for-of' statements are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-generators": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow generator function declarations.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-generators.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 generator function declarations are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-global-this": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2020",
            "description": "disallow the \`globalThis\` variable",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-global-this.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2020 '{{name}}' variable is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-import-meta": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2020",
            "description": "disallow \`import.meta\` meta property.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-import-meta.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2020 'import.meta' meta property is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-json": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`JSON\` class.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-json.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' class is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-json-superset": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2019",
            "description": "disallow \`\\u2028\` and \`\\u2029\` in string literals.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-json-superset.html",
          },
          "fixable": "code",
          "messages": {
            "forbidden": "ES2019 '\\u{{code}}' in string literals is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-keyword-properties": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow reserved words as property names.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-keyword-properties.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 reserved words as property names are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-logical-assignment-operators": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2021",
            "description": "disallow logical assignment operators.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-logical-assignment-operators.html",
          },
          "fixable": "code",
          "messages": {
            "forbidden": "ES2021 logical assignment operators are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-malformed-template-literals": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2018",
            "description": "disallow template literals with invalid escape sequences.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-malformed-template-literals.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2018 template literals with invalid escape sequences are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-map": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Map\` class.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-map.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' class is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-acosh": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.acosh\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-acosh.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-asinh": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.asinh\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-asinh.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-atanh": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.atanh\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-atanh.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-cbrt": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.cbrt\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-cbrt.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-clz32": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.clz32\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-clz32.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-cosh": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.cosh\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-cosh.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-expm1": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.expm1\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-expm1.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-fround": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.fround\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-fround.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-hypot": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.hypot\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-hypot.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-imul": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.imul\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-imul.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-log10": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.log10\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-log10.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-log1p": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.log1p\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-log1p.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-log2": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.log2\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-log2.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-sign": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.sign\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-sign.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-sinh": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.sinh\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-sinh.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-tanh": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.tanh\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-tanh.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-math-trunc": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Math.trunc\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-math-trunc.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-modules": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow modules.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-modules.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 modules are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-new-target": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow \`new.target\` meta property.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-new-target.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 'new.target' meta property is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-nullish-coalescing-operators": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2020",
            "description": "disallow nullish coalescing operators.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-nullish-coalescing-operators.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2020 nullish coalescing operators are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-number-epsilon": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Number.EPSILON\` property.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-number-epsilon.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' property is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-number-isfinite": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Number.isFinite\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-number-isfinite.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-number-isinteger": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Number.isInteger\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-number-isinteger.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-number-isnan": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Number.isNaN\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-number-isnan.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-number-issafeinteger": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Number.isSafeInteger\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-number-issafeinteger.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-number-maxsafeinteger": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Number.MAX_SAFE_INTEGER\` property.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-number-maxsafeinteger.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' property is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-number-minsafeinteger": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Number.MIN_SAFE_INTEGER\` property.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-number-minsafeinteger.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' property is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-number-parsefloat": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Number.parseFloat\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-number-parsefloat.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-number-parseint": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Number.parseInt\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-number-parseint.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-numeric-separators": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2021",
            "description": "disallow numeric separators.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-numeric-separators.html",
          },
          "fixable": "code",
          "messages": {
            "forbidden": "ES2021 numeric separators are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-assign": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Object.assign\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-assign.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-defineproperties": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Object.defineProperties\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-defineproperties.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-defineproperty": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Object.defineProperty\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-defineproperty.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-entries": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2017",
            "description": "disallow the \`Object.entries\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-entries.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2017 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-freeze": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Object.freeze\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-freeze.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-fromentries": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2019",
            "description": "disallow the \`Object.fromEntries\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-fromentries.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2019 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-getownpropertydescriptor": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Object.getOwnPropertyDescriptor\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-getownpropertydescriptor.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-getownpropertydescriptors": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2017",
            "description": "disallow the \`Object.getOwnPropertyDescriptors\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-getownpropertydescriptors.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2017 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-getownpropertynames": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Object.getOwnPropertyNames\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-getownpropertynames.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-getownpropertysymbols": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Object.getOwnPropertySymbols\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-getownpropertysymbols.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-getprototypeof": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Object.getPrototypeOf\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-getprototypeof.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-is": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Object.is\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-is.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-isextensible": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Object.isExtensible\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-isextensible.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-isfrozen": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Object.isFrozen\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-isfrozen.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-issealed": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Object.isSealed\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-issealed.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-keys": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Object.keys\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-keys.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-preventextensions": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Object.preventExtensions\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-preventextensions.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-seal": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow the \`Object.seal\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-seal.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-setprototypeof": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Object.setPrototypeOf\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-setprototypeof.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-super-properties": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow \`super\` property accesses in object literals.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-super-properties.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 'super' property accesses in object literals are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-object-values": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2017",
            "description": "disallow the \`Object.values\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-object-values.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2017 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-octal-numeric-literals": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow octal numeric literals.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-octal-numeric-literals.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 octal numeric literals are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-optional-catch-binding": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2019",
            "description": "disallow optional \`catch\` binding.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-optional-catch-binding.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2019 optional 'catch' binding is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-optional-chaining": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2020",
            "description": "disallow optional chaining.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-optional-chaining.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2020 optional chaining is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-promise": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Promise\` class.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-promise.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' class is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-promise-all-settled": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2020",
            "description": "disallow \`Promise.allSettled\` function",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-promise-all-settled.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2020 'Promise.allSettled' function is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-promise-any": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2021",
            "description": "disallow \`Promise.any\` function and \`AggregateError\` class",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-promise-any.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2021 '{{name}}' is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-property-shorthands": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow property shorthands.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-property-shorthands.html",
          },
          "fixable": "code",
          "messages": {
            "forbidden": "ES2015 property shorthands are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-proxy": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Proxy\` class.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-proxy.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' class is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-reflect": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Reflect\` class.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-reflect.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' class is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-regexp-lookbehind-assertions": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2018",
            "description": "disallow RegExp lookbehind assertions.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-regexp-lookbehind-assertions.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2018 RegExp lookbehind assertions are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-regexp-named-capture-groups": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2018",
            "description": "disallow RegExp named capture groups.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-regexp-named-capture-groups.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2018 RegExp named capture groups are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-regexp-s-flag": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2018",
            "description": "disallow RegExp \`s\` flag.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-regexp-s-flag.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2018 RegExp 's' flag is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-regexp-u-flag": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow RegExp \`u\` flag.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-regexp-u-flag.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 RegExp 'u' flag is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-regexp-unicode-property-escapes": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2018",
            "description": "disallow RegExp Unicode property escape sequences.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-regexp-unicode-property-escapes.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2018 RegExp Unicode property escape sequences are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-regexp-unicode-property-escapes-2019": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2019",
            "description": "disallow the new values of RegExp Unicode property escape sequences in ES2019",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-regexp-unicode-property-escapes-2019.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2019 '{{value}}' is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-regexp-y-flag": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow RegExp \`y\` flag.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-regexp-y-flag.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 RegExp 'y' flag is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-rest-parameters": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow rest parameters.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-rest-parameters.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 rest parameters are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-rest-spread-properties": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2018",
            "description": "disallow rest/spread properties.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-rest-spread-properties.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2018 rest/spread properties are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-set": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Set\` class.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-set.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' class is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-shared-array-buffer": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2017",
            "description": "disallow the \`SharedArrayBuffer\` class.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-shared-array-buffer.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2017 '{{name}}' class is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-spread-elements": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow spread elements.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-spread-elements.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 spread elements are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-string-fromcodepoint": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`String.fromCodePoint\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-string-fromcodepoint.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-string-raw": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`String.raw\` method.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-string-raw.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' method is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-subclassing-builtins": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the subclassing of the built-in classes.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-subclassing-builtins.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 subclassing of '{{name}}' is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-symbol": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`Symbol\` class.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-symbol.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' class is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-template-literals": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow template literals.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-template-literals.html",
          },
          "fixable": "code",
          "messages": {
            "forbidden": "ES2015 template literals are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-trailing-commas": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES5",
            "description": "disallow trailing commas in array/object literals.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-trailing-commas.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES5 trailing commas in array/object literals are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-trailing-function-commas": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2017",
            "description": "disallow trailing commas in parameter/argument lists.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-trailing-function-commas.html",
          },
          "fixable": "code",
          "messages": {
            "forbidden": "ES2017 trailing commas in parameter/argument lists are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-typed-arrays": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow ES2015 typed arrays.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-typed-arrays.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-unicode-codepoint-escapes": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow Unicode code point escape sequences.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-unicode-codepoint-escapes.html",
          },
          "fixable": "code",
          "messages": {
            "forbidden": "ES2015 Unicode code point escape sequences are forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-weak-map": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`WeakMap\` class.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-weak-map.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' class is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-weak-set": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2015",
            "description": "disallow the \`WeakSet\` class.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-weak-set.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2015 '{{name}}' class is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-weakrefs": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "ES2021",
            "description": "disallow the \`WeakRef\` and \`FinalizationRegistry\` class.",
            "recommended": false,
            "url": "http://mysticatea.github.io/eslint-plugin-es/rules/no-weakrefs.html",
          },
          "fixable": null,
          "messages": {
            "forbidden": "ES2021 '{{name}}' class is forbidden.",
          },
          "schema": [],
          "type": "problem",
        },
      },
    },
  },
  "import": {
    "configs": {
      "electron": {
        "settings": {
          "import/core-modules": [
            "electron",
          ],
        },
      },
      "errors": {
        "plugins": [
          "import",
        ],
        "rules": {
          "import/default": 2,
          "import/export": 2,
          "import/named": 2,
          "import/namespace": 2,
          "import/no-unresolved": 2,
        },
      },
      "react": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true,
          },
        },
        "settings": {
          "import/extensions": [
            ".js",
            ".jsx",
          ],
        },
      },
      "react-native": {
        "settings": {
          "import/resolver": {
            "node": {
              "extensions": [
                ".js",
                ".web.js",
                ".ios.js",
                ".android.js",
              ],
            },
          },
        },
      },
      "recommended": {
        "parserOptions": {
          "ecmaVersion": 2018,
          "sourceType": "module",
        },
        "plugins": [
          "import",
        ],
        "rules": {
          "import/default": "error",
          "import/export": "error",
          "import/named": "error",
          "import/namespace": "error",
          "import/no-duplicates": "warn",
          "import/no-named-as-default": "warn",
          "import/no-named-as-default-member": "warn",
          "import/no-unresolved": "error",
        },
      },
      "stage-0": {
        "plugins": [
          "import",
        ],
        "rules": {
          "import/no-deprecated": 1,
        },
      },
      "typescript": {
        "rules": {
          "import/named": "off",
        },
        "settings": {
          "import/extensions": [
            ".ts",
            ".cts",
            ".mts",
            ".tsx",
            ".js",
            ".jsx",
          ],
          "import/external-module-folders": [
            "node_modules",
            "node_modules/@types",
          ],
          "import/parsers": {
            "@typescript-eslint/parser": [
              ".ts",
              ".cts",
              ".mts",
              ".tsx",
            ],
          },
          "import/resolver": {
            "node": {
              "extensions": [
                ".ts",
                ".cts",
                ".mts",
                ".tsx",
                ".js",
                ".jsx",
              ],
            },
          },
        },
      },
      "warnings": {
        "plugins": [
          "import",
        ],
        "rules": {
          "import/no-duplicates": 1,
          "import/no-named-as-default": 1,
          "import/no-named-as-default-member": 1,
        },
      },
    },
    "rules": {
      "consistent-type-specifier-style": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Enforce or ban the use of inline type-only markers for named imports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/consistent-type-specifier-style.md",
          },
          "fixable": "code",
          "schema": [
            {
              "default": "prefer-inline",
              "enum": [
                "prefer-inline",
                "prefer-top-level",
              ],
              "type": "string",
            },
          ],
          "type": "suggestion",
        },
      },
      "default": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Ensure a default export is present, given a default import.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/default.md",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "dynamic-import-chunkname": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/dynamic-import-chunkname.md",
          },
          "schema": [
            {
              "properties": {
                "importFunctions": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "webpackChunknameFormat": {
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "export": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid any invalid exports, i.e. re-export of the same name.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/export.md",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "exports-last": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Ensure all exports appear after other statements.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/exports-last.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "extensions": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Ensure consistent use of file extension within the import path.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/extensions.md",
          },
          "schema": {
            "anyOf": [
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "always",
                      "ignorePackages",
                      "never",
                    ],
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "always",
                      "ignorePackages",
                      "never",
                    ],
                  },
                  {
                    "properties": {
                      "ignorePackages": {
                        "type": "boolean",
                      },
                      "pattern": {
                        "patternProperties": {
                          ".*": {
                            "enum": [
                              "always",
                              "ignorePackages",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "properties": {
                      "ignorePackages": {
                        "type": "boolean",
                      },
                      "pattern": {
                        "patternProperties": {
                          ".*": {
                            "enum": [
                              "always",
                              "ignorePackages",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "patternProperties": {
                      ".*": {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "always",
                      "ignorePackages",
                      "never",
                    ],
                  },
                  {
                    "patternProperties": {
                      ".*": {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            ],
          },
          "type": "suggestion",
        },
      },
      "first": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Ensure all imports appear before other statements.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/first.md",
          },
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "absolute-first",
                "disable-absolute-first",
              ],
              "type": "string",
            },
          ],
          "type": "suggestion",
        },
      },
      "group-exports": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Prefer named exports to be grouped together in a single export declaration",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/group-exports.md",
          },
          "type": "suggestion",
        },
      },
      "imports-first": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "category": "Style guide",
            "description": "Replaced by \`import/first\`.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md",
          },
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "absolute-first",
                "disable-absolute-first",
              ],
              "type": "string",
            },
          ],
          "type": "suggestion",
        },
      },
      "max-dependencies": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Enforce the maximum number of dependencies a module can have.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/max-dependencies.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreTypeImports": {
                  "type": "boolean",
                },
                "max": {
                  "type": "number",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "named": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Ensure named imports correspond to a named export in the remote file.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/named.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "commonjs": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "namespace": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/namespace.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowComputed": {
                  "default": false,
                  "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "newline-after-import": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Enforce a newline after import statements.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/newline-after-import.md",
          },
          "fixable": "whitespace",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "considerComments": {
                  "type": "boolean",
                },
                "count": {
                  "minimum": 1,
                  "type": "integer",
                },
                "exactCount": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "layout",
        },
      },
      "no-absolute-path": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid import of modules using absolute paths.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-absolute-path.md",
          },
          "fixable": "code",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "amd": {
                  "type": "boolean",
                },
                "commonjs": {
                  "type": "boolean",
                },
                "esmodule": {
                  "type": "boolean",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-amd": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Module systems",
            "description": "Forbid AMD \`require\` and \`define\` calls.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-amd.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-anonymous-default-export": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid anonymous values as default exports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-anonymous-default-export.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowAnonymousClass": {
                  "description": "If \`false\`, will report default export of an anonymous class",
                  "type": "boolean",
                },
                "allowAnonymousFunction": {
                  "description": "If \`false\`, will report default export of an anonymous function",
                  "type": "boolean",
                },
                "allowArray": {
                  "description": "If \`false\`, will report default export of an array",
                  "type": "boolean",
                },
                "allowArrowFunction": {
                  "description": "If \`false\`, will report default export of an arrow function",
                  "type": "boolean",
                },
                "allowCallExpression": {
                  "description": "If \`false\`, will report default export of a function call",
                  "type": "boolean",
                },
                "allowLiteral": {
                  "description": "If \`false\`, will report default export of a literal",
                  "type": "boolean",
                },
                "allowNew": {
                  "description": "If \`false\`, will report default export of a class instantiation",
                  "type": "boolean",
                },
                "allowObject": {
                  "description": "If \`false\`, will report default export of an object expression",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-commonjs": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Module systems",
            "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-commonjs.md",
          },
          "schema": {
            "anyOf": [
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "allow-primitive-modules",
                    ],
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowConditionalRequire": {
                        "type": "boolean",
                      },
                      "allowPrimitiveModules": {
                        "type": "boolean",
                      },
                      "allowRequire": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            ],
          },
          "type": "suggestion",
        },
      },
      "no-cycle": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid a module from importing a module with a dependency path back to itself.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-cycle.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowUnsafeDynamicCyclicDependency": {
                  "default": false,
                  "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                  "type": "boolean",
                },
                "amd": {
                  "type": "boolean",
                },
                "commonjs": {
                  "type": "boolean",
                },
                "esmodule": {
                  "type": "boolean",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
                "ignoreExternal": {
                  "default": false,
                  "description": "ignore external modules",
                  "type": "boolean",
                },
                "maxDepth": {
                  "anyOf": [
                    {
                      "description": "maximum dependency depth to traverse",
                      "minimum": 1,
                      "type": "integer",
                    },
                    {
                      "enum": [
                        "∞",
                      ],
                      "type": "string",
                    },
                  ],
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-default-export": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid default exports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-default-export.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-deprecated": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-deprecated.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-duplicates": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid repeated import of the same module in multiple places.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-duplicates.md",
          },
          "fixable": "code",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "considerQueryString": {
                  "type": "boolean",
                },
                "prefer-inline": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-dynamic-require": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid \`require()\` calls with expressions.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-dynamic-require.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "esmodule": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-empty-named-blocks": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid empty named import blocks.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-empty-named-blocks.md",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-extraneous-dependencies": {
        "Program:exit": [Function],
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid the use of extraneous packages.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-extraneous-dependencies.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "bundledDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
                "devDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
                "includeInternal": {
                  "type": [
                    "boolean",
                  ],
                },
                "includeTypes": {
                  "type": [
                    "boolean",
                  ],
                },
                "optionalDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
                "packageDir": {
                  "type": [
                    "string",
                    "array",
                  ],
                },
                "peerDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-import-module-exports": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Module systems",
            "description": "Forbid import statements with CommonJS module.exports.",
            "recommended": true,
          },
          "fixable": "code",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "exceptions": {
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-internal-modules": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid importing the submodules of other modules.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-internal-modules.md",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "forbid": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
          "type": "suggestion",
        },
      },
      "no-mutable-exports": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-mutable-exports.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-named-as-default": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid use of exported name as identifier of default export.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-named-as-default.md",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-named-as-default-member": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid use of exported name as property of default export.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-named-as-default-member.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-named-default": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid named default exports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-named-default.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-named-export": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid named exports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-named-export.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-namespace": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-namespace.md",
          },
          "fixable": "code",
          "schema": [
            {
              "properties": {
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-nodejs-modules": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Module systems",
            "description": "Forbid Node.js builtin modules.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-nodejs-modules.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allow": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-relative-packages": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid importing packages through relative paths.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-relative-packages.md",
          },
          "fixable": "code",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "amd": {
                  "type": "boolean",
                },
                "commonjs": {
                  "type": "boolean",
                },
                "esmodule": {
                  "type": "boolean",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-relative-parent-imports": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid importing modules from parent directories.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-relative-parent-imports.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "amd": {
                  "type": "boolean",
                },
                "commonjs": {
                  "type": "boolean",
                },
                "esmodule": {
                  "type": "boolean",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-restricted-paths": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Enforce which files can be imported in a given folder.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-restricted-paths.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "basePath": {
                  "type": "string",
                },
                "zones": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "except": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "from": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "minLength": 1,
                            "type": "array",
                            "uniqueItems": true,
                          },
                        ],
                      },
                      "message": {
                        "type": "string",
                      },
                      "target": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "items": {
                              "type": "string",
                            },
                            "minLength": 1,
                            "type": "array",
                            "uniqueItems": true,
                          },
                        ],
                      },
                    },
                    "type": "object",
                  },
                  "minItems": 1,
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-self-import": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid a module from importing itself.",
            "recommended": true,
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-self-import.md",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-unassigned-import": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Forbid unassigned imports",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-unassigned-import.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allow": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "devDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
                "optionalDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
                "peerDependencies": {
                  "type": [
                    "boolean",
                    "array",
                  ],
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-unresolved": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Ensure imports point to a file/module that can be resolved.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-unresolved.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "amd": {
                  "type": "boolean",
                },
                "caseSensitive": {
                  "default": true,
                  "type": "boolean",
                },
                "caseSensitiveStrict": {
                  "default": false,
                  "type": "boolean",
                },
                "commonjs": {
                  "type": "boolean",
                },
                "esmodule": {
                  "type": "boolean",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "no-unused-modules": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Helpful warnings",
            "description": "Forbid modules without exports, or exports without matching import in another module.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-unused-modules.md",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "properties": {
                    "src": {
                      "minItems": 1,
                    },
                    "unusedExports": {
                      "enum": [
                        true,
                      ],
                    },
                  },
                  "required": [
                    "unusedExports",
                  ],
                },
                {
                  "properties": {
                    "missingExports": {
                      "enum": [
                        true,
                      ],
                    },
                  },
                  "required": [
                    "missingExports",
                  ],
                },
              ],
              "properties": {
                "ignoreExports": {
                  "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                  "items": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "missingExports": {
                  "description": "report modules without any exports",
                  "type": "boolean",
                },
                "src": {
                  "description": "files/paths to be analyzed (only for unused exports)",
                  "items": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "unusedExports": {
                  "description": "report exports without any usage",
                  "type": "boolean",
                },
              },
            },
          ],
          "type": "suggestion",
        },
      },
      "no-useless-path-segments": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid unnecessary path segments in import and require statements.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-useless-path-segments.md",
          },
          "fixable": "code",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "commonjs": {
                  "type": "boolean",
                },
                "noUselessIndex": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-webpack-loader-syntax": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Static analysis",
            "description": "Forbid webpack loader syntax in imports.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/no-webpack-loader-syntax.md",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "order": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Enforce a convention in module import order.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/order.md",
          },
          "fixable": "code",
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "alphabetize": {
                  "additionalProperties": false,
                  "properties": {
                    "caseInsensitive": {
                      "default": false,
                      "type": "boolean",
                    },
                    "order": {
                      "default": "ignore",
                      "enum": [
                        "ignore",
                        "asc",
                        "desc",
                      ],
                    },
                    "orderImportKind": {
                      "default": "ignore",
                      "enum": [
                        "ignore",
                        "asc",
                        "desc",
                      ],
                    },
                  },
                  "type": "object",
                },
                "distinctGroup": {
                  "default": true,
                  "type": "boolean",
                },
                "groups": {
                  "type": "array",
                },
                "newlines-between": {
                  "enum": [
                    "ignore",
                    "always",
                    "always-and-inside-groups",
                    "never",
                  ],
                },
                "pathGroups": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "group": {
                        "enum": [
                          "builtin",
                          "external",
                          "internal",
                          "unknown",
                          "parent",
                          "sibling",
                          "index",
                          "object",
                          "type",
                        ],
                        "type": "string",
                      },
                      "pattern": {
                        "type": "string",
                      },
                      "patternOptions": {
                        "type": "object",
                      },
                      "position": {
                        "enum": [
                          "after",
                          "before",
                        ],
                        "type": "string",
                      },
                    },
                    "required": [
                      "pattern",
                      "group",
                    ],
                    "type": "object",
                  },
                  "type": "array",
                },
                "pathGroupsExcludedImportTypes": {
                  "type": "array",
                },
                "warnOnUnassignedImports": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "prefer-default-export": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Style guide",
            "description": "Prefer a default export if module exports a single name or multiple names.",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/prefer-default-export.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "target": {
                  "default": "single",
                  "enum": [
                    "single",
                    "any",
                  ],
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "unambiguous": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Module systems",
            "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
            "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.29.0/docs/rules/unambiguous.md",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
    },
  },
  "jest": {
    "configs": {
      "all": {
        "env": {
          "jest/globals": true,
        },
        "plugins": [
          "jest",
        ],
        "rules": {
          "jest/consistent-test-it": "error",
          "jest/expect-expect": "error",
          "jest/max-nested-describe": "error",
          "jest/no-alias-methods": "error",
          "jest/no-commented-out-tests": "error",
          "jest/no-conditional-expect": "error",
          "jest/no-deprecated-functions": "error",
          "jest/no-disabled-tests": "error",
          "jest/no-done-callback": "error",
          "jest/no-duplicate-hooks": "error",
          "jest/no-export": "error",
          "jest/no-focused-tests": "error",
          "jest/no-hooks": "error",
          "jest/no-identical-title": "error",
          "jest/no-if": "error",
          "jest/no-interpolation-in-snapshots": "error",
          "jest/no-jasmine-globals": "error",
          "jest/no-jest-import": "error",
          "jest/no-large-snapshots": "error",
          "jest/no-mocks-import": "error",
          "jest/no-restricted-matchers": "error",
          "jest/no-standalone-expect": "error",
          "jest/no-test-prefixes": "error",
          "jest/no-test-return-statement": "error",
          "jest/prefer-called-with": "error",
          "jest/prefer-comparison-matcher": "error",
          "jest/prefer-equality-matcher": "error",
          "jest/prefer-expect-assertions": "error",
          "jest/prefer-expect-resolves": "error",
          "jest/prefer-hooks-on-top": "error",
          "jest/prefer-lowercase-title": "error",
          "jest/prefer-spy-on": "error",
          "jest/prefer-strict-equal": "error",
          "jest/prefer-to-be": "error",
          "jest/prefer-to-contain": "error",
          "jest/prefer-to-have-length": "error",
          "jest/prefer-todo": "error",
          "jest/require-hook": "error",
          "jest/require-to-throw-message": "error",
          "jest/require-top-level-describe": "error",
          "jest/unbound-method": "error",
          "jest/valid-describe-callback": "error",
          "jest/valid-expect": "error",
          "jest/valid-expect-in-promise": "error",
          "jest/valid-title": "error",
        },
      },
      "recommended": {
        "env": {
          "jest/globals": true,
        },
        "plugins": [
          "jest",
        ],
        "rules": {
          "jest/expect-expect": "warn",
          "jest/no-commented-out-tests": "warn",
          "jest/no-conditional-expect": "error",
          "jest/no-deprecated-functions": "error",
          "jest/no-disabled-tests": "warn",
          "jest/no-done-callback": "error",
          "jest/no-export": "error",
          "jest/no-focused-tests": "error",
          "jest/no-identical-title": "error",
          "jest/no-interpolation-in-snapshots": "error",
          "jest/no-jasmine-globals": "error",
          "jest/no-jest-import": "error",
          "jest/no-mocks-import": "error",
          "jest/no-standalone-expect": "error",
          "jest/no-test-prefixes": "error",
          "jest/valid-describe-callback": "error",
          "jest/valid-expect": "error",
          "jest/valid-expect-in-promise": "error",
          "jest/valid-title": "error",
        },
      },
      "style": {
        "plugins": [
          "jest",
        ],
        "rules": {
          "jest/no-alias-methods": "warn",
          "jest/prefer-to-be": "error",
          "jest/prefer-to-contain": "error",
          "jest/prefer-to-have-length": "error",
        },
      },
    },
    "environments": {
      "globals": {
        "globals": {
          "afterAll": false,
          "afterEach": false,
          "beforeAll": false,
          "beforeEach": false,
          "describe": false,
          "expect": false,
          "fit": false,
          "it": false,
          "jest": false,
          "test": false,
          "xdescribe": false,
          "xit": false,
          "xtest": false,
        },
      },
    },
    "processors": {
      ".snap": {
        "postprocess": [Function],
        "preprocess": [Function],
      },
    },
    "rules": {
      "consistent-test-it": {
        "create": [Function],
        "defaultOptions": [
          {
            "fn": "test",
            "withinDescribe": "it",
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Have control over \`test\` and \`it\` usages",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/consistent-test-it.md",
          },
          "fixable": "code",
          "messages": {
            "consistentMethod": "Prefer using '{{ testKeyword }}' instead of '{{ oppositeTestKeyword }}'",
            "consistentMethodWithinDescribe": "Prefer using '{{ testKeywordWithinDescribe }}' instead of '{{ oppositeTestKeyword }}' within describe",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "fn": {
                  "enum": [
                    "it",
                    "test",
                  ],
                },
                "withinDescribe": {
                  "enum": [
                    "it",
                    "test",
                  ],
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "expect-expect": {
        "create": [Function],
        "defaultOptions": [
          {
            "additionalTestBlockFunctions": [],
            "assertFunctionNames": [
              "expect",
            ],
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce assertion to be made in a test body",
            "recommended": "warn",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/expect-expect.md",
          },
          "messages": {
            "noAssertions": "Test has no assertions",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "additionalTestBlockFunctions": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "assertFunctionNames": {
                  "items": [
                    {
                      "type": "string",
                    },
                  ],
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "max-nested-describe": {
        "create": [Function],
        "defaultOptions": [
          {
            "max": 5,
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforces a maximum depth to nested describe calls",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/max-nested-describe.md",
          },
          "messages": {
            "exceededMaxDepth": "Too many nested describe calls ({{ depth }}). Maximum allowed is {{ max }}.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "max": {
                  "minimum": 0,
                  "type": "integer",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-alias-methods": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow alias methods",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-alias-methods.md",
          },
          "fixable": "code",
          "messages": {
            "replaceAlias": "Replace {{ alias }}() with its canonical name of {{ canonical }}()",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-commented-out-tests": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow commented out tests",
            "recommended": "warn",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-commented-out-tests.md",
          },
          "messages": {
            "commentedTests": "Some tests seem to be commented",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-conditional-expect": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Prevent calling \`expect\` conditionally",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-conditional-expect.md",
          },
          "messages": {
            "conditionalExpect": "Avoid calling \`expect\` conditionally\`",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-deprecated-functions": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow use of deprecated functions",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-deprecated-functions.md",
          },
          "fixable": "code",
          "messages": {
            "deprecatedFunction": "\`{{ deprecation }}\` has been deprecated in favor of \`{{ replacement }}\`",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-disabled-tests": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow disabled tests",
            "recommended": "warn",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-disabled-tests.md",
          },
          "messages": {
            "disabledSuite": "Disabled test suite",
            "disabledTest": "Disabled test",
            "missingFunction": "Test is missing function argument",
            "pending": "Call to pending()",
            "pendingSuite": "Call to pending() within test suite",
            "pendingTest": "Call to pending() within test",
            "skippedTest": "Skipped test",
            "skippedTestSuite": "Skipped test suite",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-done-callback": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Avoid using a callback in asynchronous tests and hooks",
            "recommended": "error",
            "suggestion": true,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-done-callback.md",
          },
          "hasSuggestions": true,
          "messages": {
            "noDoneCallback": "Return a Promise instead of relying on callback parameter",
            "suggestWrappingInPromise": "Wrap in \`new Promise({{ callback }} => ...\`",
            "useAwaitInsteadOfCallback": "Use await instead of callback in async functions",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-duplicate-hooks": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow duplicate setup and teardown hooks",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-duplicate-hooks.md",
          },
          "messages": {
            "noDuplicateHook": "Duplicate {{hook}} in describe block",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-export": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow using \`exports\` in files containing tests",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-export.md",
          },
          "messages": {
            "unexpectedExport": "Do not export from a test file.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-focused-tests": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow focused tests",
            "recommended": "error",
            "suggestion": true,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-focused-tests.md",
          },
          "hasSuggestions": true,
          "messages": {
            "focusedTest": "Unexpected focused test.",
            "suggestRemoveFocus": "Remove focus from test.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-hooks": {
        "create": [Function],
        "defaultOptions": [
          {
            "allow": [],
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow setup and teardown hooks",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-hooks.md",
          },
          "messages": {
            "unexpectedHook": "Unexpected '{{ hookName }}' hook",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allow": {
                  "contains": [
                    "beforeAll",
                    "beforeEach",
                    "afterAll",
                    "afterEach",
                  ],
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-identical-title": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow identical titles",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-identical-title.md",
          },
          "messages": {
            "multipleDescribeTitle": "Describe block title is used multiple times in the same describe block.",
            "multipleTestTitle": "Test title is used multiple times in the same describe block.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-if": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow conditional logic",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-if.md",
          },
          "messages": {
            "conditionalInTest": "Test should not contain {{ condition }} statements.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-interpolation-in-snapshots": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow string interpolation inside snapshots",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-interpolation-in-snapshots.md",
          },
          "messages": {
            "noInterpolation": "Do not use string interpolation inside of snapshots",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-jasmine-globals": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow Jasmine globals",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-jasmine-globals.md",
          },
          "fixable": "code",
          "messages": {
            "illegalFail": "Illegal usage of \`fail\`, prefer throwing an error, or the \`done.fail\` callback",
            "illegalGlobal": "Illegal usage of global \`{{ global }}\`, prefer \`{{ replacement }}\`",
            "illegalJasmine": "Illegal usage of jasmine global",
            "illegalMethod": "Illegal usage of \`{{ method }}\`, prefer \`{{ replacement }}\`",
            "illegalPending": "Illegal usage of \`pending\`, prefer explicitly skipping a test using \`test.skip\`",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-jest-import": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow importing Jest",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-jest-import.md",
          },
          "messages": {
            "unexpectedImport": "Jest is automatically in scope. Do not import "jest", as Jest doesn't export anything.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-large-snapshots": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "disallow large snapshots",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-large-snapshots.md",
          },
          "messages": {
            "noSnapshot": "\`{{ lineCount }}\`s should begin with lowercase",
            "tooLongSnapshots": "Expected Jest snapshot to be smaller than {{ lineLimit }} lines but was {{ lineCount }} lines long",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowedSnapshots": {
                  "additionalProperties": {
                    "type": "array",
                  },
                  "type": "object",
                },
                "inlineMaxSize": {
                  "type": "number",
                },
                "maxSize": {
                  "type": "number",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-mocks-import": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow manually importing from \`__mocks__\`",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-mocks-import.md",
          },
          "messages": {
            "noManualImport": "Mocks should not be manually imported from a __mocks__ directory. Instead use \`jest.mock\` and import from the original module path.",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "no-restricted-matchers": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow specific matchers & modifiers",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-restricted-matchers.md",
          },
          "messages": {
            "restrictedChain": "Use of \`{{ chain }}\` is disallowed",
            "restrictedChainWithMessage": "{{ message }}",
          },
          "schema": [
            {
              "additionalProperties": {
                "type": [
                  "string",
                  "null",
                ],
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "no-standalone-expect": {
        "create": [Function],
        "defaultOptions": [
          {
            "additionalTestBlockFunctions": [],
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow using \`expect\` outside of \`it\` or \`test\` blocks",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-standalone-expect.md",
          },
          "messages": {
            "unexpectedExpect": "Expect must be inside of a test block.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "additionalTestBlockFunctions": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
            },
          ],
          "type": "suggestion",
        },
      },
      "no-test-prefixes": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Use \`.only\` and \`.skip\` over \`f\` and \`x\`",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-test-prefixes.md",
          },
          "fixable": "code",
          "messages": {
            "usePreferredName": "Use "{{ preferredNodeName }}" instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "no-test-return-statement": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow explicitly returning from tests",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/no-test-return-statement.md",
          },
          "messages": {
            "noReturnValue": "Jest tests should not return a value.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-called-with": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`toBeCalledWith()\` or \`toHaveBeenCalledWith()\`",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-called-with.md",
          },
          "messages": {
            "preferCalledWith": "Prefer {{name}}With(/* expected args */)",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-comparison-matcher": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using the built-in comparison matchers",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-comparison-matcher.md",
          },
          "fixable": "code",
          "messages": {
            "useToBeComparison": "Prefer using \`{{ preferredMatcher }}\` instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-equality-matcher": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using the built-in equality matchers",
            "recommended": false,
            "suggestion": true,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-equality-matcher.md",
          },
          "hasSuggestions": true,
          "messages": {
            "suggestEqualityMatcher": "Use \`{{ equalityMatcher }}\`",
            "useEqualityMatcher": "Prefer using one of the equality matchers instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-expect-assertions": {
        "create": [Function],
        "defaultOptions": [
          {
            "onlyFunctionsWithAsyncKeyword": false,
            "onlyFunctionsWithExpectInCallback": false,
            "onlyFunctionsWithExpectInLoop": false,
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`expect.assertions()\` OR \`expect.hasAssertions()\`",
            "recommended": false,
            "suggestion": true,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-expect-assertions.md",
          },
          "hasSuggestions": true,
          "messages": {
            "assertionsRequiresNumberArgument": "This argument should be a number",
            "assertionsRequiresOneArgument": "\`expect.assertions\` excepts a single argument of type number",
            "hasAssertionsTakesNoArguments": "\`expect.hasAssertions\` expects no arguments",
            "haveExpectAssertions": "Every test should have either \`expect.assertions(<number of assertions>)\` or \`expect.hasAssertions()\` as its first expression",
            "suggestAddingAssertions": "Add \`expect.assertions(<number of assertions>)\`",
            "suggestAddingHasAssertions": "Add \`expect.hasAssertions()\`",
            "suggestRemovingExtraArguments": "Remove extra arguments",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "onlyFunctionsWithAsyncKeyword": {
                  "type": "boolean",
                },
                "onlyFunctionsWithExpectInCallback": {
                  "type": "boolean",
                },
                "onlyFunctionsWithExpectInLoop": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "prefer-expect-resolves": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Prefer \`await expect(...).resolves\` over \`expect(await ...)\` syntax",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-expect-resolves.md",
          },
          "fixable": "code",
          "messages": {
            "expectResolves": "Use \`await expect(...).resolves instead.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-hooks-on-top": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest having hooks before any test cases",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-hooks-on-top.md",
          },
          "messages": {
            "noHookOnTop": "Hooks should come before test cases",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-lowercase-title": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowedPrefixes": [],
            "ignore": [],
            "ignoreTopLevelDescribe": false,
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce lowercase test names",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-lowercase-title.md",
          },
          "fixable": "code",
          "messages": {
            "unexpectedLowercase": "\`{{ method }}\`s should begin with lowercase",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowedPrefixes": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "ignore": {
                  "additionalItems": false,
                  "items": {
                    "enum": [
                      "describe",
                      "test",
                      "it",
                    ],
                  },
                  "type": "array",
                },
                "ignoreTopLevelDescribe": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "prefer-spy-on": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`jest.spyOn()\`",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-spy-on.md",
          },
          "fixable": "code",
          "messages": {
            "useJestSpyOn": "Use jest.spyOn() instead.",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-strict-equal": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`toStrictEqual()\`",
            "recommended": false,
            "suggestion": true,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-strict-equal.md",
          },
          "hasSuggestions": true,
          "messages": {
            "suggestReplaceWithStrictEqual": "Replace with \`toStrictEqual()\`",
            "useToStrictEqual": "Use \`toStrictEqual()\` instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-to-be": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`toBe()\` for primitive literals",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-to-be.md",
          },
          "fixable": "code",
          "messages": {
            "useToBe": "Use \`toBe\` when expecting primitive literals",
            "useToBeDefined": "Use \`toBeDefined\` instead",
            "useToBeNaN": "Use \`toBeNaN\` instead",
            "useToBeNull": "Use \`toBeNull\` instead",
            "useToBeUndefined": "Use \`toBeUndefined\` instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-to-contain": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`toContain()\`",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-to-contain.md",
          },
          "fixable": "code",
          "messages": {
            "useToContain": "Use toContain() instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-to-have-length": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`toHaveLength()\`",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-to-have-length.md",
          },
          "fixable": "code",
          "messages": {
            "useToHaveLength": "Use toHaveLength() instead",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "prefer-todo": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Suggest using \`test.todo\`",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/prefer-todo.md",
          },
          "fixable": "code",
          "messages": {
            "emptyTest": "Prefer todo test case over empty test case",
            "unimplementedTest": "Prefer todo test case over unimplemented test case",
          },
          "schema": [],
          "type": "layout",
        },
      },
      "require-hook": {
        "create": [Function],
        "defaultOptions": [
          {
            "allowedFunctionCalls": [],
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Require setup and teardown code to be within a hook",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/require-hook.md",
          },
          "messages": {
            "useHook": "This should be done within a hook",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowedFunctionCalls": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "require-to-throw-message": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Require a message for \`toThrow()\`",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/require-to-throw-message.md",
          },
          "messages": {
            "addErrorMessage": "Add an error message to {{ matcherName }}()",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "require-top-level-describe": {
        "create": [Function],
        "defaultOptions": [
          {},
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Require test cases and hooks to be inside a \`describe\` block",
            "recommended": false,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/require-top-level-describe.md",
          },
          "messages": {
            "tooManyDescribes": "There should not be more than {{ max }} describe{{ s }} at the top level",
            "unexpectedHook": "All hooks must be wrapped in a describe block.",
            "unexpectedTestCase": "All test cases must be wrapped in a describe block.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "maxNumberOfTopLevelDescribes": {
                  "minimum": 1,
                  "type": "number",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "unbound-method": {
        "create": [Function],
        "defaultOptions": [
          {
            "ignoreStatic": false,
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce unbound methods are called with their expected scope",
            "recommended": false,
            "requiresTypeChecking": true,
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/unbound-method.md",
          },
          "messages": {
            "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.",
            "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.
If your function does not access \`this\`, you can annotate it with \`this: void\`, or consider using an arrow function instead.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreStatic": {
                  "description": "Whether to skip checking whether \`static\` methods are correctly bound.",
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "problem",
        },
      },
      "valid-describe-callback": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Enforce valid \`describe()\` callback",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/valid-describe-callback.md",
          },
          "messages": {
            "nameAndCallback": "Describe requires name and callback arguments",
            "noAsyncDescribeCallback": "No async describe callback",
            "secondArgumentMustBeFunction": "Second argument must be function",
            "unexpectedDescribeArgument": "Unexpected argument(s) in describe callback",
            "unexpectedReturnInDescribe": "Unexpected return statement in describe callback",
          },
          "schema": [],
          "type": "problem",
        },
      },
      "valid-expect": {
        "create": [Function],
        "defaultOptions": [
          {
            "alwaysAwait": false,
            "asyncMatchers": [
              "toReject",
              "toResolve",
            ],
            "maxArgs": 1,
            "minArgs": 1,
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce valid \`expect()\` usage",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/valid-expect.md",
          },
          "messages": {
            "asyncMustBeAwaited": "Async assertions must be awaited{{ orReturned }}.",
            "matcherNotCalled": "Matchers must be called to assert.",
            "matcherNotFound": "Expect must have a corresponding matcher call.",
            "modifierUnknown": "Expect has no modifier named "{{ modifierName }}".",
            "notEnoughArgs": "Expect requires at least {{ amount }} argument{{ s }}.",
            "promisesWithAsyncAssertionsMustBeAwaited": "Promises which return async assertions must be awaited{{ orReturned }}.",
            "tooManyArgs": "Expect takes at most {{ amount }} argument{{ s }}.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "alwaysAwait": {
                  "default": false,
                  "type": "boolean",
                },
                "asyncMatchers": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "maxArgs": {
                  "minimum": 1,
                  "type": "number",
                },
                "minArgs": {
                  "minimum": 1,
                  "type": "number",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "valid-expect-in-promise": {
        "create": [Function],
        "defaultOptions": [],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Ensure promises that have expectations in their chain are valid",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/valid-expect-in-promise.md",
          },
          "messages": {
            "expectInFloatingPromise": "This promise should either be returned or awaited to ensure the expects in it's chain are called",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "valid-title": {
        "create": [Function],
        "defaultOptions": [
          {
            "disallowedWords": [],
            "ignoreTypeOfDescribeName": false,
          },
        ],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce valid titles",
            "recommended": "error",
            "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v25.7.0/docs/rules/valid-title.md",
          },
          "fixable": "code",
          "messages": {
            "accidentalSpace": "should not have leading or trailing spaces",
            "disallowedWord": ""{{ word }}" is not allowed in test titles.",
            "duplicatePrefix": "should not have duplicate prefix",
            "emptyTitle": "{{ jestFunctionName }} should not have an empty title",
            "mustMatch": "{{ jestFunctionName }} should match {{ pattern }}",
            "mustMatchCustom": "{{ message }}",
            "mustNotMatch": "{{ jestFunctionName }} should not match {{ pattern }}",
            "mustNotMatchCustom": "{{ message }}",
            "titleMustBeString": "Title must be a string",
          },
          "schema": [
            {
              "additionalProperties": false,
              "patternProperties": {
                "^must(?:Not)?Match$": {
                  "oneOf": [
                    {
                      "type": "string",
                    },
                    {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "maxItems": 2,
                      "minItems": 1,
                      "type": "array",
                    },
                    {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalItems": false,
                            "items": {
                              "type": "string",
                            },
                            "maxItems": 2,
                            "minItems": 1,
                            "type": "array",
                          },
                        ],
                      },
                      "propertyNames": {
                        "enum": [
                          "describe",
                          "test",
                          "it",
                        ],
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "properties": {
                "disallowedWords": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "ignoreTypeOfDescribeName": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
    },
  },
  "jsx-a11y": {
    "configs": {
      "recommended": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true,
          },
        },
        "plugins": [
          "jsx-a11y",
        ],
        "rules": {
          "jsx-a11y/alt-text": "error",
          "jsx-a11y/anchor-ambiguous-text": "off",
          "jsx-a11y/anchor-has-content": "error",
          "jsx-a11y/anchor-is-valid": "error",
          "jsx-a11y/aria-activedescendant-has-tabindex": "error",
          "jsx-a11y/aria-props": "error",
          "jsx-a11y/aria-proptypes": "error",
          "jsx-a11y/aria-role": "error",
          "jsx-a11y/aria-unsupported-elements": "error",
          "jsx-a11y/autocomplete-valid": "error",
          "jsx-a11y/click-events-have-key-events": "error",
          "jsx-a11y/control-has-associated-label": [
            "off",
            {
              "ignoreElements": [
                "audio",
                "canvas",
                "embed",
                "input",
                "textarea",
                "tr",
                "video",
              ],
              "ignoreRoles": [
                "grid",
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "row",
                "tablist",
                "toolbar",
                "tree",
                "treegrid",
              ],
              "includeRoles": [
                "alert",
                "dialog",
              ],
            },
          ],
          "jsx-a11y/heading-has-content": "error",
          "jsx-a11y/html-has-lang": "error",
          "jsx-a11y/iframe-has-title": "error",
          "jsx-a11y/img-redundant-alt": "error",
          "jsx-a11y/interactive-supports-focus": [
            "error",
            {
              "tabbable": [
                "button",
                "checkbox",
                "link",
                "searchbox",
                "spinbutton",
                "switch",
                "textbox",
              ],
            },
          ],
          "jsx-a11y/label-has-associated-control": "error",
          "jsx-a11y/label-has-for": "off",
          "jsx-a11y/media-has-caption": "error",
          "jsx-a11y/mouse-events-have-key-events": "error",
          "jsx-a11y/no-access-key": "error",
          "jsx-a11y/no-autofocus": "error",
          "jsx-a11y/no-distracting-elements": "error",
          "jsx-a11y/no-interactive-element-to-noninteractive-role": [
            "error",
            {
              "canvas": [
                "img",
              ],
              "tr": [
                "none",
                "presentation",
              ],
            },
          ],
          "jsx-a11y/no-noninteractive-element-interactions": [
            "error",
            {
              "alert": [
                "onKeyUp",
                "onKeyDown",
                "onKeyPress",
              ],
              "body": [
                "onError",
                "onLoad",
              ],
              "dialog": [
                "onKeyUp",
                "onKeyDown",
                "onKeyPress",
              ],
              "handlers": [
                "onClick",
                "onError",
                "onLoad",
                "onMouseDown",
                "onMouseUp",
                "onKeyPress",
                "onKeyDown",
                "onKeyUp",
              ],
              "iframe": [
                "onError",
                "onLoad",
              ],
              "img": [
                "onError",
                "onLoad",
              ],
            },
          ],
          "jsx-a11y/no-noninteractive-element-to-interactive-role": [
            "error",
            {
              "fieldset": [
                "radiogroup",
                "presentation",
              ],
              "li": [
                "menuitem",
                "menuitemradio",
                "menuitemcheckbox",
                "option",
                "row",
                "tab",
                "treeitem",
              ],
              "ol": [
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "tablist",
                "tree",
                "treegrid",
              ],
              "table": [
                "grid",
              ],
              "td": [
                "gridcell",
              ],
              "ul": [
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "tablist",
                "tree",
                "treegrid",
              ],
            },
          ],
          "jsx-a11y/no-noninteractive-tabindex": [
            "error",
            {
              "allowExpressionValues": true,
              "roles": [
                "tabpanel",
              ],
              "tags": [],
            },
          ],
          "jsx-a11y/no-redundant-roles": "error",
          "jsx-a11y/no-static-element-interactions": [
            "error",
            {
              "allowExpressionValues": true,
              "handlers": [
                "onClick",
                "onMouseDown",
                "onMouseUp",
                "onKeyPress",
                "onKeyDown",
                "onKeyUp",
              ],
            },
          ],
          "jsx-a11y/role-has-required-aria-props": "error",
          "jsx-a11y/role-supports-aria-props": "error",
          "jsx-a11y/scope": "error",
          "jsx-a11y/tabindex-no-positive": "error",
        },
      },
      "strict": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true,
          },
        },
        "plugins": [
          "jsx-a11y",
        ],
        "rules": {
          "jsx-a11y/alt-text": "error",
          "jsx-a11y/anchor-has-content": "error",
          "jsx-a11y/anchor-is-valid": "error",
          "jsx-a11y/aria-activedescendant-has-tabindex": "error",
          "jsx-a11y/aria-props": "error",
          "jsx-a11y/aria-proptypes": "error",
          "jsx-a11y/aria-role": "error",
          "jsx-a11y/aria-unsupported-elements": "error",
          "jsx-a11y/autocomplete-valid": "error",
          "jsx-a11y/click-events-have-key-events": "error",
          "jsx-a11y/control-has-associated-label": [
            "off",
            {
              "ignoreElements": [
                "audio",
                "canvas",
                "embed",
                "input",
                "textarea",
                "tr",
                "video",
              ],
              "ignoreRoles": [
                "grid",
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "row",
                "tablist",
                "toolbar",
                "tree",
                "treegrid",
              ],
              "includeRoles": [
                "alert",
                "dialog",
              ],
            },
          ],
          "jsx-a11y/heading-has-content": "error",
          "jsx-a11y/html-has-lang": "error",
          "jsx-a11y/iframe-has-title": "error",
          "jsx-a11y/img-redundant-alt": "error",
          "jsx-a11y/interactive-supports-focus": [
            "error",
            {
              "tabbable": [
                "button",
                "checkbox",
                "link",
                "progressbar",
                "searchbox",
                "slider",
                "spinbutton",
                "switch",
                "textbox",
              ],
            },
          ],
          "jsx-a11y/label-has-associated-control": "error",
          "jsx-a11y/label-has-for": "off",
          "jsx-a11y/media-has-caption": "error",
          "jsx-a11y/mouse-events-have-key-events": "error",
          "jsx-a11y/no-access-key": "error",
          "jsx-a11y/no-autofocus": "error",
          "jsx-a11y/no-distracting-elements": "error",
          "jsx-a11y/no-interactive-element-to-noninteractive-role": "error",
          "jsx-a11y/no-noninteractive-element-interactions": [
            "error",
            {
              "body": [
                "onError",
                "onLoad",
              ],
              "iframe": [
                "onError",
                "onLoad",
              ],
              "img": [
                "onError",
                "onLoad",
              ],
            },
          ],
          "jsx-a11y/no-noninteractive-element-to-interactive-role": "error",
          "jsx-a11y/no-noninteractive-tabindex": "error",
          "jsx-a11y/no-redundant-roles": "error",
          "jsx-a11y/no-static-element-interactions": "error",
          "jsx-a11y/role-has-required-aria-props": "error",
          "jsx-a11y/role-supports-aria-props": "error",
          "jsx-a11y/scope": "error",
          "jsx-a11y/tabindex-no-positive": "error",
        },
      },
    },
    "flatConfigs": {
      "recommended": {
        "languageOptions": {
          "parserOptions": {
            "ecmaFeatures": {
              "jsx": true,
            },
          },
        },
        "name": "jsx-a11y/recommended",
        "plugins": {
          "jsx-a11y": {
            "meta": {
              "name": "eslint-plugin-jsx-a11y",
              "version": "6.10.0",
            },
            "rules": {
              "accessible-emoji": {
                "create": [Function],
                "meta": {
                  "deprecated": true,
                  "docs": {
                    "description": "Enforce emojis are wrapped in \`<span>\` and provide screenreader access.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "alt-text": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce all elements that require alternative text have meaningful information to relay back to end user.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "area": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "elements": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "img": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "input[type="image"]": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "object": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "anchor-ambiguous-text": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce \`<a>\` text to not exactly match "click here", "here", "link", or "a link".",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-ambiguous-text.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "words": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "anchor-has-content": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce all anchors to contain accessible content.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "components": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "anchor-is-valid": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce all anchors are valid, navigable elements.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "aspects": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "noHref",
                              "invalidHref",
                              "preferButton",
                            ],
                            "type": "string",
                          },
                          "minItems": 1,
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "components": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "specialLink": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "aria-activedescendant-has-tabindex": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce elements with aria-activedescendant are tabbable.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "aria-props": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce all \`aria-*\` props are valid.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-props.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "aria-proptypes": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce ARIA state and property values are valid.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
                "validityCheck": [Function],
              },
              "aria-role": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-role.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "allowedInvalidRoles": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "ignoreNonDOM": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "aria-unsupported-elements": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "autocomplete-valid": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that autocomplete attributes are used correctly.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "inputComponents": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "click-events-have-key-events": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce a clickable non-interactive element has at least one keyboard event listener.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/click-events-have-key-events.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "control-has-associated-label": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that a control (an interactive element) has a text label.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/control-has-associated-label.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "controlComponents": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "depth": {
                          "description": "JSX tree depth limit to check for accessible label",
                          "minimum": 0,
                          "type": "integer",
                        },
                        "ignoreElements": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "ignoreRoles": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "labelAttributes": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "heading-has-content": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce heading (\`h1\`, \`h2\`, etc) elements contain accessible content.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/heading-has-content.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "components": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "html-has-lang": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce \`<html>\` element has \`lang\` prop.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/html-has-lang.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "iframe-has-title": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce iframe elements have a title attribute.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/iframe-has-title.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "img-redundant-alt": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce \`<img>\` alt prop does not contain the word "image", "picture", or "photo".",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "components": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "words": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "interactive-supports-focus": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that elements with interactive handlers like \`onClick\` must be focusable.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/interactive-supports-focus.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "tabbable": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "button",
                              "checkbox",
                              "columnheader",
                              "combobox",
                              "grid",
                              "gridcell",
                              "link",
                              "listbox",
                              "menu",
                              "menubar",
                              "menuitem",
                              "menuitemcheckbox",
                              "menuitemradio",
                              "option",
                              "progressbar",
                              "radio",
                              "radiogroup",
                              "row",
                              "rowheader",
                              "scrollbar",
                              "searchbox",
                              "slider",
                              "spinbutton",
                              "switch",
                              "tab",
                              "tablist",
                              "textbox",
                              "tree",
                              "treegrid",
                              "treeitem",
                              "doc-backlink",
                              "doc-biblioref",
                              "doc-glossref",
                              "doc-noteref",
                            ],
                            "type": "string",
                          },
                          "minItems": 0,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "label-has-associated-control": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that a \`label\` tag has a text label and an associated control.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/label-has-associated-control.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "assert": {
                          "description": "Assert that the label has htmlFor, a nested label, both or either",
                          "enum": [
                            "htmlFor",
                            "nesting",
                            "both",
                            "either",
                          ],
                          "type": "string",
                        },
                        "controlComponents": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "depth": {
                          "description": "JSX tree depth limit to check for accessible label",
                          "minimum": 0,
                          "type": "integer",
                        },
                        "labelAttributes": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "labelComponents": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "label-has-for": {
                "create": [Function],
                "meta": {
                  "deprecated": true,
                  "docs": {
                    "description": "Enforce that \`<label>\` elements have the \`htmlFor\` prop.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/label-has-for.md",
                  },
                  "replacedBy": [
                    "label-has-associated-control",
                  ],
                  "schema": [
                    {
                      "properties": {
                        "allowChildren": {
                          "type": "boolean",
                        },
                        "components": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "required": {
                          "oneOf": [
                            {
                              "enum": [
                                "nesting",
                                "id",
                              ],
                              "type": "string",
                            },
                            {
                              "properties": {
                                "some": {
                                  "additionalItems": false,
                                  "items": {
                                    "enum": [
                                      "nesting",
                                      "id",
                                    ],
                                    "type": "string",
                                  },
                                  "minItems": 0,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              },
                              "required": [
                                "some",
                              ],
                              "type": "object",
                            },
                            {
                              "properties": {
                                "every": {
                                  "additionalItems": false,
                                  "items": {
                                    "enum": [
                                      "nesting",
                                      "id",
                                    ],
                                    "type": "string",
                                  },
                                  "minItems": 0,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              },
                              "required": [
                                "every",
                              ],
                              "type": "object",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "lang": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce lang attribute has a valid value.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/lang.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "media-has-caption": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforces that \`<audio>\` and \`<video>\` elements must have a \`<track>\` for captions.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/media-has-caption.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "audio": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "track": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "video": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "mouse-events-have-key-events": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that \`onMouseOver\`/\`onMouseOut\` are accompanied by \`onFocus\`/\`onBlur\` for keyboard-only users.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/mouse-events-have-key-events.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "hoverInHandlers": {
                          "additionalItems": false,
                          "description": "An array of events that need to be accompanied by \`onFocus\`",
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "hoverOutHandlers": {
                          "additionalItems": false,
                          "description": "An array of events that need to be accompanied by \`onBlur\`",
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-access-key": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that the \`accessKey\` prop is not used on any element to avoid complications with keyboard commands used by a screenreader.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-access-key.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-aria-hidden-on-focusable": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Disallow \`aria-hidden="true"\` from being set on focusable elements.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-aria-hidden-on-focusable.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-autofocus": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce autoFocus prop is not used.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-autofocus.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "ignoreNonDOM": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-distracting-elements": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce distracting elements are not used.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-distracting-elements.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "elements": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "marquee",
                              "blink",
                            ],
                            "type": "string",
                          },
                          "minItems": 0,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-interactive-element-to-noninteractive-role": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Interactive elements should not be assigned non-interactive roles.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-interactive-element-to-noninteractive-role.md",
                  },
                  "schema": [
                    {
                      "additionalProperties": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "no-noninteractive-element-interactions": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Non-interactive elements should not be assigned mouse or keyboard event listeners.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-interactions.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "handlers": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-noninteractive-element-to-interactive-role": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Non-interactive elements should not be assigned interactive roles.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-to-interactive-role.md",
                  },
                  "schema": [
                    {
                      "additionalProperties": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "no-noninteractive-tabindex": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "\`tabIndex\` should only be declared on interactive elements.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-tabindex.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "roles": {
                          "additionalItems": false,
                          "description": "An array of ARIA roles",
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "tags": {
                          "additionalItems": false,
                          "description": "An array of HTML tag names",
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-onchange": {
                "create": [Function],
                "meta": {
                  "deprecated": true,
                  "docs": {
                    "description": "Enforce usage of \`onBlur\` over \`onChange\` on select menus for accessibility.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-onchange.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-redundant-roles": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce explicit role property is not the same as implicit/default role property on element.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-redundant-roles.md",
                  },
                  "schema": [
                    {
                      "additionalProperties": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "no-static-element-interactions": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that non-interactive, visible elements (such as \`<div>\`) that have click handlers use the role attribute.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-static-element-interactions.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "handlers": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "prefer-tag-over-role": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforces using semantic DOM elements over the ARIA \`role\` property.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/prefer-tag-over-role.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "role-has-required-aria-props": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that elements with ARIA roles must have all required attributes for that role.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-has-required-aria-props.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "role-supports-aria-props": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that elements with explicit or implicit roles defined contain only \`aria-*\` properties supported by that \`role\`.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "scope": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce \`scope\` prop is only used on \`<th>\` elements.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/scope.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "tabindex-no-positive": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce \`tabIndex\` value is not greater than zero.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/tabindex-no-positive.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
            },
          },
        },
        "rules": {
          "jsx-a11y/alt-text": "error",
          "jsx-a11y/anchor-ambiguous-text": "off",
          "jsx-a11y/anchor-has-content": "error",
          "jsx-a11y/anchor-is-valid": "error",
          "jsx-a11y/aria-activedescendant-has-tabindex": "error",
          "jsx-a11y/aria-props": "error",
          "jsx-a11y/aria-proptypes": "error",
          "jsx-a11y/aria-role": "error",
          "jsx-a11y/aria-unsupported-elements": "error",
          "jsx-a11y/autocomplete-valid": "error",
          "jsx-a11y/click-events-have-key-events": "error",
          "jsx-a11y/control-has-associated-label": [
            "off",
            {
              "ignoreElements": [
                "audio",
                "canvas",
                "embed",
                "input",
                "textarea",
                "tr",
                "video",
              ],
              "ignoreRoles": [
                "grid",
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "row",
                "tablist",
                "toolbar",
                "tree",
                "treegrid",
              ],
              "includeRoles": [
                "alert",
                "dialog",
              ],
            },
          ],
          "jsx-a11y/heading-has-content": "error",
          "jsx-a11y/html-has-lang": "error",
          "jsx-a11y/iframe-has-title": "error",
          "jsx-a11y/img-redundant-alt": "error",
          "jsx-a11y/interactive-supports-focus": [
            "error",
            {
              "tabbable": [
                "button",
                "checkbox",
                "link",
                "searchbox",
                "spinbutton",
                "switch",
                "textbox",
              ],
            },
          ],
          "jsx-a11y/label-has-associated-control": "error",
          "jsx-a11y/label-has-for": "off",
          "jsx-a11y/media-has-caption": "error",
          "jsx-a11y/mouse-events-have-key-events": "error",
          "jsx-a11y/no-access-key": "error",
          "jsx-a11y/no-autofocus": "error",
          "jsx-a11y/no-distracting-elements": "error",
          "jsx-a11y/no-interactive-element-to-noninteractive-role": [
            "error",
            {
              "canvas": [
                "img",
              ],
              "tr": [
                "none",
                "presentation",
              ],
            },
          ],
          "jsx-a11y/no-noninteractive-element-interactions": [
            "error",
            {
              "alert": [
                "onKeyUp",
                "onKeyDown",
                "onKeyPress",
              ],
              "body": [
                "onError",
                "onLoad",
              ],
              "dialog": [
                "onKeyUp",
                "onKeyDown",
                "onKeyPress",
              ],
              "handlers": [
                "onClick",
                "onError",
                "onLoad",
                "onMouseDown",
                "onMouseUp",
                "onKeyPress",
                "onKeyDown",
                "onKeyUp",
              ],
              "iframe": [
                "onError",
                "onLoad",
              ],
              "img": [
                "onError",
                "onLoad",
              ],
            },
          ],
          "jsx-a11y/no-noninteractive-element-to-interactive-role": [
            "error",
            {
              "fieldset": [
                "radiogroup",
                "presentation",
              ],
              "li": [
                "menuitem",
                "menuitemradio",
                "menuitemcheckbox",
                "option",
                "row",
                "tab",
                "treeitem",
              ],
              "ol": [
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "tablist",
                "tree",
                "treegrid",
              ],
              "table": [
                "grid",
              ],
              "td": [
                "gridcell",
              ],
              "ul": [
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "tablist",
                "tree",
                "treegrid",
              ],
            },
          ],
          "jsx-a11y/no-noninteractive-tabindex": [
            "error",
            {
              "allowExpressionValues": true,
              "roles": [
                "tabpanel",
              ],
              "tags": [],
            },
          ],
          "jsx-a11y/no-redundant-roles": "error",
          "jsx-a11y/no-static-element-interactions": [
            "error",
            {
              "allowExpressionValues": true,
              "handlers": [
                "onClick",
                "onMouseDown",
                "onMouseUp",
                "onKeyPress",
                "onKeyDown",
                "onKeyUp",
              ],
            },
          ],
          "jsx-a11y/role-has-required-aria-props": "error",
          "jsx-a11y/role-supports-aria-props": "error",
          "jsx-a11y/scope": "error",
          "jsx-a11y/tabindex-no-positive": "error",
        },
      },
      "strict": {
        "languageOptions": {
          "parserOptions": {
            "ecmaFeatures": {
              "jsx": true,
            },
          },
        },
        "name": "jsx-a11y/strict",
        "plugins": {
          "jsx-a11y": {
            "meta": {
              "name": "eslint-plugin-jsx-a11y",
              "version": "6.10.0",
            },
            "rules": {
              "accessible-emoji": {
                "create": [Function],
                "meta": {
                  "deprecated": true,
                  "docs": {
                    "description": "Enforce emojis are wrapped in \`<span>\` and provide screenreader access.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "alt-text": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce all elements that require alternative text have meaningful information to relay back to end user.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "area": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "elements": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "img": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "input[type="image"]": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "object": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "anchor-ambiguous-text": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce \`<a>\` text to not exactly match "click here", "here", "link", or "a link".",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-ambiguous-text.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "words": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "anchor-has-content": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce all anchors to contain accessible content.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "components": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "anchor-is-valid": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce all anchors are valid, navigable elements.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "aspects": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "noHref",
                              "invalidHref",
                              "preferButton",
                            ],
                            "type": "string",
                          },
                          "minItems": 1,
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "components": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "specialLink": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "aria-activedescendant-has-tabindex": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce elements with aria-activedescendant are tabbable.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "aria-props": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce all \`aria-*\` props are valid.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-props.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "aria-proptypes": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce ARIA state and property values are valid.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
                "validityCheck": [Function],
              },
              "aria-role": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-role.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "allowedInvalidRoles": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "ignoreNonDOM": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "aria-unsupported-elements": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "autocomplete-valid": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that autocomplete attributes are used correctly.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "inputComponents": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "click-events-have-key-events": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce a clickable non-interactive element has at least one keyboard event listener.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/click-events-have-key-events.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "control-has-associated-label": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that a control (an interactive element) has a text label.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/control-has-associated-label.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "controlComponents": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "depth": {
                          "description": "JSX tree depth limit to check for accessible label",
                          "minimum": 0,
                          "type": "integer",
                        },
                        "ignoreElements": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "ignoreRoles": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "labelAttributes": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "heading-has-content": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce heading (\`h1\`, \`h2\`, etc) elements contain accessible content.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/heading-has-content.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "components": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "html-has-lang": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce \`<html>\` element has \`lang\` prop.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/html-has-lang.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "iframe-has-title": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce iframe elements have a title attribute.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/iframe-has-title.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "img-redundant-alt": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce \`<img>\` alt prop does not contain the word "image", "picture", or "photo".",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "components": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "words": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "interactive-supports-focus": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that elements with interactive handlers like \`onClick\` must be focusable.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/interactive-supports-focus.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "tabbable": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "button",
                              "checkbox",
                              "columnheader",
                              "combobox",
                              "grid",
                              "gridcell",
                              "link",
                              "listbox",
                              "menu",
                              "menubar",
                              "menuitem",
                              "menuitemcheckbox",
                              "menuitemradio",
                              "option",
                              "progressbar",
                              "radio",
                              "radiogroup",
                              "row",
                              "rowheader",
                              "scrollbar",
                              "searchbox",
                              "slider",
                              "spinbutton",
                              "switch",
                              "tab",
                              "tablist",
                              "textbox",
                              "tree",
                              "treegrid",
                              "treeitem",
                              "doc-backlink",
                              "doc-biblioref",
                              "doc-glossref",
                              "doc-noteref",
                            ],
                            "type": "string",
                          },
                          "minItems": 0,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "label-has-associated-control": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that a \`label\` tag has a text label and an associated control.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/label-has-associated-control.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "assert": {
                          "description": "Assert that the label has htmlFor, a nested label, both or either",
                          "enum": [
                            "htmlFor",
                            "nesting",
                            "both",
                            "either",
                          ],
                          "type": "string",
                        },
                        "controlComponents": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "depth": {
                          "description": "JSX tree depth limit to check for accessible label",
                          "minimum": 0,
                          "type": "integer",
                        },
                        "labelAttributes": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "labelComponents": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "label-has-for": {
                "create": [Function],
                "meta": {
                  "deprecated": true,
                  "docs": {
                    "description": "Enforce that \`<label>\` elements have the \`htmlFor\` prop.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/label-has-for.md",
                  },
                  "replacedBy": [
                    "label-has-associated-control",
                  ],
                  "schema": [
                    {
                      "properties": {
                        "allowChildren": {
                          "type": "boolean",
                        },
                        "components": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "required": {
                          "oneOf": [
                            {
                              "enum": [
                                "nesting",
                                "id",
                              ],
                              "type": "string",
                            },
                            {
                              "properties": {
                                "some": {
                                  "additionalItems": false,
                                  "items": {
                                    "enum": [
                                      "nesting",
                                      "id",
                                    ],
                                    "type": "string",
                                  },
                                  "minItems": 0,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              },
                              "required": [
                                "some",
                              ],
                              "type": "object",
                            },
                            {
                              "properties": {
                                "every": {
                                  "additionalItems": false,
                                  "items": {
                                    "enum": [
                                      "nesting",
                                      "id",
                                    ],
                                    "type": "string",
                                  },
                                  "minItems": 0,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              },
                              "required": [
                                "every",
                              ],
                              "type": "object",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "lang": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce lang attribute has a valid value.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/lang.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "media-has-caption": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforces that \`<audio>\` and \`<video>\` elements must have a \`<track>\` for captions.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/media-has-caption.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "audio": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "track": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "video": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "mouse-events-have-key-events": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that \`onMouseOver\`/\`onMouseOut\` are accompanied by \`onFocus\`/\`onBlur\` for keyboard-only users.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/mouse-events-have-key-events.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "hoverInHandlers": {
                          "additionalItems": false,
                          "description": "An array of events that need to be accompanied by \`onFocus\`",
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "hoverOutHandlers": {
                          "additionalItems": false,
                          "description": "An array of events that need to be accompanied by \`onBlur\`",
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-access-key": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that the \`accessKey\` prop is not used on any element to avoid complications with keyboard commands used by a screenreader.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-access-key.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-aria-hidden-on-focusable": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Disallow \`aria-hidden="true"\` from being set on focusable elements.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-aria-hidden-on-focusable.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-autofocus": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce autoFocus prop is not used.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-autofocus.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "ignoreNonDOM": {
                          "default": false,
                          "type": "boolean",
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-distracting-elements": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce distracting elements are not used.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-distracting-elements.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "elements": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "marquee",
                              "blink",
                            ],
                            "type": "string",
                          },
                          "minItems": 0,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-interactive-element-to-noninteractive-role": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Interactive elements should not be assigned non-interactive roles.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-interactive-element-to-noninteractive-role.md",
                  },
                  "schema": [
                    {
                      "additionalProperties": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "no-noninteractive-element-interactions": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Non-interactive elements should not be assigned mouse or keyboard event listeners.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-interactions.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "handlers": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-noninteractive-element-to-interactive-role": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Non-interactive elements should not be assigned interactive roles.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-to-interactive-role.md",
                  },
                  "schema": [
                    {
                      "additionalProperties": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "no-noninteractive-tabindex": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "\`tabIndex\` should only be declared on interactive elements.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-tabindex.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "roles": {
                          "additionalItems": false,
                          "description": "An array of ARIA roles",
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "tags": {
                          "additionalItems": false,
                          "description": "An array of HTML tag names",
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-onchange": {
                "create": [Function],
                "meta": {
                  "deprecated": true,
                  "docs": {
                    "description": "Enforce usage of \`onBlur\` over \`onChange\` on select menus for accessibility.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-onchange.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "no-redundant-roles": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce explicit role property is not the same as implicit/default role property on element.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-redundant-roles.md",
                  },
                  "schema": [
                    {
                      "additionalProperties": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "type": "object",
                    },
                  ],
                },
              },
              "no-static-element-interactions": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that non-interactive, visible elements (such as \`<div>\`) that have click handlers use the role attribute.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-static-element-interactions.md",
                  },
                  "schema": [
                    {
                      "properties": {
                        "handlers": {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "prefer-tag-over-role": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforces using semantic DOM elements over the ARIA \`role\` property.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/prefer-tag-over-role.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "role-has-required-aria-props": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that elements with ARIA roles must have all required attributes for that role.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-has-required-aria-props.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "role-supports-aria-props": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce that elements with explicit or implicit roles defined contain only \`aria-*\` properties supported by that \`role\`.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "scope": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce \`scope\` prop is only used on \`<th>\` elements.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/scope.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
              "tabindex-no-positive": {
                "create": [Function],
                "meta": {
                  "docs": {
                    "description": "Enforce \`tabIndex\` value is not greater than zero.",
                    "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/tabindex-no-positive.md",
                  },
                  "schema": [
                    {
                      "properties": {},
                      "required": undefined,
                      "type": "object",
                    },
                  ],
                },
              },
            },
          },
        },
        "rules": {
          "jsx-a11y/alt-text": "error",
          "jsx-a11y/anchor-has-content": "error",
          "jsx-a11y/anchor-is-valid": "error",
          "jsx-a11y/aria-activedescendant-has-tabindex": "error",
          "jsx-a11y/aria-props": "error",
          "jsx-a11y/aria-proptypes": "error",
          "jsx-a11y/aria-role": "error",
          "jsx-a11y/aria-unsupported-elements": "error",
          "jsx-a11y/autocomplete-valid": "error",
          "jsx-a11y/click-events-have-key-events": "error",
          "jsx-a11y/control-has-associated-label": [
            "off",
            {
              "ignoreElements": [
                "audio",
                "canvas",
                "embed",
                "input",
                "textarea",
                "tr",
                "video",
              ],
              "ignoreRoles": [
                "grid",
                "listbox",
                "menu",
                "menubar",
                "radiogroup",
                "row",
                "tablist",
                "toolbar",
                "tree",
                "treegrid",
              ],
              "includeRoles": [
                "alert",
                "dialog",
              ],
            },
          ],
          "jsx-a11y/heading-has-content": "error",
          "jsx-a11y/html-has-lang": "error",
          "jsx-a11y/iframe-has-title": "error",
          "jsx-a11y/img-redundant-alt": "error",
          "jsx-a11y/interactive-supports-focus": [
            "error",
            {
              "tabbable": [
                "button",
                "checkbox",
                "link",
                "progressbar",
                "searchbox",
                "slider",
                "spinbutton",
                "switch",
                "textbox",
              ],
            },
          ],
          "jsx-a11y/label-has-associated-control": "error",
          "jsx-a11y/label-has-for": "off",
          "jsx-a11y/media-has-caption": "error",
          "jsx-a11y/mouse-events-have-key-events": "error",
          "jsx-a11y/no-access-key": "error",
          "jsx-a11y/no-autofocus": "error",
          "jsx-a11y/no-distracting-elements": "error",
          "jsx-a11y/no-interactive-element-to-noninteractive-role": "error",
          "jsx-a11y/no-noninteractive-element-interactions": [
            "error",
            {
              "body": [
                "onError",
                "onLoad",
              ],
              "iframe": [
                "onError",
                "onLoad",
              ],
              "img": [
                "onError",
                "onLoad",
              ],
            },
          ],
          "jsx-a11y/no-noninteractive-element-to-interactive-role": "error",
          "jsx-a11y/no-noninteractive-tabindex": "error",
          "jsx-a11y/no-redundant-roles": "error",
          "jsx-a11y/no-static-element-interactions": "error",
          "jsx-a11y/role-has-required-aria-props": "error",
          "jsx-a11y/role-supports-aria-props": "error",
          "jsx-a11y/scope": "error",
          "jsx-a11y/tabindex-no-positive": "error",
        },
      },
    },
    "meta": {
      "name": "eslint-plugin-jsx-a11y",
      "version": "6.10.0",
    },
    "rules": {
      "accessible-emoji": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "description": "Enforce emojis are wrapped in \`<span>\` and provide screenreader access.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "alt-text": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce all elements that require alternative text have meaningful information to relay back to end user.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md",
          },
          "schema": [
            {
              "properties": {
                "area": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "elements": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "img": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "input[type="image"]": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "object": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "anchor-ambiguous-text": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce \`<a>\` text to not exactly match "click here", "here", "link", or "a link".",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-ambiguous-text.md",
          },
          "schema": [
            {
              "properties": {
                "words": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "anchor-has-content": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce all anchors to contain accessible content.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md",
          },
          "schema": [
            {
              "properties": {
                "components": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "anchor-is-valid": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce all anchors are valid, navigable elements.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md",
          },
          "schema": [
            {
              "properties": {
                "aspects": {
                  "additionalItems": false,
                  "items": {
                    "enum": [
                      "noHref",
                      "invalidHref",
                      "preferButton",
                    ],
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
                "components": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "specialLink": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "aria-activedescendant-has-tabindex": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce elements with aria-activedescendant are tabbable.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "aria-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce all \`aria-*\` props are valid.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-props.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "aria-proptypes": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce ARIA state and property values are valid.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
        "validityCheck": [Function],
      },
      "aria-role": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-role.md",
          },
          "schema": [
            {
              "properties": {
                "allowedInvalidRoles": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "ignoreNonDOM": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "aria-unsupported-elements": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "autocomplete-valid": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that autocomplete attributes are used correctly.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md",
          },
          "schema": [
            {
              "properties": {
                "inputComponents": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "click-events-have-key-events": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce a clickable non-interactive element has at least one keyboard event listener.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/click-events-have-key-events.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "control-has-associated-label": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that a control (an interactive element) has a text label.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/control-has-associated-label.md",
          },
          "schema": [
            {
              "properties": {
                "controlComponents": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "depth": {
                  "description": "JSX tree depth limit to check for accessible label",
                  "minimum": 0,
                  "type": "integer",
                },
                "ignoreElements": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "ignoreRoles": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "labelAttributes": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "heading-has-content": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce heading (\`h1\`, \`h2\`, etc) elements contain accessible content.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/heading-has-content.md",
          },
          "schema": [
            {
              "properties": {
                "components": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "html-has-lang": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce \`<html>\` element has \`lang\` prop.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/html-has-lang.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "iframe-has-title": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce iframe elements have a title attribute.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/iframe-has-title.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "img-redundant-alt": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce \`<img>\` alt prop does not contain the word "image", "picture", or "photo".",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md",
          },
          "schema": [
            {
              "properties": {
                "components": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "words": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "interactive-supports-focus": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that elements with interactive handlers like \`onClick\` must be focusable.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/interactive-supports-focus.md",
          },
          "schema": [
            {
              "properties": {
                "tabbable": {
                  "additionalItems": false,
                  "items": {
                    "enum": [
                      "button",
                      "checkbox",
                      "columnheader",
                      "combobox",
                      "grid",
                      "gridcell",
                      "link",
                      "listbox",
                      "menu",
                      "menubar",
                      "menuitem",
                      "menuitemcheckbox",
                      "menuitemradio",
                      "option",
                      "progressbar",
                      "radio",
                      "radiogroup",
                      "row",
                      "rowheader",
                      "scrollbar",
                      "searchbox",
                      "slider",
                      "spinbutton",
                      "switch",
                      "tab",
                      "tablist",
                      "textbox",
                      "tree",
                      "treegrid",
                      "treeitem",
                      "doc-backlink",
                      "doc-biblioref",
                      "doc-glossref",
                      "doc-noteref",
                    ],
                    "type": "string",
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "label-has-associated-control": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that a \`label\` tag has a text label and an associated control.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/label-has-associated-control.md",
          },
          "schema": [
            {
              "properties": {
                "assert": {
                  "description": "Assert that the label has htmlFor, a nested label, both or either",
                  "enum": [
                    "htmlFor",
                    "nesting",
                    "both",
                    "either",
                  ],
                  "type": "string",
                },
                "controlComponents": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "depth": {
                  "description": "JSX tree depth limit to check for accessible label",
                  "minimum": 0,
                  "type": "integer",
                },
                "labelAttributes": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "labelComponents": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "label-has-for": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "description": "Enforce that \`<label>\` elements have the \`htmlFor\` prop.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/label-has-for.md",
          },
          "replacedBy": [
            "label-has-associated-control",
          ],
          "schema": [
            {
              "properties": {
                "allowChildren": {
                  "type": "boolean",
                },
                "components": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "required": {
                  "oneOf": [
                    {
                      "enum": [
                        "nesting",
                        "id",
                      ],
                      "type": "string",
                    },
                    {
                      "properties": {
                        "some": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "nesting",
                              "id",
                            ],
                            "type": "string",
                          },
                          "minItems": 0,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": [
                        "some",
                      ],
                      "type": "object",
                    },
                    {
                      "properties": {
                        "every": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "nesting",
                              "id",
                            ],
                            "type": "string",
                          },
                          "minItems": 0,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "required": [
                        "every",
                      ],
                      "type": "object",
                    },
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "lang": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce lang attribute has a valid value.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/lang.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "media-has-caption": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforces that \`<audio>\` and \`<video>\` elements must have a \`<track>\` for captions.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/media-has-caption.md",
          },
          "schema": [
            {
              "properties": {
                "audio": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "track": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "video": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "mouse-events-have-key-events": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that \`onMouseOver\`/\`onMouseOut\` are accompanied by \`onFocus\`/\`onBlur\` for keyboard-only users.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/mouse-events-have-key-events.md",
          },
          "schema": [
            {
              "properties": {
                "hoverInHandlers": {
                  "additionalItems": false,
                  "description": "An array of events that need to be accompanied by \`onFocus\`",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "hoverOutHandlers": {
                  "additionalItems": false,
                  "description": "An array of events that need to be accompanied by \`onBlur\`",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-access-key": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that the \`accessKey\` prop is not used on any element to avoid complications with keyboard commands used by a screenreader.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-access-key.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-aria-hidden-on-focusable": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Disallow \`aria-hidden="true"\` from being set on focusable elements.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-aria-hidden-on-focusable.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-autofocus": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce autoFocus prop is not used.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-autofocus.md",
          },
          "schema": [
            {
              "properties": {
                "ignoreNonDOM": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-distracting-elements": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce distracting elements are not used.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-distracting-elements.md",
          },
          "schema": [
            {
              "properties": {
                "elements": {
                  "additionalItems": false,
                  "items": {
                    "enum": [
                      "marquee",
                      "blink",
                    ],
                    "type": "string",
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-interactive-element-to-noninteractive-role": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Interactive elements should not be assigned non-interactive roles.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-interactive-element-to-noninteractive-role.md",
          },
          "schema": [
            {
              "additionalProperties": {
                "items": {
                  "type": "string",
                },
                "type": "array",
                "uniqueItems": true,
              },
              "type": "object",
            },
          ],
        },
      },
      "no-noninteractive-element-interactions": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Non-interactive elements should not be assigned mouse or keyboard event listeners.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-interactions.md",
          },
          "schema": [
            {
              "properties": {
                "handlers": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-noninteractive-element-to-interactive-role": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Non-interactive elements should not be assigned interactive roles.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-to-interactive-role.md",
          },
          "schema": [
            {
              "additionalProperties": {
                "items": {
                  "type": "string",
                },
                "type": "array",
                "uniqueItems": true,
              },
              "type": "object",
            },
          ],
        },
      },
      "no-noninteractive-tabindex": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "\`tabIndex\` should only be declared on interactive elements.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-tabindex.md",
          },
          "schema": [
            {
              "properties": {
                "roles": {
                  "additionalItems": false,
                  "description": "An array of ARIA roles",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "tags": {
                  "additionalItems": false,
                  "description": "An array of HTML tag names",
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-onchange": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "description": "Enforce usage of \`onBlur\` over \`onChange\` on select menus for accessibility.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-onchange.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "no-redundant-roles": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce explicit role property is not the same as implicit/default role property on element.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-redundant-roles.md",
          },
          "schema": [
            {
              "additionalProperties": {
                "items": {
                  "type": "string",
                },
                "type": "array",
                "uniqueItems": true,
              },
              "type": "object",
            },
          ],
        },
      },
      "no-static-element-interactions": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that non-interactive, visible elements (such as \`<div>\`) that have click handlers use the role attribute.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-static-element-interactions.md",
          },
          "schema": [
            {
              "properties": {
                "handlers": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "prefer-tag-over-role": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforces using semantic DOM elements over the ARIA \`role\` property.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/prefer-tag-over-role.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "role-has-required-aria-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that elements with ARIA roles must have all required attributes for that role.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-has-required-aria-props.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "role-supports-aria-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce that elements with explicit or implicit roles defined contain only \`aria-*\` properties supported by that \`role\`.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "scope": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce \`scope\` prop is only used on \`<th>\` elements.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/scope.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
      "tabindex-no-positive": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "Enforce \`tabIndex\` value is not greater than zero.",
            "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/tabindex-no-positive.md",
          },
          "schema": [
            {
              "properties": {},
              "required": undefined,
              "type": "object",
            },
          ],
        },
      },
    },
  },
  "react": {
    "configs": {
      "all": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true,
          },
        },
        "plugins": [
          "react",
        ],
        "rules": {
          "react/boolean-prop-naming": 2,
          "react/button-has-type": 2,
          "react/checked-requires-onchange-or-readonly": 2,
          "react/default-props-match-prop-types": 2,
          "react/destructuring-assignment": 2,
          "react/display-name": 2,
          "react/forbid-component-props": 2,
          "react/forbid-dom-props": 2,
          "react/forbid-elements": 2,
          "react/forbid-foreign-prop-types": 2,
          "react/forbid-prop-types": 2,
          "react/forward-ref-uses-ref": 2,
          "react/function-component-definition": 2,
          "react/hook-use-state": 2,
          "react/iframe-missing-sandbox": 2,
          "react/jsx-boolean-value": 2,
          "react/jsx-child-element-spacing": 2,
          "react/jsx-closing-bracket-location": 2,
          "react/jsx-closing-tag-location": 2,
          "react/jsx-curly-brace-presence": 2,
          "react/jsx-curly-newline": 2,
          "react/jsx-curly-spacing": 2,
          "react/jsx-equals-spacing": 2,
          "react/jsx-filename-extension": 2,
          "react/jsx-first-prop-new-line": 2,
          "react/jsx-fragments": 2,
          "react/jsx-handler-names": 2,
          "react/jsx-indent": 2,
          "react/jsx-indent-props": 2,
          "react/jsx-key": 2,
          "react/jsx-max-depth": 2,
          "react/jsx-max-props-per-line": 2,
          "react/jsx-newline": 2,
          "react/jsx-no-bind": 2,
          "react/jsx-no-comment-textnodes": 2,
          "react/jsx-no-constructed-context-values": 2,
          "react/jsx-no-duplicate-props": 2,
          "react/jsx-no-leaked-render": 2,
          "react/jsx-no-literals": 2,
          "react/jsx-no-script-url": 2,
          "react/jsx-no-target-blank": 2,
          "react/jsx-no-undef": 2,
          "react/jsx-no-useless-fragment": 2,
          "react/jsx-one-expression-per-line": 2,
          "react/jsx-pascal-case": 2,
          "react/jsx-props-no-multi-spaces": 2,
          "react/jsx-props-no-spread-multi": 2,
          "react/jsx-props-no-spreading": 2,
          "react/jsx-sort-props": 2,
          "react/jsx-tag-spacing": 2,
          "react/jsx-uses-react": 2,
          "react/jsx-uses-vars": 2,
          "react/jsx-wrap-multilines": 2,
          "react/no-access-state-in-setstate": 2,
          "react/no-adjacent-inline-elements": 2,
          "react/no-array-index-key": 2,
          "react/no-arrow-function-lifecycle": 2,
          "react/no-children-prop": 2,
          "react/no-danger": 2,
          "react/no-danger-with-children": 2,
          "react/no-deprecated": 2,
          "react/no-did-mount-set-state": 2,
          "react/no-did-update-set-state": 2,
          "react/no-direct-mutation-state": 2,
          "react/no-find-dom-node": 2,
          "react/no-invalid-html-attribute": 2,
          "react/no-is-mounted": 2,
          "react/no-multi-comp": 2,
          "react/no-namespace": 2,
          "react/no-object-type-as-default-prop": 2,
          "react/no-redundant-should-component-update": 2,
          "react/no-render-return-value": 2,
          "react/no-set-state": 2,
          "react/no-string-refs": 2,
          "react/no-this-in-sfc": 2,
          "react/no-typos": 2,
          "react/no-unescaped-entities": 2,
          "react/no-unknown-property": 2,
          "react/no-unsafe": 2,
          "react/no-unstable-nested-components": 2,
          "react/no-unused-class-component-methods": 2,
          "react/no-unused-prop-types": 2,
          "react/no-unused-state": 2,
          "react/no-will-update-set-state": 2,
          "react/prefer-es6-class": 2,
          "react/prefer-exact-props": 2,
          "react/prefer-read-only-props": 2,
          "react/prefer-stateless-function": 2,
          "react/prop-types": 2,
          "react/react-in-jsx-scope": 2,
          "react/require-default-props": 2,
          "react/require-optimization": 2,
          "react/require-render-return": 2,
          "react/self-closing-comp": 2,
          "react/sort-comp": 2,
          "react/sort-default-props": 2,
          "react/sort-prop-types": 2,
          "react/state-in-constructor": 2,
          "react/static-property-placement": 2,
          "react/style-prop-object": 2,
          "react/void-dom-elements-no-children": 2,
        },
      },
      "flat": {
        "all": {
          "languageOptions": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
          },
          "plugins": {
            "react": [Circular],
          },
          "rules": {
            "react/boolean-prop-naming": 2,
            "react/button-has-type": 2,
            "react/checked-requires-onchange-or-readonly": 2,
            "react/default-props-match-prop-types": 2,
            "react/destructuring-assignment": 2,
            "react/display-name": 2,
            "react/forbid-component-props": 2,
            "react/forbid-dom-props": 2,
            "react/forbid-elements": 2,
            "react/forbid-foreign-prop-types": 2,
            "react/forbid-prop-types": 2,
            "react/forward-ref-uses-ref": 2,
            "react/function-component-definition": 2,
            "react/hook-use-state": 2,
            "react/iframe-missing-sandbox": 2,
            "react/jsx-boolean-value": 2,
            "react/jsx-child-element-spacing": 2,
            "react/jsx-closing-bracket-location": 2,
            "react/jsx-closing-tag-location": 2,
            "react/jsx-curly-brace-presence": 2,
            "react/jsx-curly-newline": 2,
            "react/jsx-curly-spacing": 2,
            "react/jsx-equals-spacing": 2,
            "react/jsx-filename-extension": 2,
            "react/jsx-first-prop-new-line": 2,
            "react/jsx-fragments": 2,
            "react/jsx-handler-names": 2,
            "react/jsx-indent": 2,
            "react/jsx-indent-props": 2,
            "react/jsx-key": 2,
            "react/jsx-max-depth": 2,
            "react/jsx-max-props-per-line": 2,
            "react/jsx-newline": 2,
            "react/jsx-no-bind": 2,
            "react/jsx-no-comment-textnodes": 2,
            "react/jsx-no-constructed-context-values": 2,
            "react/jsx-no-duplicate-props": 2,
            "react/jsx-no-leaked-render": 2,
            "react/jsx-no-literals": 2,
            "react/jsx-no-script-url": 2,
            "react/jsx-no-target-blank": 2,
            "react/jsx-no-undef": 2,
            "react/jsx-no-useless-fragment": 2,
            "react/jsx-one-expression-per-line": 2,
            "react/jsx-pascal-case": 2,
            "react/jsx-props-no-multi-spaces": 2,
            "react/jsx-props-no-spread-multi": 2,
            "react/jsx-props-no-spreading": 2,
            "react/jsx-sort-props": 2,
            "react/jsx-tag-spacing": 2,
            "react/jsx-uses-react": 2,
            "react/jsx-uses-vars": 2,
            "react/jsx-wrap-multilines": 2,
            "react/no-access-state-in-setstate": 2,
            "react/no-adjacent-inline-elements": 2,
            "react/no-array-index-key": 2,
            "react/no-arrow-function-lifecycle": 2,
            "react/no-children-prop": 2,
            "react/no-danger": 2,
            "react/no-danger-with-children": 2,
            "react/no-deprecated": 2,
            "react/no-did-mount-set-state": 2,
            "react/no-did-update-set-state": 2,
            "react/no-direct-mutation-state": 2,
            "react/no-find-dom-node": 2,
            "react/no-invalid-html-attribute": 2,
            "react/no-is-mounted": 2,
            "react/no-multi-comp": 2,
            "react/no-namespace": 2,
            "react/no-object-type-as-default-prop": 2,
            "react/no-redundant-should-component-update": 2,
            "react/no-render-return-value": 2,
            "react/no-set-state": 2,
            "react/no-string-refs": 2,
            "react/no-this-in-sfc": 2,
            "react/no-typos": 2,
            "react/no-unescaped-entities": 2,
            "react/no-unknown-property": 2,
            "react/no-unsafe": 2,
            "react/no-unstable-nested-components": 2,
            "react/no-unused-class-component-methods": 2,
            "react/no-unused-prop-types": 2,
            "react/no-unused-state": 2,
            "react/no-will-update-set-state": 2,
            "react/prefer-es6-class": 2,
            "react/prefer-exact-props": 2,
            "react/prefer-read-only-props": 2,
            "react/prefer-stateless-function": 2,
            "react/prop-types": 2,
            "react/react-in-jsx-scope": 2,
            "react/require-default-props": 2,
            "react/require-optimization": 2,
            "react/require-render-return": 2,
            "react/self-closing-comp": 2,
            "react/sort-comp": 2,
            "react/sort-default-props": 2,
            "react/sort-prop-types": 2,
            "react/state-in-constructor": 2,
            "react/static-property-placement": 2,
            "react/style-prop-object": 2,
            "react/void-dom-elements-no-children": 2,
          },
        },
        "jsx-runtime": {
          "languageOptions": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
              "jsxPragma": null,
            },
          },
          "plugins": {
            "react": [Circular],
          },
          "rules": {
            "react/jsx-uses-react": 0,
            "react/react-in-jsx-scope": 0,
          },
        },
        "recommended": {
          "languageOptions": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
          },
          "plugins": {
            "react": [Circular],
          },
          "rules": {
            "react/display-name": 2,
            "react/jsx-key": 2,
            "react/jsx-no-comment-textnodes": 2,
            "react/jsx-no-duplicate-props": 2,
            "react/jsx-no-target-blank": 2,
            "react/jsx-no-undef": 2,
            "react/jsx-uses-react": 2,
            "react/jsx-uses-vars": 2,
            "react/no-children-prop": 2,
            "react/no-danger-with-children": 2,
            "react/no-deprecated": 2,
            "react/no-direct-mutation-state": 2,
            "react/no-find-dom-node": 2,
            "react/no-is-mounted": 2,
            "react/no-render-return-value": 2,
            "react/no-string-refs": 2,
            "react/no-unescaped-entities": 2,
            "react/no-unknown-property": 2,
            "react/no-unsafe": 0,
            "react/prop-types": 2,
            "react/react-in-jsx-scope": 2,
            "react/require-render-return": 2,
          },
        },
      },
      "jsx-runtime": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true,
          },
          "jsxPragma": null,
        },
        "plugins": [
          "react",
        ],
        "rules": {
          "react/jsx-uses-react": 0,
          "react/react-in-jsx-scope": 0,
        },
      },
      "recommended": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true,
          },
        },
        "plugins": [
          "react",
        ],
        "rules": {
          "react/display-name": 2,
          "react/jsx-key": 2,
          "react/jsx-no-comment-textnodes": 2,
          "react/jsx-no-duplicate-props": 2,
          "react/jsx-no-target-blank": 2,
          "react/jsx-no-undef": 2,
          "react/jsx-uses-react": 2,
          "react/jsx-uses-vars": 2,
          "react/no-children-prop": 2,
          "react/no-danger-with-children": 2,
          "react/no-deprecated": 2,
          "react/no-direct-mutation-state": 2,
          "react/no-find-dom-node": 2,
          "react/no-is-mounted": 2,
          "react/no-render-return-value": 2,
          "react/no-string-refs": 2,
          "react/no-unescaped-entities": 2,
          "react/no-unknown-property": 2,
          "react/no-unsafe": 0,
          "react/prop-types": 2,
          "react/react-in-jsx-scope": 2,
          "react/require-render-return": 2,
        },
      },
    },
    "deprecatedRules": {
      "jsx-sort-default-props": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce defaultProps declarations alphabetical sorting",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md",
          },
          "messages": {
            "propsNotSorted": "Default prop types declarations should be sorted alphabetically",
          },
          "replacedBy": [
            "sort-default-props",
          ],
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreCase": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-space-before-closing": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce spacing before closing bracket in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md",
          },
          "fixable": "code",
          "messages": {
            "needSpaceBeforeClose": "A space is required before closing bracket",
            "noSpaceBeforeClose": "A space is forbidden before closing bracket",
          },
          "replacedBy": [
            "jsx-tag-spacing",
          ],
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
            },
          ],
        },
      },
    },
    "rules": {
      "boolean-prop-naming": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforces consistent naming for boolean props",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/boolean-prop-naming.md",
          },
          "messages": {
            "patternMismatch": "Prop name \`{{propName}}\` doesn’t match rule \`{{pattern}}\`",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "minLength": 1,
                  "type": "string",
                },
                "propTypeNames": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true,
                },
                "rule": {
                  "default": "^(is|has)[A-Z]([A-Za-z0-9]?)+",
                  "minLength": 1,
                  "type": "string",
                },
                "validateNested": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "button-has-type": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow usage of \`button\` elements without an explicit \`type\` attribute",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/button-has-type.md",
          },
          "messages": {
            "complexType": "The button type attribute must be specified by a static string or a trivial ternary expression",
            "forbiddenValue": ""{{value}}" is an invalid value for button type attribute",
            "invalidValue": ""{{value}}" is an invalid value for button type attribute",
            "missingType": "Missing an explicit type attribute for button",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "button": {
                  "default": true,
                  "type": "boolean",
                },
                "reset": {
                  "default": true,
                  "type": "boolean",
                },
                "submit": {
                  "default": true,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "checked-requires-onchange-or-readonly": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce using \`onChange\` or \`readonly\` attribute when \`checked\` is used",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/checked-requires-onchange-or-readonly.md",
          },
          "messages": {
            "exclusiveCheckedAttribute": "Use either \`checked\` or \`defaultChecked\`, but not both.",
            "missingProperty": "\`checked\` should be used with either \`onChange\` or \`readOnly\`.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreExclusiveCheckedAttribute": {
                  "type": "boolean",
                },
                "ignoreMissingProperties": {
                  "type": "boolean",
                },
              },
            },
          ],
        },
      },
      "default-props-match-prop-types": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce all defaultProps have a corresponding non-required PropType",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/default-props-match-prop-types.md",
          },
          "messages": {
            "defaultHasNoType": "defaultProp "{{name}}" has no corresponding propTypes declaration.",
            "requiredHasDefault": "defaultProp "{{name}}" defined for isRequired propType.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowRequiredDefaults": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "destructuring-assignment": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce consistent usage of destructuring assignment of props, state, and context",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/destructuring-assignment.md",
          },
          "fixable": "code",
          "messages": {
            "destructureInSignature": "Must destructure props in the function signature.",
            "noDestructAssignment": "Must never use destructuring {{type}} assignment",
            "noDestructContextInSFCArg": "Must never use destructuring context assignment in SFC argument",
            "noDestructPropsInSFCArg": "Must never use destructuring props assignment in SFC argument",
            "useDestructAssignment": "Must use destructuring {{type}} assignment",
          },
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
              "type": "string",
            },
            {
              "additionalProperties": false,
              "properties": {
                "destructureInSignature": {
                  "enum": [
                    "always",
                    "ignore",
                  ],
                  "type": "string",
                },
                "ignoreClassFields": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "display-name": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow missing displayName in a React component definition",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/display-name.md",
          },
          "messages": {
            "noContextDisplayName": "Context definition is missing display name",
            "noDisplayName": "Component definition is missing display name",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "checkContextObjects": {
                  "type": "boolean",
                },
                "ignoreTranspilerName": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "forbid-component-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow certain props on components",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-component-props.md",
          },
          "messages": {
            "propIsForbidden": "Prop "{{prop}}" is forbidden on Components",
          },
          "schema": [
            {
              "properties": {
                "forbid": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowedFor": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "message": {
                            "type": "string",
                          },
                          "propName": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "disallowedFor": {
                            "items": {
                              "type": "string",
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "message": {
                            "type": "string",
                          },
                          "propName": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "disallowedFor",
                        ],
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowedFor": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "message": {
                            "type": "string",
                          },
                          "propNamePattern": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "disallowedFor": {
                            "items": {
                              "type": "string",
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "message": {
                            "type": "string",
                          },
                          "propNamePattern": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "disallowedFor",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "forbid-dom-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow certain props on DOM Nodes",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-dom-props.md",
          },
          "messages": {
            "propIsForbidden": "Prop "{{prop}}" is forbidden on DOM Nodes",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "forbid": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "properties": {
                          "disallowedFor": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "message": {
                            "type": "string",
                          },
                          "propName": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "minLength": 1,
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "forbid-elements": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow certain elements",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-elements.md",
          },
          "messages": {
            "forbiddenElement": "<{{element}}> is forbidden",
            "forbiddenElement_message": "<{{element}}> is forbidden, {{message}}",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "forbid": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "element": {
                            "type": "string",
                          },
                          "message": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "element",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "forbid-foreign-prop-types": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow using another component's propTypes",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-foreign-prop-types.md",
          },
          "messages": {
            "forbiddenPropType": "Using propTypes from another component is not safe because they may be removed in production builds",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowInPropTypes": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "forbid-prop-types": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow certain propTypes",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-prop-types.md",
          },
          "messages": {
            "forbiddenPropType": "Prop type "{{target}}" is forbidden",
          },
          "schema": [
            {
              "additionalProperties": true,
              "properties": {
                "checkChildContextTypes": {
                  "type": "boolean",
                },
                "checkContextTypes": {
                  "type": "boolean",
                },
                "forbid": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "forward-ref-uses-ref": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Require all forwardRef components include a ref parameter",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forward-ref-uses-ref.md",
          },
          "hasSuggestions": true,
          "messages": {
            "addRefParameter": "Add a ref parameter",
            "missingRefParameter": "forwardRef is used with this component but no ref parameter is set",
            "removeForwardRef": "Remove forwardRef wrapper",
          },
          "schema": [],
          "type": "suggestion",
        },
      },
      "function-component-definition": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce a specific function type for function components",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/function-component-definition.md",
          },
          "fixable": "code",
          "messages": {
            "arrow-function": "Function component is not an arrow function",
            "function-declaration": "Function component is not a function declaration",
            "function-expression": "Function component is not a function expression",
          },
          "schema": [
            {
              "properties": {
                "namedComponents": {
                  "anyOf": [
                    {
                      "enum": [
                        "function-declaration",
                        "arrow-function",
                        "function-expression",
                      ],
                    },
                    {
                      "items": {
                        "enum": [
                          "function-declaration",
                          "arrow-function",
                          "function-expression",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                  ],
                },
                "unnamedComponents": {
                  "anyOf": [
                    {
                      "enum": [
                        "arrow-function",
                        "function-expression",
                      ],
                    },
                    {
                      "items": {
                        "enum": [
                          "arrow-function",
                          "function-expression",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "hook-use-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Ensure destructuring and symmetric naming of useState hook value and setter variables",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/hook-use-state.md",
          },
          "hasSuggestions": true,
          "messages": {
            "suggestMemo": "Replace useState call with useMemo",
            "suggestPair": "Destructure useState call into value + setter pair",
            "useStateErrorMessage": "useState call is not destructured into value + setter pair",
            "useStateErrorMessageOrAddOption": "useState call is not destructured into value + setter pair (you can allow destructuring by enabling "allowDestructuredState" option)",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowDestructuredState": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "iframe-missing-sandbox": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce sandbox attribute on iframe elements",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/iframe-missing-sandbox.md",
          },
          "messages": {
            "attributeMissing": "An iframe element is missing a sandbox attribute",
            "invalidCombination": "An iframe element defines a sandbox attribute with both allow-scripts and allow-same-origin which is invalid",
            "invalidValue": "An iframe element defines a sandbox attribute with invalid value "{{ value }}"",
          },
          "schema": [],
        },
      },
      "jsx-boolean-value": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce boolean attributes notation in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-boolean-value.md",
          },
          "fixable": "code",
          "messages": {
            "omitBoolean": "Value must be omitted for boolean attribute \`{{propName}}\`",
            "omitPropAndBoolean": "Value must be omitted for \`false\` attribute: \`{{propName}}\`",
            "setBoolean": "Value must be set for boolean attribute \`{{propName}}\`",
          },
          "schema": {
            "anyOf": [
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "always",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "assumeUndefinedIsFalse": {
                        "type": "boolean",
                      },
                      "never": {
                        "items": {
                          "minLength": 1,
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "enum": [
                      "never",
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "always": {
                        "items": {
                          "minLength": 1,
                          "type": "string",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      "assumeUndefinedIsFalse": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            ],
          },
        },
      },
      "jsx-child-element-spacing": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-child-element-spacing.md",
          },
          "fixable": null,
          "messages": {
            "spacingAfterPrev": "Ambiguous spacing after previous element {{element}}",
            "spacingBeforeNext": "Ambiguous spacing before next element {{element}}",
          },
          "schema": [],
        },
      },
      "jsx-closing-bracket-location": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce closing bracket location in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-bracket-location.md",
          },
          "fixable": "code",
          "messages": {
            "bracketLocation": "The closing bracket must be {{location}}{{details}}",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "enum": [
                    "after-props",
                    "props-aligned",
                    "tag-aligned",
                    "line-aligned",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "location": {
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned",
                      ],
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "nonEmpty": {
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned",
                        false,
                      ],
                    },
                    "selfClosing": {
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned",
                        false,
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
        },
      },
      "jsx-closing-tag-location": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce closing tag location for multiline JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-tag-location.md",
          },
          "fixable": "whitespace",
          "messages": {
            "alignWithOpening": "Expected closing tag to be aligned with the line containing the opening tag",
            "matchIndent": "Expected closing tag to match indentation of opening.",
            "onOwnLine": "Closing tag of a multiline JSX expression must be on its own line.",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "enum": [
                    "tag-aligned",
                    "line-aligned",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "location": {
                      "enum": [
                        "tag-aligned",
                        "line-aligned",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
        },
      },
      "jsx-curly-brace-presence": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-brace-presence.md",
          },
          "fixable": "code",
          "messages": {
            "missingCurly": "Need to wrap this literal in a JSX expression.",
            "unnecessaryCurly": "Curly braces are unnecessary here.",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "children": {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                    },
                    "propElementValues": {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                    },
                    "props": {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                    },
                  },
                  "type": "object",
                },
                {
                  "enum": [
                    "always",
                    "never",
                    "ignore",
                  ],
                },
              ],
            },
          ],
        },
      },
      "jsx-curly-newline": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-newline.md",
          },
          "fixable": "whitespace",
          "messages": {
            "expectedAfter": "Expected newline after '{'.",
            "expectedBefore": "Expected newline before '}'.",
            "unexpectedAfter": "Unexpected newline after '{'.",
            "unexpectedBefore": "Unexpected newline before '}'.",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "enum": [
                    "consistent",
                    "never",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "multiline": {
                      "enum": [
                        "consistent",
                        "require",
                        "forbid",
                      ],
                    },
                    "singleline": {
                      "enum": [
                        "consistent",
                        "require",
                        "forbid",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
          "type": "layout",
        },
      },
      "jsx-curly-spacing": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-spacing.md",
          },
          "fixable": "code",
          "messages": {
            "noNewlineAfter": "There should be no newline after '{{token}}'",
            "noNewlineBefore": "There should be no newline before '{{token}}'",
            "noSpaceAfter": "There should be no space after '{{token}}'",
            "noSpaceBefore": "There should be no space before '{{token}}'",
            "spaceNeededAfter": "A space is required after '{{token}}'",
            "spaceNeededBefore": "A space is required before '{{token}}'",
          },
          "schema": {
            "definitions": {
              "basicConfig": {
                "properties": {
                  "allowMultiline": {
                    "type": "boolean",
                  },
                  "spacing": {
                    "properties": {
                      "objectLiterals": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                  "when": {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                },
                "type": "object",
              },
              "basicConfigOrBoolean": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/basicConfig",
                  },
                  {
                    "type": "boolean",
                  },
                ],
              },
            },
            "items": [
              {
                "anyOf": [
                  {
                    "allOf": [
                      {
                        "$ref": "#/definitions/basicConfig",
                      },
                      {
                        "properties": {
                          "attributes": {
                            "$ref": "#/definitions/basicConfigOrBoolean",
                          },
                          "children": {
                            "$ref": "#/definitions/basicConfigOrBoolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                  {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                ],
              },
              {
                "additionalProperties": false,
                "properties": {
                  "allowMultiline": {
                    "type": "boolean",
                  },
                  "spacing": {
                    "properties": {
                      "objectLiterals": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
            ],
            "type": "array",
          },
        },
      },
      "jsx-equals-spacing": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce or disallow spaces around equal signs in JSX attributes",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-equals-spacing.md",
          },
          "fixable": "code",
          "messages": {
            "needSpaceAfter": "A space is required after '='",
            "needSpaceBefore": "A space is required before '='",
            "noSpaceAfter": "There should be no space after '='",
            "noSpaceBefore": "There should be no space before '='",
          },
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
            },
          ],
        },
      },
      "jsx-filename-extension": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow file extensions that may contain JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-filename-extension.md",
          },
          "messages": {
            "extensionOnlyForJSX": "Only files containing JSX may use the extension '{{ext}}'",
            "noJSXWithExtension": "JSX not allowed in files with extension '{{ext}}'",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allow": {
                  "enum": [
                    "always",
                    "as-needed",
                  ],
                },
                "extensions": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "ignoreFilesWithoutCode": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-first-prop-new-line": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce proper position of the first property in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-first-prop-new-line.md",
          },
          "fixable": "code",
          "messages": {
            "propOnNewLine": "Property should be placed on a new line",
            "propOnSameLine": "Property should be placed on the same line as the component declaration",
          },
          "schema": [
            {
              "enum": [
                "always",
                "never",
                "multiline",
                "multiline-multiprop",
                "multiprop",
              ],
            },
          ],
        },
      },
      "jsx-fragments": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce shorthand or standard form for React fragments",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-fragments.md",
          },
          "fixable": "code",
          "messages": {
            "fragmentsNotSupported": "Fragments are only supported starting from React v16.2. Please disable the \`react/jsx-fragments\` rule in \`eslint\` settings or upgrade your version of React.",
            "preferFragment": "Prefer fragment shorthand over {{react}}.{{fragment}}",
            "preferPragma": "Prefer {{react}}.{{fragment}} over fragment shorthand",
          },
          "schema": [
            {
              "enum": [
                "syntax",
                "element",
              ],
            },
          ],
        },
      },
      "jsx-handler-names": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce event handler naming conventions in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-handler-names.md",
          },
          "messages": {
            "badHandlerName": "Handler function for {{propKey}} prop key must be a camelCase name beginning with '{{handlerPrefix}}' only",
            "badPropKey": "Prop key for {{propValue}} must begin with '{{handlerPropPrefix}}'",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkInlineFunction": {
                      "type": "boolean",
                    },
                    "checkLocalVariables": {
                      "type": "boolean",
                    },
                    "eventHandlerPrefix": {
                      "type": "string",
                    },
                    "eventHandlerPropPrefix": {
                      "type": "string",
                    },
                    "ignoreComponentNames": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkInlineFunction": {
                      "type": "boolean",
                    },
                    "checkLocalVariables": {
                      "type": "boolean",
                    },
                    "eventHandlerPrefix": {
                      "type": "string",
                    },
                    "eventHandlerPropPrefix": {
                      "enum": [
                        false,
                      ],
                      "type": "boolean",
                    },
                    "ignoreComponentNames": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkInlineFunction": {
                      "type": "boolean",
                    },
                    "checkLocalVariables": {
                      "type": "boolean",
                    },
                    "eventHandlerPrefix": {
                      "enum": [
                        false,
                      ],
                      "type": "boolean",
                    },
                    "eventHandlerPropPrefix": {
                      "type": "string",
                    },
                    "ignoreComponentNames": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkLocalVariables": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkInlineFunction": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                {
                  "properties": {
                    "ignoreComponentNames": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
        },
      },
      "jsx-indent": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce JSX indentation",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent.md",
          },
          "fixable": "whitespace",
          "messages": {
            "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "enum": [
                    "tab",
                  ],
                },
                {
                  "type": "integer",
                },
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "checkAttributes": {
                  "type": "boolean",
                },
                "indentLogicalExpressions": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-indent-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce props indentation in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent-props.md",
          },
          "fixable": "code",
          "messages": {
            "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "enum": [
                    "tab",
                    "first",
                  ],
                },
                {
                  "type": "integer",
                },
                {
                  "properties": {
                    "ignoreTernaryOperator": {
                      "type": "boolean",
                    },
                    "indentMode": {
                      "anyOf": [
                        {
                          "enum": [
                            "tab",
                            "first",
                          ],
                        },
                        {
                          "type": "integer",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
        },
      },
      "jsx-key": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow missing \`key\` props in iterators/collection literals",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-key.md",
          },
          "messages": {
            "keyBeforeSpread": "\`key\` prop must be placed before any \`{...spread}, to avoid conflicting with React’s new JSX transform: https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\`",
            "missingArrayKey": "Missing "key" prop for element in array",
            "missingArrayKeyUsePrag": "Missing "key" prop for element in array. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead",
            "missingIterKey": "Missing "key" prop for element in iterator",
            "missingIterKeyUsePrag": "Missing "key" prop for element in iterator. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead",
            "nonUniqueKeys": "\`key\` prop must be unique",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "checkFragmentShorthand": {
                  "default": false,
                  "type": "boolean",
                },
                "checkKeyMustBeforeSpread": {
                  "default": false,
                  "type": "boolean",
                },
                "warnOnDuplicates": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-max-depth": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce JSX maximum depth",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-depth.md",
          },
          "messages": {
            "wrongDepth": "Expected the depth of nested jsx elements to be <= {{needed}}, but found {{found}}.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "max": {
                  "minimum": 0,
                  "type": "integer",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-max-props-per-line": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce maximum of props on a single line in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-props-per-line.md",
          },
          "fixable": "code",
          "messages": {
            "newLine": "Prop \`{{prop}}\` must be placed on a new line",
          },
          "schema": [
            {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "maximum": {
                      "properties": {
                        "multi": {
                          "minimum": 1,
                          "type": "integer",
                        },
                        "single": {
                          "minimum": 1,
                          "type": "integer",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "maximum": {
                      "minimum": 1,
                      "type": "number",
                    },
                    "when": {
                      "enum": [
                        "always",
                        "multiline",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          ],
        },
      },
      "jsx-newline": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Require or prevent a new line after jsx elements and expressions.",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-newline.md",
          },
          "fixable": "code",
          "messages": {
            "allowMultilines": "Multiline JSX elements should start in a new line",
            "prevent": "JSX element should not start in a new line",
            "require": "JSX element should start in a new line",
          },
          "schema": [
            {
              "additionalProperties": false,
              "if": {
                "properties": {
                  "allowMultilines": {
                    "const": true,
                  },
                },
              },
              "properties": {
                "allowMultilines": {
                  "default": false,
                  "type": "boolean",
                },
                "prevent": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "then": {
                "properties": {
                  "prevent": {
                    "const": true,
                  },
                },
                "required": [
                  "prevent",
                ],
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-bind": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow \`.bind()\` or arrow functions in JSX props",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-bind.md",
          },
          "messages": {
            "arrowFunc": "JSX props should not use arrow functions",
            "bindCall": "JSX props should not use .bind()",
            "bindExpression": "JSX props should not use ::",
            "func": "JSX props should not use functions",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowArrowFunctions": {
                  "default": false,
                  "type": "boolean",
                },
                "allowBind": {
                  "default": false,
                  "type": "boolean",
                },
                "allowFunctions": {
                  "default": false,
                  "type": "boolean",
                },
                "ignoreDOMComponents": {
                  "default": false,
                  "type": "boolean",
                },
                "ignoreRefs": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-comment-textnodes": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow comments from being inserted as text nodes",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-comment-textnodes.md",
          },
          "messages": {
            "putCommentInBraces": "Comments inside children section of tag should be placed inside braces",
          },
          "schema": [],
        },
      },
      "jsx-no-constructed-context-values": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallows JSX context provider values from taking values that will cause needless rerenders",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-constructed-context-values.md",
          },
          "messages": {
            "defaultMsg": "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
            "defaultMsgFunc": "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useCallback hook.",
            "withIdentifierMsg": "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
            "withIdentifierMsgFunc": "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useCallback hook.",
          },
          "schema": false,
        },
      },
      "jsx-no-duplicate-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow duplicate properties in JSX",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-duplicate-props.md",
          },
          "messages": {
            "noDuplicateProps": "No duplicate props allowed",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreCase": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-leaked-render": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow problematic leaked values from being rendered",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-leaked-render.md",
          },
          "fixable": "code",
          "messages": {
            "noPotentialLeakedRender": "Potential leaked value that might cause unintentionally rendered values or rendering crashes",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "validStrategies": {
                  "default": [
                    "ternary",
                    "coerce",
                  ],
                  "items": {
                    "enum": [
                      "ternary",
                      "coerce",
                    ],
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-literals": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow usage of string literals in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-literals.md",
          },
          "messages": {
            "invalidPropValue": "Invalid prop value: "{{text}}"",
            "invalidPropValueInElement": "Invalid prop value: "{{text}}" in {{element}}",
            "literalNotInJSXExpression": "Missing JSX expression container around literal string: "{{text}}"",
            "literalNotInJSXExpressionInElement": "Missing JSX expression container around literal string: "{{text}}" in {{element}}",
            "noStringsInAttributes": "Strings not allowed in attributes: "{{text}}"",
            "noStringsInAttributesInElement": "Strings not allowed in attributes: "{{text}}" in {{element}}",
            "noStringsInJSX": "Strings not allowed in JSX files: "{{text}}"",
            "noStringsInJSXInElement": "Strings not allowed in JSX files: "{{text}}" in {{element}}",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowedStrings": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "elementOverrides": {
                  "patternProperties": {
                    "^[A-Z][\\w.]*$": {
                      "properties": {
                        "allowedStrings": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "applyToNestedElements": {
                          "type": "boolean",
                        },
                        "ignoreProps": {
                          "type": "boolean",
                        },
                        "noAttributeStrings": {
                          "type": "boolean",
                        },
                        "noStrings": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
                "ignoreProps": {
                  "type": "boolean",
                },
                "noAttributeStrings": {
                  "type": "boolean",
                },
                "noStrings": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-script-url": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of \`javascript:\` URLs",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-script-url.md",
          },
          "messages": {
            "noScriptURL": "A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML, try using dangerouslySetInnerHTML instead.",
          },
          "schema": {
            "anyOf": [
              {
                "additionalItems": false,
                "items": [
                  {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "name": {
                          "type": "string",
                        },
                        "props": {
                          "items": {
                            "type": "string",
                            "uniqueItems": true,
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "name",
                        "props",
                      ],
                      "type": "object",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  {
                    "additionalItems": false,
                    "properties": {
                      "includeFromSettings": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
              {
                "additionalItems": false,
                "items": [
                  {
                    "additionalItems": false,
                    "properties": {
                      "includeFromSettings": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            ],
          },
        },
      },
      "jsx-no-target-blank": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow \`target="_blank"\` attribute without \`rel="noreferrer"\`",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md",
          },
          "fixable": "code",
          "messages": {
            "noTargetBlankWithoutNoopener": "Using target="_blank" without rel="noreferrer" or rel="noopener" (the former implies the latter and is preferred due to wider support) is a security risk: see https://mathiasbynens.github.io/rel-noopener/#recommendations",
            "noTargetBlankWithoutNoreferrer": "Using target="_blank" without rel="noreferrer" (which implies rel="noopener") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowReferrer": {
                  "type": "boolean",
                },
                "enforceDynamicLinks": {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                "forms": {
                  "default": false,
                  "type": "boolean",
                },
                "links": {
                  "default": true,
                  "type": "boolean",
                },
                "warnOnSpreadAttributes": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-undef": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow undeclared variables in JSX",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-undef.md",
          },
          "messages": {
            "undefined": "'{{identifier}}' is not defined.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowGlobals": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-no-useless-fragment": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow unnecessary fragments",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-useless-fragment.md",
          },
          "fixable": "code",
          "messages": {
            "ChildOfHtmlElement": "Passing a fragment to an HTML element is useless.",
            "NeedsMoreChildren": "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
          },
          "schema": [
            {
              "properties": {
                "allowExpressions": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "jsx-one-expression-per-line": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Require one JSX element per line",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-one-expression-per-line.md",
          },
          "fixable": "whitespace",
          "messages": {
            "moveToNewLine": "\`{{descriptor}}\` must be placed on a new line",
          },
          "schema": [
            {
              "additionalProperties": false,
              "default": {
                "allow": "none",
              },
              "properties": {
                "allow": {
                  "enum": [
                    "none",
                    "literal",
                    "single-child",
                    "non-jsx",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-pascal-case": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce PascalCase for user-defined JSX components",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-pascal-case.md",
          },
          "messages": {
            "usePascalCase": "Imported JSX component {{name}} must be in PascalCase",
            "usePascalOrSnakeCase": "Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowAllCaps": {
                  "type": "boolean",
                },
                "allowLeadingUnderscore": {
                  "type": "boolean",
                },
                "allowNamespace": {
                  "type": "boolean",
                },
                "ignore": {
                  "items": [
                    {
                      "type": "string",
                    },
                  ],
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-props-no-multi-spaces": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow multiple spaces between inline JSX props",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-multi-spaces.md",
          },
          "fixable": "code",
          "messages": {
            "noLineGap": "Expected no line gap between “{{prop1}}” and “{{prop2}}”",
            "onlyOneSpace": "Expected only one space between “{{prop1}}” and “{{prop2}}”",
          },
          "schema": [],
        },
      },
      "jsx-props-no-spread-multi": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow JSX prop spreading the same identifier multiple times",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spread-multi.md",
          },
          "messages": {
            "noMultiSpreading": "Spreading the same expression multiple times is forbidden",
          },
        },
      },
      "jsx-props-no-spreading": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow JSX prop spreading",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spreading.md",
          },
          "messages": {
            "noSpreading": "Prop spreading is forbidden",
          },
          "schema": [
            {
              "allOf": [
                {
                  "properties": {
                    "custom": {
                      "enum": [
                        "enforce",
                        "ignore",
                      ],
                    },
                    "exceptions": {
                      "items": {
                        "type": "string",
                        "uniqueItems": true,
                      },
                      "type": "array",
                    },
                    "explicitSpread": {
                      "enum": [
                        "enforce",
                        "ignore",
                      ],
                    },
                    "html": {
                      "enum": [
                        "enforce",
                        "ignore",
                      ],
                    },
                  },
                  "type": "object",
                },
                {
                  "not": {
                    "properties": {
                      "custom": {
                        "enum": [
                          "ignore",
                        ],
                      },
                      "exceptions": {
                        "maxItems": 0,
                        "minItems": 0,
                        "type": "array",
                      },
                      "html": {
                        "enum": [
                          "ignore",
                        ],
                      },
                    },
                    "required": [
                      "html",
                      "custom",
                    ],
                    "type": "object",
                  },
                },
              ],
            },
          ],
        },
      },
      "jsx-sort-default-props": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce defaultProps declarations alphabetical sorting",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md",
          },
          "messages": {
            "propsNotSorted": "Default prop types declarations should be sorted alphabetically",
          },
          "replacedBy": [
            "sort-default-props",
          ],
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreCase": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-sort-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce props alphabetical sorting",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-props.md",
          },
          "fixable": "code",
          "messages": {
            "listCallbacksLast": "Callbacks must be listed after all other props",
            "listIsEmpty": "A customized reserved first list must not be empty",
            "listMultilineFirst": "Multiline props must be listed before all other props",
            "listMultilineLast": "Multiline props must be listed after all other props",
            "listReservedPropsFirst": "Reserved props must be listed before all other props",
            "listShorthandFirst": "Shorthand props must be listed before all other props",
            "listShorthandLast": "Shorthand props must be listed after all other props",
            "noUnreservedProps": "A customized reserved first list must only contain a subset of React reserved props. Remove: {{unreservedWords}}",
            "sortPropsByAlpha": "Props should be sorted alphabetically",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "callbacksLast": {
                  "type": "boolean",
                },
                "ignoreCase": {
                  "type": "boolean",
                },
                "locale": {
                  "default": "auto",
                  "type": "string",
                },
                "multiline": {
                  "default": "ignore",
                  "enum": [
                    "ignore",
                    "first",
                    "last",
                  ],
                },
                "noSortAlphabetically": {
                  "type": "boolean",
                },
                "reservedFirst": {
                  "type": [
                    "array",
                    "boolean",
                  ],
                },
                "shorthandFirst": {
                  "type": "boolean",
                },
                "shorthandLast": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-space-before-closing": {
        "create": [Function],
        "meta": {
          "deprecated": true,
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce spacing before closing bracket in JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md",
          },
          "fixable": "code",
          "messages": {
            "needSpaceBeforeClose": "A space is required before closing bracket",
            "noSpaceBeforeClose": "A space is forbidden before closing bracket",
          },
          "replacedBy": [
            "jsx-tag-spacing",
          ],
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
            },
          ],
        },
      },
      "jsx-tag-spacing": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce whitespace in and around the JSX opening and closing brackets",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-tag-spacing.md",
          },
          "fixable": "whitespace",
          "messages": {
            "afterOpenNeedSpace": "A space is required after opening bracket",
            "afterOpenNoSpace": "A space is forbidden after opening bracket",
            "beforeCloseNeedNewline": "A newline is required before closing bracket",
            "beforeCloseNeedSpace": "Whitespace is required before closing bracket",
            "beforeCloseNoSpace": "A space is forbidden before closing bracket",
            "beforeSelfCloseNeedNewline": "A newline is required before closing bracket",
            "beforeSelfCloseNeedSpace": "A space is required before closing bracket",
            "beforeSelfCloseNoSpace": "A space is forbidden before closing bracket",
            "closeSlashNeedSpace": "Whitespace is required between \`<\` and \`/\`; write \`< /\`",
            "closeSlashNoSpace": "Whitespace is forbidden between \`<\` and \`/\`; write \`</\`",
            "selfCloseSlashNeedSpace": "Whitespace is required between \`/\` and \`>\`; write \`/ >\`",
            "selfCloseSlashNoSpace": "Whitespace is forbidden between \`/\` and \`>\`; write \`/>\`",
          },
          "schema": [
            {
              "additionalProperties": false,
              "default": {
                "afterOpening": "never",
                "beforeClosing": "allow",
                "beforeSelfClosing": "always",
                "closingSlash": "never",
              },
              "properties": {
                "afterOpening": {
                  "enum": [
                    "always",
                    "allow-multiline",
                    "never",
                    "allow",
                  ],
                },
                "beforeClosing": {
                  "enum": [
                    "always",
                    "proportional-always",
                    "never",
                    "allow",
                  ],
                },
                "beforeSelfClosing": {
                  "enum": [
                    "always",
                    "proportional-always",
                    "never",
                    "allow",
                  ],
                },
                "closingSlash": {
                  "enum": [
                    "always",
                    "never",
                    "allow",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "jsx-uses-react": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow React to be incorrectly marked as unused",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-react.md",
          },
          "schema": [],
        },
      },
      "jsx-uses-vars": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow variables used in JSX to be incorrectly marked as unused",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-vars.md",
          },
          "schema": [],
        },
      },
      "jsx-wrap-multilines": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow missing parentheses around multiline JSX",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-wrap-multilines.md",
          },
          "fixable": "code",
          "messages": {
            "extraParens": "Expected no parentheses around multilines JSX",
            "missingParens": "Missing parentheses around multilines JSX",
            "parensOnNewLines": "Parentheses around JSX should be on separate lines",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "arrow": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                    "never",
                  ],
                },
                "assignment": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                    "never",
                  ],
                },
                "condition": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                    "never",
                  ],
                },
                "declaration": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                    "never",
                  ],
                },
                "logical": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                    "never",
                  ],
                },
                "prop": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                    "never",
                  ],
                },
                "return": {
                  "enum": [
                    true,
                    false,
                    "ignore",
                    "parens",
                    "parens-new-line",
                    "never",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-access-state-in-setstate": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow when this.state is accessed within setState",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-access-state-in-setstate.md",
          },
          "messages": {
            "useCallback": "Use callback in setState when referencing the previous state.",
          },
        },
      },
      "no-adjacent-inline-elements": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow adjacent inline elements not separated by whitespace.",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-adjacent-inline-elements.md",
          },
          "messages": {
            "inlineElement": "Child elements which render as inline HTML elements should be separated by a space or wrapped in block level elements.",
          },
          "schema": [],
        },
      },
      "no-array-index-key": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of Array index in keys",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-array-index-key.md",
          },
          "messages": {
            "noArrayIndex": "Do not use Array index in keys",
          },
          "schema": [],
        },
      },
      "no-arrow-function-lifecycle": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Lifecycle methods should be methods on the prototype, not class fields",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-arrow-function-lifecycle.md",
          },
          "fixable": "code",
          "messages": {
            "lifecycle": "{{propertyName}} is a React lifecycle method, and should not be an arrow function or in a class field. Use an instance method instead.",
          },
          "schema": [],
        },
      },
      "no-children-prop": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow passing of children as props",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-children-prop.md",
          },
          "messages": {
            "nestChildren": "Do not pass children as props. Instead, nest children between the opening and closing tags.",
            "nestFunction": "Do not nest a function between the opening and closing tags. Instead, pass it as a prop.",
            "passChildrenAsArgs": "Do not pass children as props. Instead, pass them as additional arguments to React.createElement.",
            "passFunctionAsArgs": "Do not pass a function as an additional argument to React.createElement. Instead, pass it as a prop.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowFunctions": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-danger": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of dangerous JSX properties",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger.md",
          },
          "messages": {
            "dangerousProp": "Dangerous property '{{name}}' found",
          },
          "schema": [
            {
              "properties": {
                "customComponentNames": {
                  "items": {
                    "type": "string",
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-danger-with-children": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow when a DOM element is using both children and dangerouslySetInnerHTML",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger-with-children.md",
          },
          "messages": {
            "dangerWithChildren": "Only set one of \`children\` or \`props.dangerouslySetInnerHTML\`",
          },
          "schema": [],
        },
      },
      "no-deprecated": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of deprecated methods",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-deprecated.md",
          },
          "messages": {
            "deprecated": "{{oldMethod}} is deprecated since React {{version}}{{newMethod}}{{refs}}",
          },
          "schema": [],
        },
      },
      "no-did-mount-set-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of setState in componentDidMount",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-mount-set-state.md",
          },
          "messages": {
            "noSetState": "Do not use setState in {{name}}",
          },
          "schema": [
            {
              "enum": [
                "disallow-in-func",
              ],
            },
          ],
        },
      },
      "no-did-update-set-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of setState in componentDidUpdate",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-update-set-state.md",
          },
          "messages": {
            "noSetState": "Do not use setState in {{name}}",
          },
          "schema": [
            {
              "enum": [
                "disallow-in-func",
              ],
            },
          ],
        },
      },
      "no-direct-mutation-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow direct mutation of this.state",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-direct-mutation-state.md",
          },
          "messages": {
            "noDirectMutation": "Do not mutate state directly. Use setState().",
          },
        },
      },
      "no-find-dom-node": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of findDOMNode",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-find-dom-node.md",
          },
          "messages": {
            "noFindDOMNode": "Do not use findDOMNode. It doesn’t work with function components and is deprecated in StrictMode. See https://reactjs.org/docs/react-dom.html#finddomnode",
          },
          "schema": [],
        },
      },
      "no-invalid-html-attribute": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow usage of invalid attributes",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-invalid-html-attribute.md",
          },
          "hasSuggestions": true,
          "messages": {
            "emptyIsMeaningless": "An empty “{{attributeName}}” attribute is meaningless.",
            "neverValid": "“{{reportingValue}}” is never a valid “{{attributeName}}” attribute value.",
            "noEmpty": "An empty “{{attributeName}}” attribute is meaningless.",
            "noMethod": "The ”{{attributeName}}“ attribute cannot be a method.",
            "notAlone": "“{{reportingValue}}” must be directly followed by “{{missingValue}}”.",
            "notPaired": "“{{reportingValue}}” can not be directly followed by “{{secondValue}}” without “{{missingValue}}”.",
            "notValidFor": "“{{reportingValue}}” is not a valid “{{attributeName}}” attribute value for <{{elementName}}>.",
            "onlyMeaningfulFor": "The ”{{attributeName}}“ attribute only has meaning on the tags: {{tagNames}}",
            "onlyStrings": "“{{attributeName}}” attribute only supports strings.",
            "spaceDelimited": "”{{attributeName}}“ attribute values should be space delimited.",
            "suggestRemoveDefault": ""remove {{attributeName}}"",
            "suggestRemoveEmpty": ""remove empty attribute {{attributeName}}"",
            "suggestRemoveInvalid": "“remove invalid attribute {{reportingValue}}”",
            "suggestRemoveNonString": "remove non-string value in “{{attributeName}}”",
            "suggestRemoveWhitespaces": "remove whitespaces in “{{attributeName}}”",
          },
          "schema": [
            {
              "items": {
                "enum": [
                  "rel",
                ],
              },
              "type": "array",
              "uniqueItems": true,
            },
          ],
          "type": "suggestion",
        },
      },
      "no-is-mounted": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of isMounted",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-is-mounted.md",
          },
          "messages": {
            "noIsMounted": "Do not use isMounted",
          },
          "schema": [],
        },
      },
      "no-multi-comp": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow multiple component definition per file",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-multi-comp.md",
          },
          "messages": {
            "onlyOneComponent": "Declare only one React component per file",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreStateless": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-namespace": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Enforce that namespaces are not used in React elements",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-namespace.md",
          },
          "messages": {
            "noNamespace": "React component {{name}} must not be in a namespace, as React does not support them",
          },
          "schema": [],
        },
      },
      "no-object-type-as-default-prop": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of referential-type variables as default param in functional component",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-object-type-as-default-prop.md",
          },
          "messages": {
            "forbiddenTypeDefaultParam": "{{propName}} has a/an {{forbiddenType}} as default prop. This could lead to potential infinite render loop in React. Use a variable reference instead of {{forbiddenType}}.",
          },
        },
      },
      "no-redundant-should-component-update": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow usage of shouldComponentUpdate when extending React.PureComponent",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-redundant-should-component-update.md",
          },
          "messages": {
            "noShouldCompUpdate": "{{component}} does not need shouldComponentUpdate when extending React.PureComponent.",
          },
          "schema": [],
        },
      },
      "no-render-return-value": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of the return value of ReactDOM.render",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-render-return-value.md",
          },
          "messages": {
            "noReturnValue": "Do not depend on the return value from {{node}}.render",
          },
          "schema": [],
        },
      },
      "no-set-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow usage of setState",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-set-state.md",
          },
          "messages": {
            "noSetState": "Do not use setState",
          },
          "schema": [],
        },
      },
      "no-string-refs": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow using string references",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-string-refs.md",
          },
          "messages": {
            "stringInRefDeprecated": "Using string literals in ref attributes is deprecated.",
            "thisRefsDeprecated": "Using this.refs is deprecated.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "noTemplateLiterals": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-this-in-sfc": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow \`this\` from being used in stateless functional components",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-this-in-sfc.md",
          },
          "messages": {
            "noThisInSFC": "Stateless functional components should not use \`this\`",
          },
          "schema": [],
        },
      },
      "no-typos": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow common typos",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-typos.md",
          },
          "messages": {
            "noPropTypesBinding": "\`'prop-types'\` imported without a local \`PropTypes\` binding.",
            "noReactBinding": "\`'react'\` imported without a local \`React\` binding.",
            "staticLifecycleMethod": "Lifecycle method should be static: {{method}}",
            "typoLifecycleMethod": "Typo in component lifecycle method declaration: {{actual}} should be {{expected}}",
            "typoPropDeclaration": "Typo in property declaration",
            "typoPropType": "Typo in declared prop type: {{name}}",
            "typoPropTypeChain": "Typo in prop type chain qualifier: {{name}}",
            "typoStaticClassProp": "Typo in static class property declaration",
          },
          "schema": [],
        },
      },
      "no-unescaped-entities": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow unescaped HTML entities from appearing in markup",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unescaped-entities.md",
          },
          "messages": {
            "unescapedEntity": "HTML entity, \`{{entity}}\` , must be escaped.",
            "unescapedEntityAlts": "\`{{entity}}\` can be escaped with {{alts}}.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "forbid": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "properties": {
                          "alternatives": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "char": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-unknown-property": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow usage of unknown DOM property",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unknown-property.md",
          },
          "fixable": "code",
          "messages": {
            "dataLowercaseRequired": "React does not recognize data-* props with uppercase characters on a DOM element. Found '{{name}}', use '{{lowerCaseName}}' instead",
            "invalidPropOnTag": "Invalid property '{{name}}' found on tag '{{tagName}}', but it is only allowed on: {{allowedTags}}",
            "unknownProp": "Unknown property '{{name}}' found",
            "unknownPropWithStandardName": "Unknown property '{{name}}' found, use '{{standardName}}' instead",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "requireDataLowercase": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-unsafe": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of unsafe lifecycle methods",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unsafe.md",
          },
          "messages": {
            "unsafeMethod": "{{method}} is unsafe for use in async rendering. Update the component to use {{newMethod}} instead. {{details}}",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "checkAliases": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-unstable-nested-components": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow creating unstable components inside components",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unstable-nested-components.md",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowAsProps": {
                  "type": "boolean",
                },
                "customValidators": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-unused-class-component-methods": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow declaring unused methods of component class",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-class-component-methods.md",
          },
          "messages": {
            "unused": "Unused method or property "{{name}}"",
            "unusedWithClass": "Unused method or property "{{name}}" of class "{{className}}"",
          },
          "schema": [],
        },
      },
      "no-unused-prop-types": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow definitions of unused propTypes",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-prop-types.md",
          },
          "messages": {
            "unusedPropType": "'{{name}}' PropType is defined but prop is never used",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "customValidators": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                "skipShapeProps": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "no-unused-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow definitions of unused state",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-state.md",
          },
          "messages": {
            "unusedStateField": "Unused state field: '{{name}}'",
          },
          "schema": [],
        },
      },
      "no-will-update-set-state": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow usage of setState in componentWillUpdate",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-will-update-set-state.md",
          },
          "messages": {
            "noSetState": "Do not use setState in {{name}}",
          },
          "schema": [
            {
              "enum": [
                "disallow-in-func",
              ],
            },
          ],
        },
      },
      "prefer-es6-class": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce ES5 or ES6 class for React Components",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-es6-class.md",
          },
          "messages": {
            "shouldUseCreateClass": "Component should use createClass instead of es6 class",
            "shouldUseES6Class": "Component should use es6 class instead of createClass",
          },
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
            },
          ],
        },
      },
      "prefer-exact-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Prefer exact proptype definitions",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-exact-props.md",
          },
          "messages": {
            "flow": "Component flow props should be set with exact objects.",
            "propTypes": "Component propTypes should be exact by using {{exactPropWrappers}}.",
          },
          "schema": [],
        },
      },
      "prefer-read-only-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce that props are read-only",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-read-only-props.md",
          },
          "fixable": "code",
          "messages": {
            "readOnlyProp": "Prop '{{name}}' should be read-only.",
          },
          "schema": [],
        },
      },
      "prefer-stateless-function": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce stateless components to be written as a pure function",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-stateless-function.md",
          },
          "messages": {
            "componentShouldBePure": "Component should be written as a pure function",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignorePureComponents": {
                  "default": false,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "prop-types": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow missing props validation in a React component definition",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prop-types.md",
          },
          "messages": {
            "missingPropType": "'{{name}}' is missing in props validation",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "customValidators": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "ignore": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
                "skipUndeclared": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "react-in-jsx-scope": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Disallow missing React when using JSX",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md",
          },
          "messages": {
            "notInScope": "'{{name}}' must be in scope when using JSX",
          },
          "schema": [],
        },
      },
      "require-default-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce a defaultProps definition for every prop that is not a required prop",
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-default-props.md",
          },
          "messages": {
            "destructureInSignature": "Must destructure props in the function signature to initialize an optional prop.",
            "noDefaultPropsWithFunction": "Don’t use defaultProps with function components.",
            "noDefaultWithRequired": "propType "{{name}}" is required and should not have a defaultProps declaration.",
            "shouldAssignObjectDefault": "propType "{{name}}" is not required, but has no corresponding default argument value.",
            "shouldHaveDefault": "propType "{{name}}" is not required, but has no corresponding defaultProps declaration.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "classes": {
                  "enum": [
                    "defaultProps",
                    "ignore",
                  ],
                },
                "forbidDefaultForRequired": {
                  "type": "boolean",
                },
                "functions": {
                  "enum": [
                    "defaultArguments",
                    "defaultProps",
                    "ignore",
                  ],
                },
                "ignoreFunctionalComponents": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "require-optimization": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Enforce React components to have a shouldComponentUpdate method",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-optimization.md",
          },
          "messages": {
            "noShouldComponentUpdate": "Component is not optimized. Please add a shouldComponentUpdate method.",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "allowDecorators": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "require-render-return": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Enforce ES5 or ES6 class for returning value in render function",
            "recommended": true,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-render-return.md",
          },
          "messages": {
            "noRenderReturn": "Your render method should have a return statement",
          },
          "schema": [],
        },
      },
      "self-closing-comp": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Disallow extra closing tags for components without children",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/self-closing-comp.md",
          },
          "fixable": "code",
          "messages": {
            "notSelfClosing": "Empty components are self-closing",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "component": {
                  "default": true,
                  "type": "boolean",
                },
                "html": {
                  "default": true,
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "sort-comp": {
        "create": [Function],
        "defaultConfig": {
          "groups": {
            "lifecycle": [
              "displayName",
              "propTypes",
              "contextTypes",
              "childContextTypes",
              "mixins",
              "statics",
              "defaultProps",
              "constructor",
              "getDefaultProps",
              "state",
              "getInitialState",
              "getChildContext",
              "getDerivedStateFromProps",
              "componentWillMount",
              "UNSAFE_componentWillMount",
              "componentDidMount",
              "componentWillReceiveProps",
              "UNSAFE_componentWillReceiveProps",
              "shouldComponentUpdate",
              "componentWillUpdate",
              "UNSAFE_componentWillUpdate",
              "getSnapshotBeforeUpdate",
              "componentDidUpdate",
              "componentDidCatch",
              "componentWillUnmount",
            ],
          },
          "order": [
            "static-methods",
            "lifecycle",
            "everything-else",
            "render",
          ],
        },
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce component methods order",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-comp.md",
          },
          "messages": {
            "unsortedProps": "{{propA}} should be placed {{position}} {{propB}}",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "groups": {
                  "patternProperties": {
                    "^.*$": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
                "order": {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "sort-default-props": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce defaultProps declarations alphabetical sorting",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-default-props.md",
          },
          "messages": {
            "propsNotSorted": "Default prop types declarations should be sorted alphabetically",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "ignoreCase": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "sort-prop-types": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce propTypes declarations alphabetical sorting",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-prop-types.md",
          },
          "fixable": "code",
          "messages": {
            "callbackPropsLast": "Callback prop types must be listed after all other prop types",
            "propsNotSorted": "Prop types declarations should be sorted alphabetically",
            "requiredPropsFirst": "Required prop types must be listed before all other prop types",
          },
          "schema": [
            {
              "additionalProperties": false,
              "properties": {
                "callbacksLast": {
                  "type": "boolean",
                },
                "checkTypes": {
                  "type": "boolean",
                },
                "ignoreCase": {
                  "type": "boolean",
                },
                "noSortAlphabetically": {
                  "type": "boolean",
                },
                "requiredFirst": {
                  "type": "boolean",
                },
                "sortShapeProp": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "state-in-constructor": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforce class component state initialization style",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/state-in-constructor.md",
          },
          "messages": {
            "stateInitClassProp": "State initialization should be in a class property",
            "stateInitConstructor": "State initialization should be in a constructor",
          },
          "schema": [
            {
              "enum": [
                "always",
                "never",
              ],
            },
          ],
        },
      },
      "static-property-placement": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Stylistic Issues",
            "description": "Enforces where React component static properties should be positioned.",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/static-property-placement.md",
          },
          "fixable": null,
          "messages": {
            "declareOutsideClass": "'{{name}}' should be declared outside the class body.",
            "notGetterClassFunc": "'{{name}}' should be declared as a static getter class function.",
            "notStaticClassProp": "'{{name}}' should be declared as a static class property.",
          },
          "schema": [
            {
              "enum": [
                "static public field",
                "static getter",
                "property assignment",
              ],
            },
            {
              "additionalProperties": false,
              "properties": {
                "childContextTypes": {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
                "contextType": {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
                "contextTypes": {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
                "defaultProps": {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
                "displayName": {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
                "propTypes": {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "style-prop-object": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Possible Errors",
            "description": "Enforce style prop value is an object",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/style-prop-object.md",
          },
          "messages": {
            "stylePropNotObject": "Style prop value must be an object",
          },
          "schema": [
            {
              "properties": {
                "allow": {
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "void-dom-elements-no-children": {
        "create": [Function],
        "meta": {
          "docs": {
            "category": "Best Practices",
            "description": "Disallow void DOM elements (e.g. \`<img />\`, \`<br />\`) from receiving children",
            "recommended": false,
            "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/void-dom-elements-no-children.md",
          },
          "messages": {
            "noChildrenInVoidEl": "Void DOM element <{{element}} /> cannot receive children.",
          },
          "schema": [],
        },
      },
    },
  },
  "react-hooks": {
    "configs": {
      "recommended": {
        "plugins": [
          "react-hooks",
        ],
        "rules": {
          "react-hooks/exhaustive-deps": "warn",
          "react-hooks/rules-of-hooks": "error",
        },
      },
    },
    "rules": {
      "exhaustive-deps": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "verifies the list of dependencies for Hooks like useEffect and similar",
            "recommended": true,
            "url": "https://github.com/facebook/react/issues/14920",
          },
          "fixable": "code",
          "hasSuggestions": true,
          "schema": [
            {
              "additionalProperties": false,
              "enableDangerousAutofixThisMayCauseInfiniteLoops": false,
              "properties": {
                "additionalHooks": {
                  "type": "string",
                },
                "enableDangerousAutofixThisMayCauseInfiniteLoops": {
                  "type": "boolean",
                },
              },
              "type": "object",
            },
          ],
          "type": "suggestion",
        },
      },
      "rules-of-hooks": {
        "create": [Function],
        "meta": {
          "docs": {
            "description": "enforces the Rules of Hooks",
            "recommended": true,
            "url": "https://reactjs.org/docs/hooks-rules.html",
          },
          "type": "problem",
        },
      },
    },
  },
  "use-macros": {
    "meta": {
      "name": "eslint-plugin-use-macros",
    },
    "rules": {
      "graphql-tag": {
        "create": [Function],
        "meta": {
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "error",
                "warn",
                "off",
              ],
            },
          ],
          "type": "suggestion",
        },
      },
      "styled-components": {
        "create": [Function],
        "meta": {
          "fixable": "code",
          "schema": [
            {
              "enum": [
                "error",
                "warn",
                "off",
              ],
            },
          ],
          "type": "suggestion",
        },
      },
    },
  },
}
`;

exports[`eslint-config-wantedly should match snapshot for: rules 1`] = `
{
  "@babel/object-curly-spacing": [
    0,
  ],
  "@babel/semi": [
    0,
  ],
  "@typescript-eslint/block-spacing": [
    0,
  ],
  "@typescript-eslint/brace-style": [
    0,
  ],
  "@typescript-eslint/comma-dangle": [
    0,
  ],
  "@typescript-eslint/comma-spacing": [
    0,
  ],
  "@typescript-eslint/func-call-spacing": [
    0,
  ],
  "@typescript-eslint/indent": [
    0,
  ],
  "@typescript-eslint/key-spacing": [
    0,
  ],
  "@typescript-eslint/keyword-spacing": [
    0,
  ],
  "@typescript-eslint/lines-around-comment": [
    0,
  ],
  "@typescript-eslint/member-delimiter-style": [
    0,
  ],
  "@typescript-eslint/no-extra-parens": [
    0,
  ],
  "@typescript-eslint/no-extra-semi": [
    0,
  ],
  "@typescript-eslint/object-curly-spacing": [
    0,
  ],
  "@typescript-eslint/quotes": [
    0,
  ],
  "@typescript-eslint/semi": [
    0,
  ],
  "@typescript-eslint/space-before-blocks": [
    0,
  ],
  "@typescript-eslint/space-before-function-paren": [
    0,
  ],
  "@typescript-eslint/space-infix-ops": [
    0,
  ],
  "@typescript-eslint/type-annotation-spacing": [
    0,
  ],
  "array-bracket-newline": [
    0,
  ],
  "array-bracket-spacing": [
    0,
  ],
  "array-callback-return": [
    0,
  ],
  "array-element-newline": [
    0,
  ],
  "arrow-body-style": [
    0,
  ],
  "arrow-parens": [
    1,
    "always",
  ],
  "arrow-spacing": [
    0,
  ],
  "babel/object-curly-spacing": [
    0,
  ],
  "babel/quotes": [
    0,
  ],
  "babel/semi": [
    0,
  ],
  "block-spacing": [
    0,
  ],
  "brace-style": [
    0,
  ],
  "camelcase": [
    2,
    {
      "ignoreDestructuring": false,
      "ignoreGlobals": false,
      "ignoreImports": false,
      "properties": "never",
    },
  ],
  "class-methods-use-this": [
    0,
  ],
  "comma-dangle": [
    2,
    {
      "arrays": "always-multiline",
      "exports": "always-multiline",
      "functions": "never",
      "imports": "always-multiline",
      "objects": "always-multiline",
    },
  ],
  "comma-spacing": [
    0,
  ],
  "comma-style": [
    0,
  ],
  "computed-property-spacing": [
    0,
  ],
  "consistent-return": [
    0,
  ],
  "constructor-super": [
    2,
  ],
  "curly": [
    0,
  ],
  "dot-location": [
    0,
  ],
  "dot-notation": [
    1,
  ],
  "eol-last": [
    0,
  ],
  "eqeqeq": [
    2,
    "smart",
  ],
  "es/no-regexp-lookbehind-assertions": [
    2,
  ],
  "es/no-regexp-named-capture-groups": [
    2,
  ],
  "flowtype/boolean-style": [
    0,
  ],
  "flowtype/delimiter-dangle": [
    0,
  ],
  "flowtype/generic-spacing": [
    0,
  ],
  "flowtype/object-type-curly-spacing": [
    0,
  ],
  "flowtype/object-type-delimiter": [
    0,
  ],
  "flowtype/quotes": [
    0,
  ],
  "flowtype/semi": [
    0,
  ],
  "flowtype/space-after-type-colon": [
    0,
  ],
  "flowtype/space-before-generic-bracket": [
    0,
  ],
  "flowtype/space-before-type-colon": [
    0,
  ],
  "flowtype/union-intersection-spacing": [
    0,
  ],
  "for-direction": [
    2,
  ],
  "func-call-spacing": [
    0,
  ],
  "function-call-argument-newline": [
    0,
  ],
  "function-paren-newline": [
    0,
  ],
  "generator-star": [
    0,
  ],
  "generator-star-spacing": [
    0,
  ],
  "getter-return": [
    2,
  ],
  "implicit-arrow-linebreak": [
    0,
  ],
  "import/extensions": [
    0,
  ],
  "import/first": [
    1,
  ],
  "import/no-extraneous-dependencies": [
    0,
  ],
  "import/no-unresolved": [
    0,
  ],
  "import/prefer-default-export": [
    0,
  ],
  "indent": [
    0,
  ],
  "indent-legacy": [
    0,
  ],
  "jsx-a11y/alt-text": [
    0,
  ],
  "jsx-a11y/label-has-for": [
    0,
  ],
  "jsx-a11y/no-noninteractive-element-interactions": [
    0,
  ],
  "jsx-a11y/no-static-element-interactions": [
    0,
  ],
  "jsx-no-target-blank": [
    0,
  ],
  "jsx-quotes": [
    0,
  ],
  "key-spacing": [
    0,
  ],
  "keyword-spacing": [
    0,
  ],
  "linebreak-style": [
    2,
    "unix",
  ],
  "lines-around-comment": [
    0,
  ],
  "max-len": [
    0,
  ],
  "max-statements-per-line": [
    0,
  ],
  "multiline-ternary": [
    0,
  ],
  "new-cap": [
    2,
    {
      "capIsNew": false,
      "newIsCap": true,
      "properties": true,
    },
  ],
  "new-parens": [
    0,
  ],
  "newline-per-chained-call": [
    0,
  ],
  "no-alert": [
    0,
  ],
  "no-array-constructor": [
    2,
  ],
  "no-arrow-condition": [
    0,
  ],
  "no-async-promise-executor": [
    2,
  ],
  "no-case-declarations": [
    2,
  ],
  "no-class-assign": [
    2,
  ],
  "no-comma-dangle": [
    0,
  ],
  "no-compare-neg-zero": [
    2,
  ],
  "no-cond-assign": [
    1,
  ],
  "no-confusing-arrow": [
    0,
  ],
  "no-console": [
    2,
  ],
  "no-const-assign": [
    2,
  ],
  "no-constant-binary-expression": [
    2,
  ],
  "no-constant-condition": [
    2,
  ],
  "no-control-regex": [
    2,
  ],
  "no-debugger": [
    2,
  ],
  "no-delete-var": [
    2,
  ],
  "no-dupe-args": [
    2,
  ],
  "no-dupe-class-members": [
    2,
  ],
  "no-dupe-else-if": [
    2,
  ],
  "no-dupe-keys": [
    2,
  ],
  "no-duplicate-case": [
    2,
  ],
  "no-else-return": [
    1,
  ],
  "no-empty": [
    2,
  ],
  "no-empty-character-class": [
    2,
  ],
  "no-empty-pattern": [
    2,
  ],
  "no-empty-static-block": [
    2,
  ],
  "no-ex-assign": [
    2,
  ],
  "no-extra-boolean-cast": [
    1,
  ],
  "no-extra-parens": [
    0,
  ],
  "no-extra-semi": [
    0,
  ],
  "no-fallthrough": [
    2,
  ],
  "no-floating-decimal": [
    0,
  ],
  "no-func-assign": [
    2,
  ],
  "no-global-assign": [
    2,
  ],
  "no-import-assign": [
    2,
  ],
  "no-inner-declarations": [
    2,
  ],
  "no-invalid-regexp": [
    2,
  ],
  "no-irregular-whitespace": [
    2,
  ],
  "no-lonely-if": [
    1,
  ],
  "no-loss-of-precision": [
    2,
  ],
  "no-misleading-character-class": [
    2,
  ],
  "no-mixed-operators": [
    1,
    {
      "allowSamePrecedence": true,
      "groups": [
        [
          "&",
          "|",
          "^",
          "~",
          "<<",
          ">>",
          ">>>",
        ],
        [
          "&&",
          "||",
        ],
      ],
    },
  ],
  "no-mixed-spaces-and-tabs": [
    0,
  ],
  "no-multi-spaces": [
    0,
  ],
  "no-multiple-empty-lines": [
    0,
  ],
  "no-nested-ternary": [
    0,
  ],
  "no-new-native-nonconstructor": [
    2,
  ],
  "no-new-symbol": [
    2,
  ],
  "no-nonoctal-decimal-escape": [
    2,
  ],
  "no-obj-calls": [
    2,
  ],
  "no-octal": [
    2,
  ],
  "no-param-reassign": [
    2,
  ],
  "no-plusplus": [
    2,
    {
      "allowForLoopAfterthoughts": true,
    },
  ],
  "no-prototype-builtins": [
    2,
  ],
  "no-redeclare": [
    2,
  ],
  "no-regex-spaces": [
    2,
  ],
  "no-reserved-keys": [
    0,
  ],
  "no-self-assign": [
    2,
  ],
  "no-setter-return": [
    2,
  ],
  "no-shadow": [
    0,
  ],
  "no-shadow-restricted-names": [
    2,
  ],
  "no-space-before-semi": [
    0,
  ],
  "no-spaced-func": [
    0,
  ],
  "no-sparse-arrays": [
    2,
  ],
  "no-tabs": [
    0,
  ],
  "no-this-before-super": [
    2,
  ],
  "no-trailing-spaces": [
    0,
  ],
  "no-undef": [
    2,
  ],
  "no-underscore-dangle": [
    0,
  ],
  "no-unexpected-multiline": [
    0,
  ],
  "no-unreachable": [
    2,
  ],
  "no-unsafe-finally": [
    2,
  ],
  "no-unsafe-negation": [
    2,
  ],
  "no-unsafe-optional-chaining": [
    2,
  ],
  "no-unused-labels": [
    2,
  ],
  "no-unused-private-class-members": [
    2,
  ],
  "no-unused-vars": [
    2,
    {
      "argsIgnorePattern": "^_",
      "varsIgnorePattern": "^_",
    },
  ],
  "no-use-before-define": [
    0,
  ],
  "no-useless-backreference": [
    2,
  ],
  "no-useless-catch": [
    2,
  ],
  "no-useless-constructor": [
    0,
  ],
  "no-useless-escape": [
    0,
  ],
  "no-whitespace-before-property": [
    0,
  ],
  "no-with": [
    2,
  ],
  "no-wrap-func": [
    0,
  ],
  "nonblock-statement-body-position": [
    0,
  ],
  "object-curly-newline": [
    0,
  ],
  "object-curly-spacing": [
    0,
  ],
  "object-property-newline": [
    0,
  ],
  "object-shorthand": [
    1,
  ],
  "one-var-declaration-per-line": [
    0,
  ],
  "operator-linebreak": [
    0,
  ],
  "padded-blocks": [
    0,
  ],
  "prefer-const": [
    1,
  ],
  "prefer-template": [
    1,
  ],
  "quote-props": [
    1,
    "as-needed",
  ],
  "quotes": [
    0,
  ],
  "react-hooks/exhaustive-deps": [
    1,
  ],
  "react-hooks/rules-of-hooks": [
    2,
  ],
  "react/display-name": [
    2,
  ],
  "react/forbid-prop-types": [
    0,
  ],
  "react/jsx-child-element-spacing": [
    0,
  ],
  "react/jsx-closing-bracket-location": [
    1,
  ],
  "react/jsx-closing-tag-location": [
    0,
  ],
  "react/jsx-curly-newline": [
    0,
  ],
  "react/jsx-curly-spacing": [
    0,
  ],
  "react/jsx-equals-spacing": [
    0,
  ],
  "react/jsx-filename-extension": [
    1,
    {
      "extensions": [
        ".jsx",
        ".tsx",
      ],
    },
  ],
  "react/jsx-first-prop-new-line": [
    0,
  ],
  "react/jsx-indent": [
    1,
    2,
  ],
  "react/jsx-indent-props": [
    1,
    2,
  ],
  "react/jsx-key": [
    2,
  ],
  "react/jsx-max-props-per-line": [
    0,
  ],
  "react/jsx-newline": [
    0,
  ],
  "react/jsx-no-bind": [
    1,
    {
      "allowArrowFunctions": true,
      "allowBind": false,
      "allowFunctions": false,
      "ignoreDOMComponents": false,
      "ignoreRefs": false,
    },
  ],
  "react/jsx-no-comment-textnodes": [
    2,
  ],
  "react/jsx-no-duplicate-props": [
    2,
  ],
  "react/jsx-no-target-blank": [
    1,
  ],
  "react/jsx-no-undef": [
    2,
  ],
  "react/jsx-one-expression-per-line": [
    0,
  ],
  "react/jsx-props-no-multi-spaces": [
    0,
  ],
  "react/jsx-space-before-closing": [
    0,
  ],
  "react/jsx-tag-spacing": [
    0,
  ],
  "react/jsx-uses-react": [
    0,
  ],
  "react/jsx-uses-vars": [
    2,
  ],
  "react/jsx-wrap-multilines": [
    1,
  ],
  "react/no-array-index-key": [
    2,
  ],
  "react/no-children-prop": [
    2,
  ],
  "react/no-danger-with-children": [
    2,
  ],
  "react/no-deprecated": [
    2,
  ],
  "react/no-did-update-set-state": [
    2,
  ],
  "react/no-direct-mutation-state": [
    2,
  ],
  "react/no-find-dom-node": [
    2,
  ],
  "react/no-is-mounted": [
    2,
  ],
  "react/no-multi-comp": [
    0,
  ],
  "react/no-render-return-value": [
    2,
  ],
  "react/no-string-refs": [
    2,
  ],
  "react/no-unescaped-entities": [
    2,
  ],
  "react/no-unknown-property": [
    2,
  ],
  "react/no-unsafe": [
    0,
  ],
  "react/no-unused-prop-types": [
    0,
  ],
  "react/prop-types": [
    0,
  ],
  "react/react-in-jsx-scope": [
    0,
  ],
  "react/require-default-props": [
    0,
  ],
  "react/require-render-return": [
    2,
  ],
  "require-yield": [
    2,
  ],
  "rest-spread-spacing": [
    0,
  ],
  "semi": [
    2,
    "always",
  ],
  "semi-spacing": [
    0,
  ],
  "semi-style": [
    0,
  ],
  "space-after-function-name": [
    0,
  ],
  "space-after-keywords": [
    0,
  ],
  "space-before-blocks": [
    0,
  ],
  "space-before-function-paren": [
    1,
    {
      "anonymous": "always",
      "asyncArrow": "always",
      "named": "never",
    },
  ],
  "space-before-function-parentheses": [
    0,
  ],
  "space-before-keywords": [
    0,
  ],
  "space-in-brackets": [
    0,
  ],
  "space-in-parens": [
    0,
  ],
  "space-infix-ops": [
    0,
  ],
  "space-return-throw-case": [
    0,
  ],
  "space-unary-ops": [
    0,
  ],
  "space-unary-word-ops": [
    0,
  ],
  "standard/array-bracket-even-spacing": [
    0,
  ],
  "standard/computed-property-even-spacing": [
    0,
  ],
  "standard/object-curly-even-spacing": [
    0,
  ],
  "switch-colon-spacing": [
    0,
  ],
  "template-curly-spacing": [
    0,
  ],
  "template-tag-spacing": [
    0,
  ],
  "unicode-bom": [
    0,
  ],
  "unicorn/empty-brace-spaces": [
    0,
  ],
  "unicorn/no-nested-ternary": [
    0,
  ],
  "unicorn/number-literal-case": [
    0,
  ],
  "use-isnan": [
    2,
  ],
  "use-macros/graphql-tag": [
    2,
  ],
  "use-macros/styled-components": [
    2,
  ],
  "valid-typeof": [
    2,
  ],
  "vue/array-bracket-newline": [
    0,
  ],
  "vue/array-bracket-spacing": [
    0,
  ],
  "vue/array-element-newline": [
    0,
  ],
  "vue/arrow-spacing": [
    0,
  ],
  "vue/block-spacing": [
    0,
  ],
  "vue/block-tag-newline": [
    0,
  ],
  "vue/brace-style": [
    0,
  ],
  "vue/comma-dangle": [
    0,
  ],
  "vue/comma-spacing": [
    0,
  ],
  "vue/comma-style": [
    0,
  ],
  "vue/dot-location": [
    0,
  ],
  "vue/func-call-spacing": [
    0,
  ],
  "vue/html-closing-bracket-newline": [
    0,
  ],
  "vue/html-closing-bracket-spacing": [
    0,
  ],
  "vue/html-end-tags": [
    0,
  ],
  "vue/html-indent": [
    0,
  ],
  "vue/html-quotes": [
    0,
  ],
  "vue/html-self-closing": [
    0,
  ],
  "vue/key-spacing": [
    0,
  ],
  "vue/keyword-spacing": [
    0,
  ],
  "vue/max-attributes-per-line": [
    0,
  ],
  "vue/max-len": [
    0,
  ],
  "vue/multiline-html-element-content-newline": [
    0,
  ],
  "vue/multiline-ternary": [
    0,
  ],
  "vue/mustache-interpolation-spacing": [
    0,
  ],
  "vue/no-extra-parens": [
    0,
  ],
  "vue/no-multi-spaces": [
    0,
  ],
  "vue/no-spaces-around-equal-signs-in-attribute": [
    0,
  ],
  "vue/object-curly-newline": [
    0,
  ],
  "vue/object-curly-spacing": [
    0,
  ],
  "vue/object-property-newline": [
    0,
  ],
  "vue/operator-linebreak": [
    0,
  ],
  "vue/quote-props": [
    0,
  ],
  "vue/script-indent": [
    0,
  ],
  "vue/singleline-html-element-content-newline": [
    0,
  ],
  "vue/space-in-parens": [
    0,
  ],
  "vue/space-infix-ops": [
    0,
  ],
  "vue/space-unary-ops": [
    0,
  ],
  "vue/template-curly-spacing": [
    0,
  ],
  "wrap-iife": [
    0,
  ],
  "wrap-regex": [
    0,
  ],
  "yield-star-spacing": [
    0,
  ],
}
`;
